//
// Implements the pipeline evaluator for the MINTIA Command Language.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"
#include "<ll>/MCL/Mcl.h"

#include "<ll>/OSDLL/OSConsoleControl.h"

#include "Mcl.h"

fn MclpMakePipe { -- serverhandle clienthandle ok }
	auto duplexhandle

	OSDUPLEXFLAG_SIMPLEX // flags
	0 // name
	ACCESS_OWNER_ALL // permissions
	OSDuplexCreate ok! serverhandle! duplexhandle!

	if (ok@)
		return
	end

	// get a file object from the device object.

	0 // flags
	ACCESS_ALL // access
	duplexhandle@ // initialobjecthandle
	"" // path
	OSObjectOpen ok! clienthandle!

	duplexhandle@ OSClose drop

	if (ok@)
		serverhandle@ OSClose drop

		return
	end
end

fn MclpEvaluatePipeline { node machine -- value ok }
	0 value!
	0 ok!

	//
	// create a pipeline by spawning the specified commands in sequence and
	// connecting their stdio to the server and client end of duplex objects.
	//
	// the final command's stdio has a few cases, checked in this order:
	//  1. there is redirection to a file.
	//  2. capture depth > 0, meaning we need to shove its stdout into our
	//     value string.
	//  3. neither of the above, so it inherits our stdio.
	//
	// for case #1, we open one or more files and redirect stdin/stdout/stderr
	// to them.
	//
	// for case #2, we create a duplex object and redirect its stdout to it.
	// we then have to sit here and wait for it to EOF, and during that time
	// we read it into a series of buffers. finally, we append all of our
	// buffers into one big buffer and return that as the value.
	//
	// for case #3, we don't need to do anything special.
	//
	// there are also two cases for whether we wait for pipeline completion or
	// not:
	//  1. & was specified, so we don't wait. this is overridden by case #2 of
	//     redirection, since we have to wait for EOF on the duplex object.
	//  2. & was not specified, so we wait for pipeline completion.
	//

end

fn MclpEvaluateCommand { node machine -- value ok }
	0 value!
	0 ok!
end