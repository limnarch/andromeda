//
// Implements the primitive builtins for the MINTIA Command Language.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"
#include "<ll>/MCL/Mcl.h"

#include "Mcl.h"

fn MclpRegisterPrimitiveBuiltins { machine -- ok }
	pointerof MclpBuiltinPrintLine // func
	"println" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinPrint // func
	"print" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinPlus // func
	"+" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinMinus // func
	"-" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinLessThan // func
	"lt" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinGreaterThan // func
	"gt" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinLessThanEqual // func
	"lte" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinGreaterThanEqual // func
	"gte" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinEqualNum // func
	"==" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinEqualString // func
	"=" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinNotEqualNum // func
	"n==" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinNotEqualString // func
	"n=" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinNot // func
	"!" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinInput // func
	"input" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinImport // func
	"import" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinExport // func
	"export" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end
end

fn (MclBuiltinF) MclpBuiltinPrint { argvt argcn machine -- value ok }
	auto ps
	0 ps!

	while (argcn@)
		if (ps@)
			argvt@@ " %s" Printf
		end else
			argvt@@ "%s" Printf
		end

		1 ps!
		4 argvt +=
		1 argcn -=
	end

	0 ok!
	0 value!
end

fn (MclBuiltinF) MclpBuiltinPrintLine { argvt argcn machine -- value ok }
	auto ps
	0 ps!

	while (argcn@)
		if (ps@)
			argvt@@ " %s" Printf
		end else
			argvt@@ "%s" Printf
		end

		1 ps!
		4 argvt +=
		1 argcn -=
	end

	"\n" Printf

	0 ok!
	0 value!
end

fn (MclBuiltinF) MclpBuiltinPlus { argvt argcn machine -- value ok }
	16 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	auto result
	0 result!

	while (argcn@)
		argvt@@ atoi result +=

		1 argcn -=
		4 argvt +=
	end

	result@ value@ itoa
end

fn (MclBuiltinF) MclpBuiltinMinus { argvt argcn machine -- value ok }
	16 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	auto result
	0 result!

	while (argcn@)
		argvt@@ atoi result -=

		1 argcn -=
		4 argvt +=
	end

	result@ value@ itoa
end

fn (MclBuiltinF) MclpBuiltinLessThan { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	4 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	if (argvt@@ atoi argvt@ 4 + @ atoi <)
		'1' value@ sb
	end else
		'0' value@ sb
	end

	0 value@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinGreaterThan { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	4 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	if (argvt@@ atoi argvt@ 4 + @ atoi >)
		'1' value@ sb
	end else
		'0' value@ sb
	end

	0 value@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinLessThanEqual { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	4 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	if (argvt@@ atoi argvt@ 4 + @ atoi <=)
		'1' value@ sb
	end else
		'0' value@ sb
	end

	0 value@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinGreaterThanEqual { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	4 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	if (argvt@@ atoi argvt@ 4 + @ atoi >=)
		'1' value@ sb
	end else
		'0' value@ sb
	end

	0 value@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinEqualNum { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	4 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	if (argvt@@ atoi argvt@ 4 + @ atoi ==)
		'1' value@ sb
	end else
		'0' value@ sb
	end

	0 value@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinNotEqualNum { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	4 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	if (argvt@@ atoi argvt@ 4 + @ atoi ~=)
		'1' value@ sb
	end else
		'0' value@ sb
	end

	0 value@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinEqualString { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	4 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	if (argvt@@ argvt@ 4 + @ strcmp)
		'1' value@ sb
	end else
		'0' value@ sb
	end

	0 value@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinNotEqualString { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	4 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	if (argvt@@ argvt@ 4 + @ strcmp ~~)
		'1' value@ sb
	end else
		'0' value@ sb
	end

	0 value@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinNot { argvt argcn machine -- value ok }
	if (argcn@ 1 ~=)
		"expected 1 argument\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	4 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	if (argvt@@ MclpEvaluateValueTruthiness ~~)
		'1' value@ sb
	end else
		'0' value@ sb
	end

	0 value@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinInput { argvt argcn machine -- value ok }
	if (argcn@ 0 ~=)
		"expected 0 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	512 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	value@ // s
	511 // max
	Gets
end

fn (MclBuiltinF) MclpBuiltinImport { argvt argcn machine -- value ok }
	if (argcn@ 1 ~=)
		"expected 1 argument\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	512 OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	value@ // env
	argvt@@ // name
	512 // bufsize
	OSGetEnvironmentVariable ok!

	if (ok@)
		0 ok!
		0 value!
		return
	end
end

fn (MclBuiltinF) MclpBuiltinExport { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	0 value!
	0 ok!

	argvt@ 4 + @ // env
	argvt@@ // name
	OSSetEnvironmentVariable drop
end