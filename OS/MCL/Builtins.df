//
// Implements the primitive builtins for the MINTIA Command Language.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"
#include "<ll>/MCL/Mcl.h"

#include "Mcl.h"

fn MclpRegisterPrimitiveBuiltins { machine -- ok }
	pointerof MclpBuiltinPrintLine // func
	"println" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinPrint // func
	"print" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinPlus // func
	"+" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinMinus // func
	"-" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinMultiply // func
	"*" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinDivide // func
	"/" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinModulo // func
	"%" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinLessThan // func
	"lt" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinGreaterThan // func
	"gt" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinLessThanEqual // func
	"lte" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinGreaterThanEqual // func
	"gte" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinEqualNum // func
	"==" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinEqualString // func
	"=" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinNotEqualNum // func
	"n==" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinNotEqualString // func
	"n=" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinNot // func
	"!" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinInput // func
	"input" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinImport // func
	"import" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinExport // func
	"export" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinHeap // func
	"heap" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end

	pointerof MclpBuiltinInclude // func
	"include" // name
	machine@ // machine
	MclpRegisterBuiltin ok!

	if (ok@)
		return
	end
end

fn (MclBuiltinF) MclpBuiltinPrint { argvt argcn machine -- value ok }
	auto ps
	0 ps!

	while (argcn@)
		if (ps@)
			argvt@@ " %s" Printf
		end else
			argvt@@ "%s" Printf
		end

		1 ps!
		4 argvt +=
		1 argcn -=
	end

	OSFlushLine

	0 ok!
	0 value!
end

fn (MclBuiltinF) MclpBuiltinPrintLine { argvt argcn machine -- value ok }
	auto ps
	0 ps!

	while (argcn@)
		if (ps@)
			argvt@@ " %s" Printf
		end else
			argvt@@ "%s" Printf
		end

		1 ps!
		4 argvt +=
		1 argcn -=
	end

	"\n" Printf

	0 ok!
	0 value!
end

fn (MclBuiltinF) MclpBuiltinPlus { argvt argcn machine -- value ok }
	LEXTOK_LITERAL // tokflag
	16 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	auto result
	0 result!

	while (argcn@)
		argvt@@ atoi result +=

		1 argcn -=
		4 argvt +=
	end

	result@ contents@ itoa
end

fn (MclBuiltinF) MclpBuiltinMinus { argvt argcn machine -- value ok }
	LEXTOK_LITERAL // tokflag
	16 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	auto result
	0 result!

	while (argcn@)
		argvt@@ atoi result -=

		1 argcn -=
		4 argvt +=
	end

	result@ contents@ itoa
end

fn (MclBuiltinF) MclpBuiltinMultiply { argvt argcn machine -- value ok }
	LEXTOK_LITERAL // tokflag
	16 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	'0' contents@ sb
	0 contents@ 1 + sb

	if (argcn@ 2 ~=)
		return
	end

	argvt@@ atoi
	argvt@ 4 + @ atoi *
	contents@ itoa
end

fn (MclBuiltinF) MclpBuiltinDivide { argvt argcn machine -- value ok }
	LEXTOK_LITERAL // tokflag
	16 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	'0' contents@ sb
	0 contents@ 1 + sb

	if (argcn@ 2 ~=)
		return
	end

	if (argvt@ 4 + @ atoi ~~)
		return
	end

	argvt@@ atoi
	argvt@ 4 + @ atoi /
	contents@ itoa
end

fn (MclBuiltinF) MclpBuiltinModulo { argvt argcn machine -- value ok }
	LEXTOK_LITERAL // tokflag
	16 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	'0' contents@ sb
	0 contents@ 1 + sb

	if (argcn@ 2 ~=)
		return
	end

	if (argvt@ 4 + @ atoi ~~)
		return
	end

	argvt@@ atoi
	argvt@ 4 + @ atoi %
	contents@ itoa
end

fn (MclBuiltinF) MclpBuiltinLessThan { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	1 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	if (argvt@@ atoi argvt@ 4 + @ atoi <)
		'1' contents@ sb
	end else
		'0' contents@ sb
	end

	0 contents@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinGreaterThan { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	1 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	if (argvt@@ atoi argvt@ 4 + @ atoi >)
		'1' contents@ sb
	end else
		'0' contents@ sb
	end

	0 contents@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinLessThanEqual { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	1 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	if (argvt@@ atoi argvt@ 4 + @ atoi <=)
		'1' contents@ sb
	end else
		'0' contents@ sb
	end

	0 contents@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinGreaterThanEqual { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	1 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	if (argvt@@ atoi argvt@ 4 + @ atoi >=)
		'1' contents@ sb
	end else
		'0' contents@ sb
	end

	0 contents@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinEqualNum { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	1 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	if (argvt@@ atoi argvt@ 4 + @ atoi ==)
		'1' contents@ sb
	end else
		'0' contents@ sb
	end

	0 contents@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinNotEqualNum { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	1 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	if (argvt@@ atoi argvt@ 4 + @ atoi ~=)
		'1' contents@ sb
	end else
		'0' contents@ sb
	end

	0 contents@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinEqualString { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	1 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	if (argvt@@ argvt@ 4 + @ strcmp)
		'1' contents@ sb
	end else
		'0' contents@ sb
	end

	0 contents@ 1 + sb
end

fn (MclBuiltinF) MclpBuiltinNotEqualString { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	1 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	if (argvt@@ argvt@ 4 + @ strcmp ~~)
		'1' contents@ sb
	end else
		'0' contents@ sb
	end
end

fn (MclBuiltinF) MclpBuiltinNot { argvt argcn machine -- value ok }
	if (argcn@ 1 ~=)
		"expected 1 argument\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	1 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	if (argvt@@ MclpEvaluateValueTruthiness ~~)
		'1' contents@ sb
	end else
		'0' contents@ sb
	end
end

fn (MclBuiltinF) MclpBuiltinInput { argvt argcn machine -- value ok }
	if (argcn@ 0 ~=)
		"expected 0 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	511 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	auto count
	contents@ // buf
	511 // max
	OSGetStdIn // stream
	machine@ // machine
	MclpInteractiveReadLine ok! count!

	if (ok@)
		value@ MclpFreeValue

		return
	end

	if (count@)
		if (contents@ count@ + 1 - gb '\n' ==)
			0 contents@ count@ + 1 - sb
		end

		count@ value@ MclpValue_Length + !
	end
end

fn (MclBuiltinF) MclpBuiltinImport { argvt argcn machine -- value ok }
	if (argcn@ 1 ~=)
		"expected 1 argument\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	LEXTOK_LITERAL // tokflag
	511 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	value@ MclpValueContents // env
	argvt@@ // name
	511 // bufsize
	OSGetEnvironmentVariable ok!

	if (ok@)
		0 ok!
		value@ MclpFreeValue
		0 value!
		return
	end
end

fn (MclBuiltinF) MclpBuiltinExport { argvt argcn machine -- value ok }
	if (argcn@ 2 ~=)
		"expected 2 arguments\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	0 value!
	0 ok!

	argvt@ 4 + @ // env
	argvt@@ // name
	OSSetEnvironmentVariable drop
end

fn (MclBuiltinF) MclpBuiltinHeap { argvt argcn machine -- value ok }
	LEXTOK_LITERAL // tokflag
	16 // len
	0 // contents
	VALTYPE_INLINE // type
	MclpValueNew ok! value!

	if (ok@)
		return
	end

	auto contents
	value@ MclpValueContents contents!

	auto query
	OSHeapInformation_SIZEOF alloc query!

	query@ OSHeapQuery

	query@ OSHeapInformation_UsedInternally + @ contents@ itoa
end

fn (MclBuiltinF) MclpBuiltinInclude { argvt argcn machine -- value ok }
	if (argcn@ 1 ~=)
		"expected at least 1 argument\n" // fmt
		machine@ // machine
		MclDiagnostic

		STATUS_SYNTAX_ERROR ok!

		return
	end

	auto streamhandle
	OSFILETYPE_ANY_STREAM // filetype
	0 // flags
	ACCESS_READ // access
	argvt@@ // path
	OSFileOpen ok! streamhandle!

	if (ok@)
		ok@ OSStatusGetName
		argvt@@
		"%s: %s\n" // fmt
		machine@ // machine
		MclDiagnostic

		return
	end

	auto rootblock
	argvt@@ // filename
	0 // interactive
	streamhandle@ // streamhandle
	machine@ // machine
	MclMachineParseFile ok! rootblock!

	streamhandle@ OSClose drop

	if (ok@)
		ok@ OSStatusGetName
		argvt@@
		"%s: %s\n" // fmt
		machine@ // machine
		MclDiagnostic

		return
	end

	0 // capture
	rootblock@ // node
	machine@ // machine
	MclMachineEvaluateNode ok! value!

	rootblock@ MclParseSubtreeFree

	if (ok@)
		ok@ OSStatusGetName
		argvt@@
		"%s: %s\n" // fmt
		machine@ // machine
		MclDiagnostic
	
		return
	end
end