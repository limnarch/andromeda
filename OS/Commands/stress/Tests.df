#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "Stress.h"

fn (StressTestF) ForkbombTest { -- ok }
	while (1)
		auto phandle
		auto thandle

		"forkbomb"
		ArgTable@@ // path
		0 // creationflags
		0 // creationparams
		ACCESS_OWNER_ALL // permissions
		"forkbomb" // name
		OSSpawn ok! phandle! thandle!

		if (ok@)
			ok@ OSStatusGetName "forkbomb: %s\n" OSError
		end

		phandle@ OSClose drop
		thandle@ OSClose drop
	end
end

fn MSTime { -- mstime }
	auto sec
	auto ms

	OSQueryTime ms! sec!

	sec@ 1000 * ms@ + mstime!
end

fn (StressTestF) SwapTest { -- ok }
	auto hugeareasize
	0 hugeareasize!

	if (ArgCount@ 3 ==)
		ArgTable@ 2 4 * + @ atoi hugeareasize!
	end

	if (hugeareasize@ ~~)
		6 1024 * 1024 * hugeareasize!
	end

	hugeareasize@ OSPAGEOFFSETMASK + OSPAGENUMBERMASK & hugeareasize!

	hugeareasize@ 1024 /
	"swaptest: swapping aggressively on a %dKB area\n" Printf

	auto hugearea
	hugeareasize@ OSHeapAllocate ok! hugearea!

	if (ok@)
		ok@ OSStatusGetName "swaptest: couldn't allocate area: %s\nTry specifying a smaller area size as the second argument in the command line.\n" OSError
	end

	hugearea@ "\nhugearea = 0x%08x\n" Printf

	"swaptest: writing: one dot represents 128KB\n" Printf

	auto mstime
	MSTime mstime!

	auto ptr
	hugearea@ ptr!

	auto size
	hugeareasize@ size!

	while (size@)
		if (size@ 131071 & ~~)
			'.' Putc
			OSFlushLine
		end

		0xAA55AA55 ptr@!

		OSPAGESIZE ptr +=
		OSPAGESIZE size -=
	end

	auto endtime
	MSTime endtime!

	auto diff
	endtime@ mstime@ - diff!

	diff@ 1000 %
	diff@ 1000 /
	"done in %dsec %dms\n" Printf

	hugearea@ OSHeapFree
end

fn (StressTestF) NullptrTest { -- ok }
	0 0!
end

fn (StressTestF) OverflowTest { -- ok }
	OverflowTest drop
end

fn (StressTestF) FastMutexTest { -- ok }
	auto count
	39 count!

	while (count@)
		auto thandle
		0 // context
		pointerof FastMutexTestThread // startfunc
		0 // creationflags
		ACCESS_OWNER_ALL // permissions
		"TestFastMutexThread" // name
		OSCURRENTPROCESS // processhandle
		OSThreadCreate ok! thandle!

		if (ok@)
			return
		end

		thandle@ OSClose drop

		1 count -=
	end

	0 FastMutexTestThread drop
end

table HeapBlockSizes
	32
	17
	1023
	63
	4095
	8191
	72
	45
endtable

fn FastMutexTestThread { context -- ret }
	auto count
	0 count!

	while (1)
		auto block
		[count@ 7 &]HeapBlockSizes@ OSHeapAllocate ret! block!

		if (ret@)
			ret@ OSStatusGetName "FastMutexTestThread: %s\n" OSError
		end

		block@ // ptr
		[count@ 7 &]HeapBlockSizes@ // sz
		0 // word
		memset

		0 OSThreadSleep drop

		block@ OSHeapFree

		1 count +=
	end
end

buffer TestBuffer 131072

fn (StressTestF) StreamReadTest { -- ok }
	auto count
	35 count!

	while (count@)
		auto thandle
		0 // context
		pointerof StreamReadTestThread // startfunc
		0 // creationflags
		ACCESS_OWNER_ALL // permissions
		"StreamReadTestThread" // name
		OSCURRENTPROCESS // processhandle
		OSThreadCreate ok! thandle!

		if (ok@)
			return
		end

		thandle@ OSClose drop

		1 count -=
	end

	0 StreamReadTestThread drop
end

fn StreamReadTestThread { context -- ret }
	auto ok

	while (1)
		auto stream

		0 // streamflags
		0 // flags
		ACCESS_READ // access
		"/mintia/SystemInit.cfg" // path
		OSFILETYPE_FILE // ftype
		OSStreamOpen ok! stream!

		if (ok@)
			ok@ OSStatusGetName "%s\n" OSError
		end

		// stream@ "%x\n" OSGetStdErr FPrintf

		auto bytesread
		OSWAIT_TIMEOUTINFINITE // timeout
		0 // flags
		65536 // length
		TestBuffer // buffer
		stream@ // stream
		OSStreamRead ok! bytesread!

		if (ok@)
			ok@ OSStatusGetName "read: %s\n" OSError
		end

		bytesread@ "%d " Printf

		stream@ OSStreamClose ok!

		if (ok@)
			ok@ OSStatusGetName "close: %s\n" OSError
		end
	end
end

fn (StressTestF) StreamWriteTest { -- ok }

end