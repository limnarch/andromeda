#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "Edit.h"

// manages a gap buffer for the file contents

var NextVirtualBuffer 0x10000000

fn BufferCreate { -- buffer ok }
	Buffer_SIZEOF OSHeapAllocate ok! buffer!

	if (ok@)
		return
	end

	auto va
	OSPAGESIZE // length
	NextVirtualBuffer@ // startva
	OSCURRENTPROCESS // processhandle
	PAGEACCESS_READ PAGEACCESS_WRITE | // pageprotection
	0 // flags
	OSAllocate ok! va!

	if (ok@)
		buffer@ OSHeapFree
		return
	end

	va@ buffer@ Buffer_VirtualBuffer + !
	OSPAGESIZE buffer@ Buffer_VirtualBufferSize + !

	0 buffer@ Buffer_GapOffset + !
	OSPAGESIZE buffer@ Buffer_GapSize + !

	0 buffer@ Buffer_Size + !

	16 1024 * 1024 * NextVirtualBuffer +=
end

fn BufferPopulate { filehandle buffer -- ok }
	// populate a buffer using the given filehandle.

	auto query
	OSFileInformation_SIZEOF alloc query!

	filehandle@ // filehandle
	query@ // query
	OSFileQuery ok!

	if (ok@)
		return
	end

	if (query@ OSFileInformation_Size + @ 0 ==)
		return
	end

	// map file COW

	auto vaddr
	query@ OSFileInformation_Size + @ // length
	buffer@ Buffer_VirtualBuffer + @ OSPAGESIZE + // startva
	0 // sectionoffset
	filehandle@ // mappedhandle
	OSCURRENTPROCESS // processhandle
	PAGEACCESS_READ PAGEACCESS_WRITECOPY | // pageprotection
	OSMAPFLAG_FIXEDADDRESS // flags
	OSMapView ok! vaddr!

	if (ok@)
		return
	end

	query@ OSFileInformation_Size + @ buffer@ Buffer_VirtualBufferSize + +=
	query@ OSFileInformation_Size + @ buffer@ Buffer_Size + !
end

fn BufferGetChar { location buffer -- char ok }
	0 ok!

	if (location@ buffer@ Buffer_Size + @ >=)
		-1 ok!
		return
	end

	if (location@ buffer@ Buffer_GapOffset + @ <)
		buffer@ Buffer_VirtualBuffer + @ location@ + gb char!
		return
	end

	buffer@ Buffer_VirtualBuffer + @ buffer@ Buffer_GapSize + @ + location@ + gb char!
end