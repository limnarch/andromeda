#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "Edit.h"

// manages a piece table for the file contents

fn BufferCreate { -- buffer ok }
	Buffer_SIZEOF OSHeapAllocate ok! buffer!

	if (ok@)
		return
	end

	0 buffer@ Buffer_OriginalBuffer + !
	0 buffer@ Buffer_OriginalBufferSize + !

	0 buffer@ Buffer_AddBuffer + !
	0 buffer@ Buffer_AddOffset + !
	0 buffer@ Buffer_AddSize + !

	0 buffer@ Buffer_Size + !

	0 buffer@ Buffer_PieceListHead + !
	0 buffer@ Buffer_PieceListTail + !

	0 buffer@ Buffer_CachedPiece + !
	0 buffer@ Buffer_CachedPieceOffset + !
end

fn BufferDelete { buffer -- }
	if (buffer@ Buffer_AddBuffer + @)
		buffer@ Buffer_AddBuffer + @ OSHeapFree
	end

	if (buffer@ Buffer_OriginalBuffer + @)
		buffer@ Buffer_OriginalBufferSize + @ // length
		buffer@ Buffer_OriginalBuffer + @ // vaddr
		OSCURRENTPROCESS // processhandle
		OSUnmapView drop
	end

	auto piece
	buffer@ Buffer_PieceListHead + @ piece!

	while (piece@)
		auto npiece
		piece@ Piece_Next + @ npiece!

		piece@ OSHeapFree

		npiece@ piece!
	end

	buffer@ OSHeapFree
end

fn BufferPopulate { filehandle buffer -- ok }
	// populate a buffer using the given filehandle.

	auto query
	OSFileInformation_SIZEOF alloc query!

	filehandle@ // filehandle
	query@ // query
	OSFileQuery ok!

	if (ok@)
		return
	end

	if (query@ OSFileInformation_Size + @ 0 ==)
		return
	end

	auto vaddr
	query@ OSFileInformation_Size + @ // length
	0x10000000 // startva (randomly selected to be out of the way)
	0 // sectionoffset
	filehandle@ // mappedhandle
	OSCURRENTPROCESS // processhandle
	PAGEACCESS_READ // pageprotection
	0 // flags
	OSMapView ok! vaddr!

	if (ok@)
		return
	end

	vaddr@ buffer@ Buffer_OriginalBuffer + !
	query@ OSFileInformation_Size + @ buffer@ Buffer_OriginalBufferSize + !
	query@ OSFileInformation_Size + @ buffer@ Buffer_Size + !

	auto piece
	buffer@ Buffer_OriginalPiece + piece!

	0 piece@ Piece_Prev + !
	0 piece@ Piece_Next + !
	0 piece@ Piece_Flags + !
	0 piece@ Piece_Offset + !
	query@ OSFileInformation_Size + @ piece@ Piece_Length + !

	piece@ buffer@ Buffer_PieceListHead + !
	piece@ buffer@ Buffer_PieceListTail + !

	piece@ buffer@ Buffer_CachedPiece + !
	0 buffer@ Buffer_CachedPieceOffset + !
end

fn BufferFindOffset { offset buffer -- ptr offsetinpiece piece ok }
	if (offset@ buffer@ Buffer_Size + @ >=)
		-1 ok!
		return
	end

	0 ok!

	buffer@ Buffer_CachedPiece + @ piece!

	auto pcoffset
	buffer@ Buffer_CachedPieceOffset + @ pcoffset!

	if (offset@ pcoffset@ >=)
		if (offset@ pcoffset@ piece@ Piece_Length + @ + <)
			// found it immediately

			if (piece@ Piece_Flags + @ PIECEFLAG_ADDBUFFER & ~~)
				buffer@ Buffer_OriginalBuffer + @ piece@ Piece_Offset + @ + ptr!
			end else
				buffer@ Buffer_AddBuffer + @ piece@ Piece_Offset + @ + ptr!
			end

			offset@ pcoffset@ - offsetinpiece!
			offsetinpiece@ ptr +=

			return
		end
	end

	if (offset@ pcoffset@ <)
		// search backwards

		piece@ Piece_Length + @ pcoffset -=
		piece@ Piece_Prev + @ piece!

		while (piece@)
			if (offset@ pcoffset@ >=)
				if (offset@ pcoffset@ piece@ Piece_Length + @ + <)
					// found it
					break
				end
			end

			piece@ Piece_Length + @ pcoffset -=
			piece@ Piece_Prev + @ piece!
		end
	end else
		// search forwards

		piece@ Piece_Length + @ pcoffset +=
		piece@ Piece_Next + @ piece!

		while (piece@)
			if (offset@ pcoffset@ >=)
				if (offset@ pcoffset@ piece@ Piece_Length + @ + <)
					// found it
					break
				end
			end

			piece@ Piece_Length + @ pcoffset +=
			piece@ Piece_Next + @ piece!
		end
	end

	if (piece@ ~~)
		"BufferFindOffset\n" OSError
	end

	if (piece@ Piece_Flags + @ PIECEFLAG_ADDBUFFER & ~~)
		buffer@ Buffer_OriginalBuffer + @ piece@ Piece_Offset + @ + ptr!
	end else
		buffer@ Buffer_AddBuffer + @ piece@ Piece_Offset + @ + ptr!
	end

	offset@ pcoffset@ - offsetinpiece!
	offsetinpiece@ ptr +=

	piece@ buffer@ Buffer_CachedPiece + !
	pcoffset@ buffer@ Buffer_CachedPieceOffset + !
end

fn BufferGetPointer { offset piece buffer -- ptr }
	if (piece@ Piece_Flags + @ PIECEFLAG_ADDBUFFER & ~~)
		buffer@ Buffer_OriginalBuffer + @ piece@ Piece_Offset + @ + ptr!
	end else
		buffer@ Buffer_AddBuffer + @ piece@ Piece_Offset + @ + ptr!
	end

	offset@ ptr +=
end