#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

buffer ProcessInformation OSProcessInformation_SIZEOF

fn (OSSignalHandler) SignalInterrupt { context signum -- }
	// do nothing
end

fn MSTime { -- mstime }
	auto sec
	auto ms

	OSQueryTime ms! sec!

	sec@ 1000 * ms@ + mstime!
end

fn Main { ... -- ret }
	0 ret!

	if (argc@ 2 <)
		return
	end

	auto starttime
	MSTime starttime!

	auto phandle
	auto thandle

	argc@ 2 - // argcn
	argv 8 + // argvt
	[1]argv@ // progname
	0 // creationflags
	0 // creationparams
	ACCESS_OWNER_ALL // permissions
	0 // name
	OSSpawnByNameV ret! phandle! thandle!

	if (ret@)
		ret@ OSStatusGetName [1]argv@ "time: %s: %s\n" OSError
	end

	thandle@ OSClose drop

	pointerof SignalInterrupt // action
	OSSIGNAL_INT // signum
	OSSignalSetAction drop

	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	phandle@ // objecthandle
	OSWaitForObject drop

	auto endtime
	MSTime endtime!

	phandle@ // processhandle
	ProcessInformation // query
	OSProcessQuery ret!

	phandle@ OSClose drop

	if (ret@)
		ret@ OSStatusGetName "time: couldn't query: %s\n" OSError
	end

	"\n" OSGetStdErr FPrintf

	endtime@ starttime@ -
	ComputeTime
	"real     %dm%d.%03ds\n" OSGetStdErr FPrintf

	ProcessInformation OSProcessInformation_UserTimeMs + @
	ComputeTime
	"user     %dm%d.%03ds\n" OSGetStdErr FPrintf

	ProcessInformation OSProcessInformation_SystemTimeMs + @
	ComputeTime
	"sys(LOW) %dm%d.%03ds\n" OSGetStdErr FPrintf

	ProcessInformation OSProcessInformation_DPCTimeMs + @
	ComputeTime
	"sys(DPC) %dm%d.%03ds\n" OSGetStdErr FPrintf
end

fn ComputeTime { timems -- ms sec min }
	timems@ 1000 % ms!

	1000 timems /=

	timems@ 60 / min!

	timems@ 60 % sec!
end