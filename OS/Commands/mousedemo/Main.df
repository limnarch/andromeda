#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<ll>/OSDLL/OSMouseControl.h"
#include "<ll>/OSDLL/OSVideoControl.h"

var XRes 0
var YRes 0

var FBAddress 0

var BytesPerRow 0

const BOXROWS 8
const BOXCOLS 8

fn InvertBox32 { x y -- }
	auto base
	y@ XRes@ * x@ + 4 * FBAddress@ + base!

	auto mod
	XRes@ BOXCOLS - 4 * mod!

	auto count
	BOXROWS count!

	while (count@)
		auto xcount
		BOXCOLS xcount!

		while (xcount@)
			base@@ ~ base@!

			4 base +=
			1 xcount -=
		end

		mod@ base +=
		1 count -=
	end
end

fn InvertBox { x y -- }
	if (BytesPerRow@ 4 ==)
		x@ y@ InvertBox32
		return
	end

	auto i
	0 i!

	auto base
	y@ XRes@ * x@ + FBAddress@ + base!

	auto mod
	XRes@ BOXCOLS - mod!

	auto alignpix
	0 alignpix!

	if (base@ 3 &)
		4 base@ 3 & - alignpix!
	end

	auto count
	BOXCOLS alignpix@ - 4 >> count!

	auto extrapix
	BOXCOLS count@ 4 << - alignpix@ - extrapix!

	while (i@ BOXROWS <)
		auto j
		alignpix@ j!

		while (j@)
			base@ gb ~ base@ sb

			1 base +=
			1 j -=
		end

		count@ j!

		while (j@)
			base@@ ~ base@!
			base@ 4 + @ ~ base@ 4 + !
			base@ 8 + @ ~ base@ 8 + !
			base@ 12 + @ ~ base@ 12 + !

			16 base +=
			1 j -=
		end

		extrapix@ j!

		while (j@)
			base@ gb ~ base@ sb

			1 base +=
			1 j -=
		end

		mod@ base +=
		1 i +=
	end
end

fn Main { ... -- ret }
	0 ret!

	auto mousehandle
	0 // flags
	ACCESS_READ // access
	":mouse2" // path
	0 // ftype
	OSFileOpen ret! mousehandle!

	if (ret@)
		0 // flags
		ACCESS_READ // access
		":foxmouse0" // path
		0 // ftype
		OSFileOpen ret! mousehandle!

		if (ret@)
			ret@ OSStatusGetName "mousedemo: couldn't open mouse device: %s\n" OSError
		end
	end

	auto fbhandle
	0 // flags
	ACCESS_READ ACCESS_WRITE | // access
	":kinnowfb0" // path
	0 // ftype
	OSFileOpen ret! fbhandle!

	if (ret@)
		0 // flags
		ACCESS_READ ACCESS_WRITE | // access
		":foxfb0" // path
		0 // ftype
		OSFileOpen ret! fbhandle!

		if (ret@)
			ret@ OSStatusGetName "mousedemo: couldn't open framebuffer device: %s\n" OSError
		end
	end

	auto mousepacket
	OSMousePacket_SIZEOF alloc mousepacket!

	auto videoquery
	OSVideoQuery_SIZEOF alloc videoquery!

	videoquery@ // arg2
	OSVIDEOIOCONTROL_QUERY // arg1
	fbhandle@ // filehandle
	OSIOControl ret! drop

	if (ret@)
		ret@ OSStatusGetName "mousedemo: failed to get video parameters: %s\n" OSError
	end

	videoquery@ OSVideoQuery_Height + @ YRes!
	videoquery@ OSVideoQuery_Width + @ XRes!

	if (videoquery@ OSVideoQuery_Format + @ OSFBFORMAT_I8 ==)
		1 BytesPerRow!
	end elseif (videoquery@ OSVideoQuery_Format + @ OSFBFORMAT_RGBA32 ==)
		4 BytesPerRow!
	end else
		1 BytesPerRow!
	end

	videoquery@ OSVideoQuery_VRAMSize + @ // length
	USERMAP // startva
	0 // sectionoffset
	fbhandle@ // sectionhandle
	OSCURRENTPROCESS // processhandle
	PAGEACCESS_READ PAGEACCESS_WRITE | PAGEACCESS_WRITECOMBINE | // pageprotection
	0 // flags
	OSMapView ret! FBAddress!

	if (ret@)
		ret@ OSStatusGetName "mousedemo: failed to map framebuffer: %s\n" OSAbort
	end

	fbhandle@ OSClose drop

	FBAddress@ YRes@ XRes@ "framebuffer %dx%d mapped at 0x%08x\n" Printf

	auto mouseX
	20 mouseX!

	auto mouseY
	20 mouseY!

	mouseX@ mouseY@ InvertBox

	auto rcur
	1 rcur!

	while (1)
		OSWAIT_TIMEOUTINFINITE // timeout
		0 // flags
		OSMousePacket_SIZEOF // length
		mousepacket@ // buffer
		mousehandle@ // handle
		OSFileRead ret! drop

		if (ret@)
			ret@ OSStatusGetName "mousedemo: couldn't read mouse packet: %s\n" OSError
		end

		auto eventtype
		mousepacket@ OSMousePacket_EventType + @ eventtype!

		if (eventtype@ OSMOUSEEVENT_MOVED ==
			eventtype@ OSMOUSEEVENT_MOVEDABS == ||)
			if (rcur@)
				mouseX@ mouseY@ InvertBox
			end

			auto dx
			mousepacket@ OSMousePacket_Info + @ 16 >> dx!

			auto dy
			mousepacket@ OSMousePacket_Info + @ 0xFFFF & dy!

			if (eventtype@ OSMOUSEEVENT_MOVED ==)
				if (dx@ 0x8000 &)
					0xFFFF0000 dx |=
				end

				if (dy@ 0x8000 &)
					0xFFFF0000 dy |=
				end

				dy@ mouseY +=
				dx@ mouseX +=
			end elseif (eventtype@ OSMOUSEEVENT_MOVEDABS ==)
				dx@ mouseX!
				dy@ mouseY!
			end

			if (mouseX@ z<)
				0 mouseX!
			end elseif (mouseX@ BOXCOLS + XRes@ >=)
				XRes@ BOXCOLS - mouseX!
			end

			if (mouseY@ z<)
				0 mouseY!
			end elseif (mouseY@ BOXROWS + YRes@ >=)
				YRes@ BOXROWS - mouseY!
			end

			mouseX@ mouseY@ InvertBox
		end elseif (eventtype@ OSMOUSEEVENT_PRESSED ==)
			0 rcur!
		end elseif (eventtype@ OSMOUSEEVENT_RELEASED ==)
			1 rcur!
		end
	end
end