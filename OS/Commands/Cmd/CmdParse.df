#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "Cmd.h"

const CMDARGUMENTSMAX 512
table CmdArguments[CMDARGUMENTSMAX]

var CmdLastStatusCode 0
public CmdLastStatusCode

var CmdSyntaxError 0

const ARGSIZE 1024

fn CmdArgumentsCleanup { topindex -- }
	while (topindex@)
		1 topindex -=
		[topindex@]CmdArguments@ OSHeapFree
	end
end

var CmdNewStdInHandle 0
var CmdNewStdOutHandle 0
var CmdNewStdErrHandle 0

fn CmdDoNextStatement { -- done ok }
	auto argindex
	0 argindex!

	auto tokentype

	0 done!
	0 ok!

	auto length

	auto argcn
	0 argcn!

	auto wait
	1 wait!

	OSNONE CmdNewStdInHandle!
	OSNONE CmdNewStdOutHandle!
	OSNONE CmdNewStdErrHandle!

	while (1)
		auto argbuffer
		ARGSIZE OSHeapAllocate ok! argbuffer!

		if (ok@)
			break
		end

		argbuffer@ [argindex@]CmdArguments!
		1 argindex +=

		argbuffer@ // tokenbuf
		ARGSIZE // bufsize
		0 // issyntactic
		CmdGetNextToken ok! tokentype! length!

		if (ok@)
			break
		end

		if (tokentype@ CMDTOKENTYPE_INVALID ==)
			1 CmdSyntaxError!
			2 done!
			break
		end

		auto syntax
		0 syntax!

		if (CmdSyntaxError@ ~~)
			if (tokentype@ CMDTOKENTYPE_STRING ~=)
				0 ok!

				if (argbuffer@ "&" strcmp)
					0 wait!
					break
				end elseif (argbuffer@ "&&" strcmp)
					break
				end elseif (argbuffer@ "<" strcmp)
					1 syntax!

					ACCESS_READ // access
					CmdNewStdInHandle // retptr
					CmdSetStdioForStatement ok! tokentype!
				end elseif (argbuffer@ ">" strcmp)
					1 syntax!

					ACCESS_WRITE // access
					CmdNewStdOutHandle // retptr
					CmdSetStdioForStatement ok! tokentype!
				end elseif (argbuffer@ "2>" strcmp)
					1 syntax!

					ACCESS_WRITE // access
					CmdNewStdErrHandle // retptr
					CmdSetStdioForStatement ok! tokentype!
				end

				if (syntax@)
					argbuffer@ OSHeapFree
					1 argindex -=
				end

				if (tokentype@ CMDTOKENTYPE_INVALID ==)
					1 done!
					break
				end

				if (ok@)
					1 CmdSyntaxError!
					2 done!
					0 ok!
				end
			end

			if (syntax@ ~~)
				1 argcn +=
			end
		end

		if (tokentype@ CMDTOKENTYPE_EOF ==)
			0 CmdSyntaxError!
			1 done!
			break
		end elseif (tokentype@ CMDTOKENTYPE_EOL ==)
			if (CmdSyntaxError@ ~~)
				if (length@ ~~)
					1 argcn -=
				end
			end else
				2 done!
				0 CmdSyntaxError!
			end

			break
		end
	end

	if (ok@ ~~)
		if (done@ ~~)
			if (argcn@)
				auto commandname
				[0]CmdArguments@ commandname!

				if (commandname@ gb)
					auto ran

					CmdArguments // argvt
					argcn@ // argcn
					CmdBuiltinRun ok! ran!

					if (ok@ ~~)
						if (ran@ ~~)
							CmdArguments // argvt
							argcn@ // argcn
							wait@ // wait
							CmdProgramRun ok!
						end
					end
				end
			end
		end
	end

	argindex@ CmdArgumentsCleanup

	if (CmdNewStdInHandle@ OSNONE ~=)
		CmdNewStdInHandle@ OSClose drop
	end

	if (CmdNewStdOutHandle@ OSNONE ~=)
		CmdNewStdOutHandle@ OSClose drop
	end

	if (CmdNewStdErrHandle@ OSNONE ~=)
		CmdNewStdErrHandle@ OSClose drop
	end
end

buffer PathBuffer OSFILEPATHMAX

fn CmdProgramRun { argvt argcn wait -- ok }
	0 ok!

	auto name
	argvt@@ name!

	auto p
	name@ p!

	auto path
	0 path!

	auto hasextension
	0 hasextension!

	while (p@ gb)
		if (p@ gb '/' ==)
			0 hasextension!
			1 path!
			break
		end elseif (p@ gb '.' ==)
			1 hasextension!
		end

		1 p +=
	end

	auto status

	if (path@)
		// run directly

		argvt@ // argvt
		argcn@ // argcn
		name@ // path
		wait@ // wait
		CmdProgramRunPath ok! status!
	end else
		// try all the PATH things

		auto pathvar
		"PATH" OSFindEnvironmentVariable ok! pathvar! drop

		if (ok@)
			STATUS_NOT_FOUND ok!
		end else
			auto pathbuf
			PathBuffer pathbuf!

			auto lenleft
			OSFILEPATHMAX 1 - lenleft!

			while (1)
				if (lenleft@ ~~)
					"cmd: PATH component too long\n" OSGetStdErr FPrintf
					-1 ok!
					break
				end

				if (pathvar@ gb ~~ pathvar@ gb '$' == ||)
					'/' pathbuf@ sb
					1 pathbuf +=
					1 lenleft -=

					auto namelen
					name@ strlen namelen!

					if (namelen@ 4 + lenleft@ >)
						"cmd: PATH component too long when combined with executable name\n" OSGetStdErr FPrintf
						-1 ok!
						break
					end

					pathbuf@ // dest
					name@ // src
					strcpy

					if (hasextension@ ~~)
						pathbuf@ namelen@ + // dest
						".exe" // src
						strcpy
					end

					argvt@ // argvt
					argcn@ // argcn
					PathBuffer // path
					wait@ // wait
					CmdProgramRunPath ok! status!

					if (ok@ ~~)
						break
					end

					if (ok@ STATUS_NOT_FOUND ~=)
						break
					end

					if (pathvar@ gb ~~)
						break
					end

					PathBuffer pathbuf!
					OSFILEPATHMAX lenleft!
				end else
					pathvar@ gb pathbuf@ sb

					1 lenleft -=
					1 pathbuf +=
				end

				1 pathvar +=
			end
		end
	end

	if (wait@)
		status@ CmdLastStatusCode!
	end

	if (ok@)
		if (ok@ STATUS_NOT_FOUND ==)
			// do our own error message
			name@ "couldn't execute %s: command not found\n" OSGetStdErr FPrintf
		end else
			ok@ OSStatusGetName
			name@
			"couldn't execute %s: %s\n" OSGetStdErr FPrintf
		end

		ok@ CmdLastStatusCode!

		0 ok!
	end
end

fn CmdProgramRunPath { argvt argcn path wait -- status ok }
	auto creationparams
	OSCreationParams_SIZEOF alloc creationparams!

	creationparams@ OSCreationBlockInitialize

	if (CmdNewStdInHandle@ OSNONE ~=)
		CmdNewStdInHandle@ creationparams@ OSCreationParams_StdIn + !
	end elseif (CmdSymbolStdInHandle@ OSNONE ~=)
		CmdSymbolStdInHandle@ creationparams@ OSCreationParams_StdIn + !
	end

	if (CmdNewStdOutHandle@ OSNONE ~=)
		CmdNewStdOutHandle@ creationparams@ OSCreationParams_StdOut + !
	end elseif (CmdSymbolStdOutHandle@ OSNONE ~=)
		CmdSymbolStdOutHandle@ creationparams@ OSCreationParams_StdOut + !
	end

	if (CmdNewStdErrHandle@ OSNONE ~=)
		CmdNewStdErrHandle@ creationparams@ OSCreationParams_StdErr + !
	end elseif (CmdSymbolStdErrHandle@ OSNONE ~=)
		CmdSymbolStdErrHandle@ creationparams@ OSCreationParams_StdErr + !
	end

	auto threadhandle
	auto processhandle

	argcn@ 1 - // argcn
	argvt@ 4 + // argvt
	path@ // path
	0 // creationflags
	creationparams@ // creationparams
	ACCESS_OWNER_ALL // permissions
	path@ OSLastComponent // name
	OSSpawnV ok! processhandle! threadhandle!

	if (ok@)
		return
	end

	threadhandle@ OSClose drop

	if (wait@)
		0 // alertable
		OSWAIT_TIMEOUTINFINITE // timeout
		processhandle@ // objecthandle
		OSWaitForObject ok!

		if (ok@)
			processhandle@ OSClose drop
			return
		end

		processhandle@ // processhandle
		OSProcessReadStatus ok! status!
	end

	processhandle@ OSClose drop
end

fn CmdSetStdioForStatement { access retptr -- tokentype ok }
	auto path
	OSFILEPATHMAX alloc path!

	auto length

	path@ // tokenbuf
	OSFILEPATHMAX // bufsize
	1 // issyntactic
	CmdGetNextToken ok! tokentype! length!

	if (ok@)
		return
	end

	if (tokentype@ CMDTOKENTYPE_INVALID ==)
		return
	end

	path@ // path
	access@ // access
	retptr@ // retptr
	CmdSymbolSetStdIOHandle ok!
end