#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<ll>/OSDLL/OSCrypt.h"

fn Usage { -- }
	"usage: date [-dtz [DD-MMM-YYYY] [HH:MM[:SS]] [timezone]]\n" OSGetStdErr FPrintf
end

fn PrintDateTime { -- }
	auto sec
	auto ms

	OSQueryTime ms! sec!

	auto ostime
	OSTime_SIZEOF alloc ostime!

	ostime@ // ostime
	ms@ // ms
	sec@ // sec
	OSTimeLocalGet

	ostime@ OSDatePrint
end

fn Main { ... -- ret }
	0 ret!

	if (argc@ 2 <)
		PrintDateTime
		return
	end

	auto setdate
	0 setdate!

	auto settime
	0 settime!

	auto settimezone
	0 settimezone!

	auto sw
	[1]argv@ sw!

	if (sw@ gb '-' ~=)
		Usage
		-1 OSExit
	end

	auto expected
	2 expected!

	1 sw +=

	while (sw@ gb)
		if (sw@ gb 'd' ==)
			if (setdate@ ~~)
				1 expected +=
				1 setdate!
			end
		end elseif (sw@ gb 't' ==)
			if (settime@ ~~)
				1 expected +=
				1 settime!
			end
		end elseif (sw@ gb 'z' ==)
			if (settimezone@ ~~)
				1 expected +=
				1 settimezone!
			end
		end else
			Usage
			-1 OSExit
		end

		1 sw +=
	end

	if (argc@ expected@ >)
		Usage
		-1 OSExit
	end

	auto cur
	2 cur!

	auto argsz
	3 argsz!

	auto newdate
	auto newtime
	auto newtimezone

	if (setdate@)
		if (argc@ argsz@ >=)
			[cur@]argv@ newdate!
			1 cur +=
			1 argsz +=
		end else
			128 alloc newdate!
			newdate@ PromptDate
		end

		0 // actuallyset
		newdate@ // buf
		SetDate
	end

	if (settime@)
		if (argc@ argsz@ >=)
			[cur@]argv@ newtime!
			1 cur +=
			1 argsz +=
		end else
			128 alloc newtime!
			newtime@ PromptTime
		end

		0 // actuallyset
		newtime@ // buf
		SetTime
	end

	if (settimezone@)
		if (argc@ argsz@ >=)
			[cur@]argv@ newtimezone!
			1 cur +=
			1 argsz +=
		end else
			128 alloc newtimezone!
			newtimezone@ PromptTimezone
		end

		0 // actuallyset
		newtimezone@ // buf
		SetTimezone
	end

	if (settimezone@)
		// set timezone first so that the given date and time are applied
		// correctly.

		1 // actuallyset
		newtimezone@ // buf
		SetTimezone
	end

	if (setdate@)
		1 // actuallyset
		newdate@ // buf
		SetDate
	end

	if (settime@)
		1 // actuallyset
		newtime@ // buf
		SetTime
	end
end

fn PromptDate { buf -- }
	"Enter date (DD-MMM-YYYY): " Printf

	buf@ // s
	127 // max
	Gets
end

fn PromptTime { buf -- }
	"Enter time (HH:MM): " Printf

	buf@ // s
	127 // max
	Gets
end

fn PromptTimezone { buf -- }
	"Enter timezone: " Printf

	buf@ // s
	127 // max
	Gets
end

fn SetDate { actuallyset buf -- }
	auto dd
	4 alloc dd!

	auto mmm
	4 alloc mmm!

	auto yyyy
	8 alloc yyyy!

	auto dest
	auto ptr
	auto len

	dd@ dest!
	buf@ ptr!
	0 len!

	while (ptr@ gb)
		if (ptr@ gb '-' ==)
			1 ptr +=
			break
		end

		if (len@ 2 >=)
			Usage
			-1 OSExit
		end

		ptr@ gb dest@ sb

		1 dest +=
		1 len +=
		1 ptr +=
	end

	0 dest@ sb

	if (len@ 2 ~=)
		Usage
		-1 OSExit
	end

	mmm@ dest!
	0 len!

	while (ptr@ gb)
		if (ptr@ gb '-' ==)
			1 ptr +=
			break
		end

		if (len@ 3 >=)
			Usage
			-1 OSExit
		end

		ptr@ gb dest@ sb

		1 dest +=
		1 len +=
		1 ptr +=
	end

	0 dest@ sb

	if (len@ 3 ~=)
		Usage
		-1 OSExit
	end

	yyyy@ dest!
	0 len!

	while (ptr@ gb)
		if (len@ 4 >=)
			Usage
			-1 OSExit
		end

		ptr@ gb dest@ sb

		1 dest +=
		1 len +=
		1 ptr +=
	end

	0 dest@ sb

	if (len@ 4 ~=)
		Usage
		-1 OSExit
	end

	while (yyyy@ gb '0' ==)
		1 yyyy +=
	end

	yyyy@ atoi yyyy!

	if (yyyy@ 1970 <)
		Usage
		-1 OSExit
	end

	while (dd@ gb '0' ==)
		1 dd +=
	end

	dd@ atoi dd!

	if (dd@ ~~)
		Usage
		-1 OSExit
	end

	mmm@ OSMonthNameToIndex mmm!

	if (mmm@ -1 ==)
		Usage
		-1 OSExit
	end

	if (actuallyset@)
		auto ostime
		OSTime_SIZEOF alloc ostime!

		auto ms
		auto sec

		OSQueryTime ms! sec!

		ostime@ // ostime
		ms@ // ms
		sec@ // sec
		OSTimeLocalGet

		yyyy@ ostime@ OSTime_Year + !
		mmm@ ostime@ OSTime_Month + !
		dd@ ostime@ OSTime_DayOfMonth + !

		ostime@ OSLocalTimeToTimestamp ms! sec!

		auto ok
		sec@ // sec
		ms@ // ms
		OSTimeSet ok!

		if (ok@)
			ok@ OSStatusGetName "failed to set time: %s\n" OSError
		end
	end
end

fn SetTime { actuallyset buf -- }
	auto hh
	4 alloc hh!

	auto mm
	4 alloc mm!

	auto ss
	4 alloc ss!

	auto dest
	auto ptr
	auto len

	hh@ dest!
	buf@ ptr!
	0 len!

	while (ptr@ gb)
		if (ptr@ gb ':' ==)
			1 ptr +=
			break
		end

		if (len@ 2 >=)
			Usage
			-1 OSExit
		end

		ptr@ gb dest@ sb

		1 dest +=
		1 len +=
		1 ptr +=
	end

	0 dest@ sb

	if (len@ 2 ~=)
		Usage
		-1 OSExit
	end

	mm@ dest!
	0 len!

	auto hassec
	0 hassec!

	while (ptr@ gb)
		if (ptr@ gb ':' ==)
			1 hassec!
			1 ptr +=
			break
		end

		if (len@ 2 >=)
			Usage
			-1 OSExit
		end

		ptr@ gb dest@ sb

		1 dest +=
		1 len +=
		1 ptr +=
	end

	0 dest@ sb

	if (len@ 2 ~=)
		Usage
		-1 OSExit
	end

	ss@ dest!
	0 len!

	while (ptr@ gb)
		if (len@ 2 >=)
			Usage
			-1 OSExit
		end

		ptr@ gb dest@ sb

		1 dest +=
		1 len +=
		1 ptr +=
	end

	0 dest@ sb

	if (hassec@)
		if (len@ 2 ~=)
			Usage
			-1 OSExit
		end
	end

	while (hh@ gb '0' ==)
		1 hh +=
	end

	while (mm@ gb '0' ==)
		1 mm +=
	end

	while (ss@ gb '0' ==)
		1 ss +=
	end

	hh@ atoi hh!
	mm@ atoi mm!
	ss@ atoi ss!

	if (hh@ 24 >=)
		Usage
		-1 OSExit
	end

	if (mm@ 60 >=)
		Usage
		-1 OSExit
	end

	if (ss@ 60 >=)
		Usage
		-1 OSExit
	end

	if (actuallyset@)
		auto ostime
		OSTime_SIZEOF alloc ostime!

		auto ms
		auto sec

		OSQueryTime ms! sec!

		ostime@ // ostime
		ms@ // ms
		sec@ // sec
		OSTimeLocalGet

		hh@ ostime@ OSTime_Hour + !
		mm@ ostime@ OSTime_Minute + !

		if (hassec@)
			ss@ ostime@ OSTime_Second + !
		end

		ostime@ OSLocalTimeToTimestamp ms! sec!

		auto ok
		sec@ // sec
		ms@ // ms
		OSTimeSet ok!

		if (ok@)
			ok@ OSStatusGetName "failed to set time: %s\n" OSError
		end
	end
end

fn ToUpper { str -- }
	while (str@ gb)
		if (str@ gb 'a' >= str@ gb 'z' <= &&)
			str@ gb 32 - str@ sb
		end

		1 str +=
	end
end

fn SetTimezone { actuallyset buf -- }
	buf@ ToUpper

	auto ok
	auto offset

	buf@ OSTimeZoneNameToOffset ok! offset!

	if (ok@)
		Usage
		-1 OSExit
	end

	offset@ OSTimeZoneSet ok! drop

	if (ok@)
		ok@ OSStatusGetName "failed to set timezone offset: %s\n" OSError
	end

	auto handle
	OSDEFAULTFILEPERMISSIONS // permissions
	0 // flags
	ACCESS_READ ACCESS_WRITE | // access
	"/mintia/time.txt"
	OSFileCreate ok! handle!

	if (ok@)
		ok@ OSStatusGetName "failed to open /mintia/time.txt: %s\n" OSError

		return
	end

	0 // newsize
	0 // growing
	handle@ // handle
	OSFileTruncate drop drop

	0 // flags
	buf@ strlen // length
	buf@ // buffer
	handle@ // filehandle
	OSFileWrite ok! drop

	if (ok@)
		ok@ OSStatusGetName "failed to write to /mintia/time.txt: %s\n" OSError

		return
	end

	0 // flags
	1 // length
	"\n" // buffer
	handle@ // filehandle
	OSFileWrite drop drop

	handle@ OSClose drop
end