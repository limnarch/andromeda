//
// Implements bootloader symbol table traversal.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALConsole.h"
#include "<inc>/HALLog.h"

#include "../OSLoader/OSLoaderGlobal.h"
#include "../OSLoader/LOFF.h"

externptr HALLoaderInfo

fn DebugGetSymbolByAddress { address dll -- symbase symname symbol ok }
	auto head
	dll@ LdrModule_HeadVAddr + @ head!

	auto sectionheader
	head@ LOFFHeader_TextHeader + @ head@ + sectionheader!

	-1 ok!

	0 symbol!

	if (address@ sectionheader@ LOFFSectionHeader_LinkedAddress + @ <)
		return
	end

	if (address@ sectionheader@ LOFFSectionHeader_LinkedAddress + @
		sectionheader@ LOFFSectionHeader_SectionSize + @ + >=)
		return
	end

	auto symptr
	head@ LOFFHeader_SymbolTableOffset + @ head@ + symptr!

	auto strtab
	head@ LOFFHeader_StringTableOffset + @ head@ + strtab!

	auto i
	0 i!

	auto count
	head@ LOFFHeader_SymbolCount + @ count!

	while (i@ count@ <)
		if (symptr@ LOFFSymbol_Type + @ LOFFGLOBAL == symptr@ LOFFSymbol_Section + @ LOFFTEXT == &&)
			auto sbase
			symptr@ LOFFSymbol_Value + @ sectionheader@ LOFFSectionHeader_LinkedAddress + @ + sbase!

			if (address@ sbase@ >=)
				if (symptr@ LOFFSymbol_NameOffset + @ 0xFFFFFFFF ==)
					0 symname!
				end else
					symptr@ LOFFSymbol_NameOffset + @ strtab@ + symname!
				end

				symptr@ symbol!
				sbase@ symbase!
			end elseif (address@ sbase@ <)
				if (symbol@)
					0 ok!
				end

				return
			end
		end

		LOFFSymbol_SIZEOF symptr +=
		1 i +=
	end

	if (symbol@)
		0 ok!
	end
end

fn DebugGetSymbol { name dll -- symbol ok }
	auto head
	dll@ LdrModule_HeadVAddr + @ head!

	head@ LOFFHeader_SymbolTableOffset + @ head@ + symbol!

	auto i
	0 i!

	auto count
	head@ LOFFHeader_SymbolCount + @ count!

	auto strtab
	head@ LOFFHeader_StringTableOffset + @ head@ + strtab!

	-1 ok!

	while (i@ count@ <)
		if (symbol@ LOFFSymbol_Type + @ LOFFGLOBAL ==)
			auto sname
			symbol@ LOFFSymbol_NameOffset + @ strtab@ + sname!

			if (sname@ name@ strcmp)
				0 ok!

				return
			end
		end

		LOFFSymbol_SIZEOF symbol +=
		1 i +=
	end
end

fn DebugGetSymbolAddress { name dll -- address ok }
	auto symbol
	name@ dll@ DebugGetSymbol ok! symbol!

	if (ok@)
		return
	end

	auto head
	dll@ LdrModule_HeadVAddr + @ head!

	auto sectionheader

	if (symbol@ LOFFSymbol_Section + @ LOFFTEXT ==)
		head@ LOFFHeader_TextHeader + @ head@ + sectionheader!
	end elseif (symbol@ LOFFSymbol_Section + @ LOFFDATA ==)
		head@ LOFFHeader_DataHeader + @ head@ + sectionheader!
	end elseif (symbol@ LOFFSymbol_Section + @ LOFFBSS ==)
		head@ LOFFHeader_BSSHeader + @ head@ + sectionheader!
	end else
		-1 ok!

		return
	end

	symbol@ LOFFSymbol_Value + @ address!

	sectionheader@ LOFFSectionHeader_LinkedAddress + @ address +=
end

fn DebugGetSymDLL { address -- dll symbase symname symbol ok }
	HALLoaderInfo@ LdrInfo_DLLListHead + @ dll!

	-1 ok!

	while (dll@)
		address@ // address
		dll@ // dll
		DebugGetSymbolByAddress ok! symbol! symname! symbase!

		if (ok@ ~~)
			return
		end

		dll@ LdrModule_Next + @ dll!
	end
end

fn DebugGetDLL { name -- dll }
	HALLoaderInfo@ LdrInfo_DLLListHead + @ dll!

	while (dll@)
		if (dll@ LdrModule_Name + name@ strcmp)
			return
		end

		dll@ LdrModule_Next + @ dll!
	end
end