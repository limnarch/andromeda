//
// Implements the DKS disk driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALLIMNstationCitron.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

const DKSBLOCKSHIFT 9
const DKSBLOCKSIZE (1 DKSBLOCKSHIFT <<)
const DKSBLOCKOFFMASK (DKSBLOCKSIZE 1 -)

const DKS_REALDISK  1
const DKS_PARTITION 2

const DKSBUFFERPHYS 0xF8020000

var DKSBuffer 0

struct Disk
	4 Type
	4 DKSID
	4 BlockOffset
	4 Blocks
endstruct

const REQREAD  1
const REQWRITE 2

struct DKSRequest
	4 Next

	4 Type
	4 Buffer
	4 BlockNumber
	4 BlockCount
	4 WakeEvent
	4 Disk
endstruct

var DKSRequestListHead 0
var DKSRequestListTail 0

const DKSMAXDISKID 7

const DKSPORTCMD 0x19
const DKSPORTA   0x1A
const DKSPORTB   0x1B

const DKSCMDSELECT  0x1
const DKSCMDREAD    0x2
const DKSCMDWRITE   0x3
const DKSCMDINFO    0x4
const DKSCMDPOLL    0x5
const DKSCMDINTR    0x6
const DKSCMDINTROFF 0x7

const DKSINTERRUPT  0x3

const DKSBLOCKTRANSFER 0x0

table DriverDKSDispatch
	0                                    // open
	0                                    // close
	pointerof DriverDKSIOControl         // iocontrol
	pointerof DriverDKSRead              // read
	pointerof DriverDKSWrite             // write
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	pointerof DriverDKSReadBlock         // readblock
	pointerof DriverDKSWriteBlock        // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

table DriverDKS
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"dks"                                // name
	OSFILETYPE_BLOCKDEVICE               // type
	pointerof DriverDKSDispatch          // dispatch table
	Disk_SIZEOF                          // extension size

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

buffer DKSDPC KeDPC_SIZEOF

fn private CreateDisk { name blocks type id offset -- dev }
	auto sizeinbytes
	blocks@ 512 * sizeinbytes!

	auto ok
	name@ // name
	sizeinbytes@ // sizeinbytes
	DriverDKS // driver
	ACCESS_OWNER_READ ACCESS_OWNER_WRITE | ACCESS_GROUP_READ | ACCESS_GROUP_WRITE | // permissions
	IODeviceCreate ok! dev!

	if (ok@)
		ok@ "DKSDriverInit: failed to create device object (%i)\n" KeCrash
	end

	9 dev@ IODeviceSetBlockLog // 1<<9 = 512

	auto disk
	dev@ IODeviceGetExtension disk!

	type@ disk@ Disk_Type + !
	id@ disk@ Disk_DKSID + !
	offset@ disk@ Disk_BlockOffset + !
	blocks@ disk@ Disk_Blocks + !
end

fn (FDriverInit) DriverInit { stage -- ok }
	if (stage@ STAGE_THREAD ==)
		0 // cached
		512 // length
		DKSBUFFERPHYS // phyaddr
		MmIORegionMap ok! DKSBuffer!

		if (ok@)
			"DKSDriverInit: failed to map buffer (%i)\n" KeCrash
		end

		pointerof DriverDKSDPCFunction // function
		DKSDPC // dpc
		KeDPCInitialize

		// detect and register disks

		auto diskid
		0 diskid!

		auto namebuf
		64 alloc namebuf!

		namebuf@ // dest
		"dks" // src
		strcpy

		pointerof DriverDKSInterrupt // function
		DKSINTERRUPT // interrupt number
		IPLDISK // interrupt priority level
		HALInterruptRegister

		DKSCMDINTR DKSPORTCMD HALLIMNstationCitronCommand

		auto dev

		while (diskid@ DKSMAXDISKID <=)
			auto present
			auto blocks

			diskid@ DKSPORTA HALLIMNstationCitronOutl

			DKSCMDPOLL DKSPORTCMD HALLIMNstationCitronCommand

			DKSPORTA HALLIMNstationCitronInl present!
			DKSPORTB HALLIMNstationCitronInl blocks!

			if (present@ 1 & ~~)
				1 diskid +=
				continue
			end

			if (blocks@ 1048576 >=)
				namebuf@
				"%s: disk is >=4GB; this is not supported! skipping.\n" "DKSDriverInit" HALLog

				1 diskid +=
				continue
			end

			// we have a disk at this ID

			diskid@ // n
			namebuf@ 3 + // buf
			itoa

			blocks@ namebuf@ diskid@ "ID %d: NAME=%s BLOCKSZ=512 BLOCKS=%d\n" "DKSDriverInit" HALLog

			auto sizeinbytes
			blocks@ 512 * sizeinbytes!

			namebuf@ // name
			blocks@ // blocks
			DKS_REALDISK // type
			diskid@ // id
			0 // offset
			CreateDisk dev!

			auto partitiontable
			dev@ IOPartitionTableRead ok! partitiontable!

			if (ok@ 0 ==)
				auto pcount
				partitiontable@ IOPartitionTable_PartitionCount + @ pcount!

				auto pte
				partitiontable@ IOPartitionTable_SIZEOF + pte!

				namebuf@ 4 + // dest
				"s" // src
				strcpy

				while (pcount@)
					pte@ IOPartitionEntry_ID + @ // n
					namebuf@ 5 + // buf
					itoa

					pte@ IOPartitionEntry_SizeInBlocks + @ blocks!

					namebuf@ // name
					blocks@ // blocks
					DKS_PARTITION // type
					diskid@ // id
					pte@ IOPartitionEntry_BlockOffset + @ // offset
					CreateDisk dev!

					IOPartitionEntry_SIZEOF pte +=
					1 pcount -=
				end

				partitiontable@ MmFree
			end

			1 diskid +=
		end
	end

	0 ok!
end

fn (DPCFunction) DriverDKSDPCFunction { context1 context2 -- }
	// fulfill pending request

	auto ior
	DKSRequestListHead@ ior!

	if (DEBUGCHECKS)
		if (ior@ ~~)
			"DriverDKSDPCFunction: no request\n" KeCrash
		end
	end

	if (ior@ DKSRequest_Type + @ REQREAD ==)
		ior@ DKSRequest_Buffer + @ // dest
		DKSBuffer@ // src
		DKSBLOCKSIZE // size
		memcpy
	end

	1 ior@ DKSRequest_BlockCount + -=
	1 ior@ DKSRequest_BlockNumber + +=
	DKSBLOCKSIZE ior@ DKSRequest_Buffer + +=

	if (ior@ DKSRequest_BlockCount + @ ~~)
		// complete, start next one

		IOBOOSTDISK // priboost
		ior@ DKSRequest_WakeEvent + @ // event
		KeEventSignal

		ior@ DKSRequest_Next + @ ior!
		ior@ DKSRequestListHead!

		if (ior@ ~~)
			0 DKSRequestListTail!
			return
		end
	end

	auto rs

	auto disk
	ior@ DKSRequest_Disk + @ disk!

	// start next one

	if (ior@ DKSRequest_Type + @ REQREAD ==)
		HALCPUInterruptDisable rs!

		disk@ Disk_DKSID + @ DKSPORTA HALLIMNstationCitronOutl
		DKSCMDSELECT DKSPORTCMD HALLIMNstationCitronCommand

		ior@ DKSRequest_BlockNumber + @ disk@ Disk_BlockOffset + @ + DKSPORTA HALLIMNstationCitronOutl
		DKSCMDREAD DKSPORTCMD HALLIMNstationCitronCommandASync

		rs@ HALCPUInterruptRestore

		return
	end else
		DKSBuffer@ // dest
		ior@ DKSRequest_Buffer + @ // src
		DKSBLOCKSIZE // size
		memcpy

		HALCPUInterruptDisable rs!

		disk@ Disk_DKSID + @ DKSPORTA HALLIMNstationCitronOutl
		DKSCMDSELECT DKSPORTCMD HALLIMNstationCitronCommand

		ior@ DKSRequest_BlockNumber + @ disk@ Disk_BlockOffset + @ + DKSPORTA HALLIMNstationCitronOutl
		DKSCMDWRITE DKSPORTCMD HALLIMNstationCitronCommandASync

		rs@ HALCPUInterruptRestore

		return
	end
end

fn (HALInterruptHandler) DriverDKSInterrupt { int -- }
	auto event
	auto details

	DKSCMDINFO DKSPORTCMD HALLIMNstationCitronCommand
	DKSPORTA HALLIMNstationCitronInl event!
	DKSPORTB HALLIMNstationCitronInl details!

	if (event@ DKSBLOCKTRANSFER ==)
		auto dpc
		DKSDPC dpc!

		if (DEBUGCHECKS)
			if (dpc@ KeDPC_Enqueued + @)
				"DriverDKSInterrupt: DPC was enqueued?\n" KeCrash
			end
		end

		// defer doing fun work til later,
		// otherwise we will BSOD since we're at IPLDISK

		0 // context1
		0 // context2
		DPCLOWIMPORTANCE // importance
		dpc@ // dpc
		KeDPCEnqueue
	end
end

fn DKSBlockReadCommand { buf blocks blockno disk event ior -- ok }
	0 ok!

	REQREAD ior@ DKSRequest_Type + !
	buf@ ior@ DKSRequest_Buffer + !
	blockno@ ior@ DKSRequest_BlockNumber + !
	blocks@ ior@ DKSRequest_BlockCount + !
	disk@ ior@ DKSRequest_Disk + !
	0 ior@ DKSRequest_Next + !
	event@ ior@ DKSRequest_WakeEvent + !

	auto rs
	HALCPUInterruptDisable rs!

	auto t
	DKSRequestListTail@ t!

	if (t@ ~~)
		ior@ DKSRequestListHead!
		ior@ DKSRequestListTail!

		// no pending requests, start the disk

		disk@ Disk_DKSID + @ DKSPORTA HALLIMNstationCitronOutl
		DKSCMDSELECT DKSPORTCMD HALLIMNstationCitronCommand

		blockno@ disk@ Disk_BlockOffset + @ + DKSPORTA HALLIMNstationCitronOutl
		DKSCMDREAD DKSPORTCMD HALLIMNstationCitronCommandASync
	end else
		ior@ t@ DKSRequest_Next + !
		ior@ DKSRequestListTail!
	end

	rs@ HALCPUInterruptRestore
end

fn DKSBlockWriteCommand { buf blocks blockno disk event ior -- ok }
	0 ok!

	REQWRITE ior@ DKSRequest_Type + !
	buf@ ior@ DKSRequest_Buffer + !
	blockno@ ior@ DKSRequest_BlockNumber + !
	blocks@ ior@ DKSRequest_BlockCount + !
	disk@ ior@ DKSRequest_Disk + !
	0 ior@ DKSRequest_Next + !
	event@ ior@ DKSRequest_WakeEvent + !

	auto rs
	HALCPUInterruptDisable rs!

	auto t
	DKSRequestListTail@ t!

	if (t@ ~~)
		ior@ DKSRequestListHead!
		ior@ DKSRequestListTail!

		rs@ HALCPUInterruptRestore

		// no pending requests, start the disk

		DKSBuffer@ // dest
		buf@ // src
		DKSBLOCKSIZE // len
		memcpy

		HALCPUInterruptDisable rs!

		disk@ Disk_DKSID + @ DKSPORTA HALLIMNstationCitronOutl
		DKSCMDSELECT DKSPORTCMD HALLIMNstationCitronCommand

		blockno@ disk@ Disk_BlockOffset + @ + DKSPORTA HALLIMNstationCitronOutl
		DKSCMDWRITE DKSPORTCMD HALLIMNstationCitronCommandASync

		rs@ HALCPUInterruptRestore
	end else
		ior@ t@ DKSRequest_Next + !
		ior@ DKSRequestListTail!

		rs@ HALCPUInterruptRestore
	end
end

fn (IODispatchIOControlFunction) DriverDKSIOControl { arg2 arg1 access fcb lastmode -- ret ok }
	0 ok!
end

// routines for I/O by byte offset.
// these are called when the device object is opened directly, either cached
// (in which case the caller is the page cache) or uncached.

// if caller isn't careful these can lead to some redundant reads and writes.
// which are slow.

fn (IODispatchReadFunction) DriverDKSRead { timeout flags kflags offset mdl fcb -- bytesread ok }
	auto devobj
	fcb@ IOFileControlBlockGetDeviceObject devobj!

	auto disk
	devobj@ IODeviceGetExtension disk!

	0 ok!

	fcb@ IOFileControlBlockGetSize bytesread!

	if (offset@ bytesread@ >=)
		0 bytesread!
		return
	end

	auto length
	bytesread@ offset@ -
	mdl@ MmMDLHeader_Length + @
	min length!

	if (length@ DKSBLOCKOFFMASK &)
		STATUS_UNALIGNED ok!
		return
	end

	0 bytesread!

	1 // lockforwrite
	mdl@ // mdl
	MmMDLPin ok!

	if (ok@)
		return
	end

	mdl@ MmMDLMap ok!

	if (ok@)
		mdl@ MmMDLUnpin
		return
	end

	auto event
	KeEvent_SIZEOF alloc event!

	0 // signaled
	OSEVENT_SYNCH // type
	"DKSReadEvent" // name
	event@ // event
	KeEventInitialize

	auto ior
	DKSRequest_SIZEOF alloc ior!

	mdl@ MmMDLHeader_MappedAddress + @ // buf
	length@ DKSBLOCKSHIFT >> // blocks
	offset@ DKSBLOCKSHIFT >> // blockno
	disk@ // disk
	event@ // event
	ior@ // ior
	DKSBlockReadCommand ok!

	if (ok@)
		mdl@ MmMDLUnmap
		mdl@ MmMDLUnpin

		return
	end

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	event@ // object
	KeThreadWaitForObject ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "DriverDKSRead: couldn't wait on event (%i)\n" KeCrash
		end
	end

	mdl@ MmMDLUnmap
	mdl@ MmMDLUnpin

	mdl@ MmMDLHeader_Length + @ bytesread!
end

fn (IODispatchWriteFunction) DriverDKSWrite { flags kflags offset mdl fcb -- byteswritten ok }
	auto disk
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension disk!

	0 ok!

	0 byteswritten!

	auto bytesize
	fcb@ IOFileControlBlockGetSize bytesize!

	if (offset@ bytesize@ >=)
		STATUS_END_OF_DISK ok!

		return
	end

	auto length
	bytesize@ offset@ -
	mdl@ MmMDLHeader_Length + @
	min length!

	if (length@ DKSBLOCKOFFMASK &)
		STATUS_UNALIGNED ok!
		return
	end

	0 // lockforwrite
	mdl@ // mdl
	MmMDLPin ok!

	if (ok@)
		return
	end

	mdl@ MmMDLMap ok!

	if (ok@)
		mdl@ MmMDLUnpin
		return
	end

	auto event
	KeEvent_SIZEOF alloc event!

	0 // signaled
	OSEVENT_SYNCH // type
	"DKSWriteEvent" // name
	event@ // event
	KeEventInitialize

	auto ior
	DKSRequest_SIZEOF alloc ior!

	mdl@ MmMDLHeader_MappedAddress + @ // buf
	length@ DKSBLOCKSHIFT >> // blocks
	offset@ DKSBLOCKSHIFT >> // blockno
	disk@ // disk
	event@ // event
	ior@ // ior
	DKSBlockWriteCommand ok!

	if (ok@)
		mdl@ MmMDLUnmap
		mdl@ MmMDLUnpin

		return
	end

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	event@ // object
	KeThreadWaitForObject ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "DriverDKSWrite: couldn't wait on event (%i)\n" KeCrash
		end
	end

	mdl@ MmMDLUnmap
	mdl@ MmMDLUnpin

	mdl@ MmMDLHeader_Length + @ byteswritten!
end

// routines for I/O by block offset, by device object. rarely called.
// used in some boot situations where acquiring an FCB would be irritating.

fn (IODispatchWriteBlockFunction) DriverDKSWriteBlock { blockno buffer devobject -- ok }
	// write by block

	auto disk
	devobject@ IODeviceGetExtension disk!

	if (blockno@ disk@ Disk_Blocks + @ >=)
		STATUS_END_OF_DISK ok!

		return
	end

	auto event
	KeEvent_SIZEOF alloc event!

	0 // signaled
	OSEVENT_SYNCH // type
	"DKSWriteBlockEvent" // name
	event@ // event
	KeEventInitialize

	auto ior
	DKSRequest_SIZEOF alloc ior!

	buffer@ // buf
	1 // blocks
	blockno@ // blockno
	disk@ // disk
	event@ // event
	ior@ // ior
	DKSBlockWriteCommand ok!

	if (ok@)
		return
	end

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	event@ // object
	KeThreadWaitForObject ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "DriverDKSWriteBlock: couldn't wait on event (%i)\n" KeCrash
		end
	end
end

fn (IODispatchReadBlockFunction) DriverDKSReadBlock { blockno buffer devobject -- ok }
	// read by block

	auto disk
	devobject@ IODeviceGetExtension disk!

	if (blockno@ disk@ Disk_Blocks + @ >=)
		STATUS_END_OF_DISK ok!

		return
	end

	auto event
	KeEvent_SIZEOF alloc event!

	0 // signaled
	OSEVENT_SYNCH // type
	"DKSReadBlockEvent" // name
	event@ // event
	KeEventInitialize

	auto ior
	DKSRequest_SIZEOF alloc ior!

	buffer@ // buf
	1 // blocks
	blockno@ // blockno
	disk@ // disk
	event@ // event
	ior@ // ior
	DKSBlockReadCommand ok!

	if (ok@)
		return
	end

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	event@ // object
	KeThreadWaitForObject ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "DriverDKSReadBlock: couldn't wait on event (%i)\n" KeCrash
		end
	end
end