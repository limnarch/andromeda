//
// Implements the LIMNstation serial port driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALLIMNstationCitron.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<inc>/Console.h"

struct SerialPort
	4 PortCMD
	4 PortData
	KeDPC_SIZEOF DPC
endstruct

table DriverSerialDispatch
	0                                    // open
	0                                    // close
	0                                    // iocontrol
	0                                    // read
	0                                    // write
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reclaim fcb
	0                                    // cancel request
	0                                    // reserved
	0                                    // reserved
endtable

table DriverSerial
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"serial"                             // name
	OSFILETYPE_CHARDEVICE                // type
	pointerof DriverSerialDispatch       // dispatch table
	SerialPort_SIZEOF                    // extension size

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

const SERIALA_PORTCMD   0x10
const SERIALA_PORTDATA  0x11
const SERIALA_INTERRUPT 4

const SERIALB_PORTCMD   0x12
const SERIALB_PORTDATA  0x13
const SERIALB_INTERRUPT 5

var SerialPortA 0
var SerialPortB 0

const SERIALCMDWRITE   1
const SERIALCMDREAD    2
const SERIALCMDINTR    3
const SERIALCMDINTROFF 4

fn SerialCreate { name intn cmdport dataport -- deviceobject }
	fnsection "INIT$text"

	auto ok

	name@ // name
	0 // sizeinbytes
	DriverSerial // driver
	ACCESS_OWNER_READ ACCESS_GROUP_READ | ACCESS_OWNER_WRITE | ACCESS_GROUP_WRITE | // permissions
	IODeviceCreate ok! deviceobject!

	if (ok@)
		ok@ name@ "SerialCreate: failed to create %s (%i)\n" KeCrash
	end

	auto serialport
	deviceobject@ IODeviceGetExtension serialport!

	cmdport@  serialport@ SerialPort_PortCMD + !
	dataport@ serialport@ SerialPort_PortData + !

	0 // function
	serialport@ SerialPort_DPC + // dpc
	KeDPCInitialize
end

fn (FDriverInit) DriverInit { stage -- ok }
	fnsection "INIT$text"

	if (stage@ STAGE_THREAD ==)
		auto deviceobject

		"ttyS0" // name
		SERIALA_INTERRUPT // intn
		SERIALA_PORTCMD // cmdport
		SERIALA_PORTDATA // dataport
		SerialCreate deviceobject!

		deviceobject@ IODeviceGetExtension SerialPortA!

		"ttyS1" // name
		SERIALB_INTERRUPT // intn
		SERIALB_PORTCMD // cmdport
		SERIALB_PORTDATA // dataport
		SerialCreate deviceobject!

		deviceobject@ IODeviceGetExtension SerialPortB!

		// register interrupts and start interrupting

		pointerof DriverSerialInterrupt // function
		SERIALA_INTERRUPT // interrupt number
		IPLSERIAL // interrupt priority level
		HALInterruptRegister

		pointerof DriverSerialInterrupt // function
		SERIALB_INTERRUPT // interrupt number
		IPLSERIAL // interrupt priority level
		HALInterruptRegister

		SERIALCMDINTR SERIALA_PORTCMD HALLIMNstationCitronCommand
		SERIALCMDINTR SERIALB_PORTCMD HALLIMNstationCitronCommand
	end

	0 ok!
end

fn (HALInterruptHandler) DriverSerialInterrupt { trapframe int -- }
	auto serialport

	if (int@ SERIALA_INTERRUPT ==)
		SerialPortA@ serialport!
	end elseif (int@ SERIALB_INTERRUPT ==)
		SerialPortB@ serialport!
	end else
		int@ "DriverSerialInterrupt: weird interrupt number %d\n" KeCrash
	end

#ifdef 0
	auto dpc
	serialport@ SerialPort_DPC + dpc!

	if (dpc@ KeDPC_Enqueued + @ ~~)
		serialport@ SerialPort_Header + // context1
		0 // context2
		DPCHIGHIMPORTANCE // importance
		dpc@ // dpc
		KeDPCEnqueue
	end
#endif
end