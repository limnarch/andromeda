//
// Implements the LIMNstation serial port driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALLIMNstationCitron.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<inc>/Console.h"

struct SerialPort
	4 PortCMD
	4 PortData
	KeDPC_SIZEOF DPC

	4 RequestListHead
	4 RequestListTail

	IOTypeaheadBufferHeader_SIZEOF ReceiveBuffer
endstruct

// must be <=32 bytes to fit in the MDL DriverGoWild area
struct SerialRequest
	4 Next
	4 Prev

	4 Flags
	4 MDL
	4 Buffer
	4 Length
	4 SerialPort
	4 LengthDone
endstruct

const REQFLAG_WRITE     2

table DriverSerialDispatch
	0                                    // open
	0                                    // close
	0                                    // iocontrol
	pointerof DriverSerialRead           // read
	pointerof DriverSerialWrite          // write
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reclaim fcb
	pointerof DriverSerialCancel         // cancel request
	0                                    // reserved
	0                                    // reserved
endtable

table DriverSerial
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"serial"                             // name
	OSFILETYPE_CHARDEVICE                // type
	pointerof DriverSerialDispatch       // dispatch table
	SerialPort_SIZEOF                    // extension size

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

const SERIALA_PORTCMD   0x10
const SERIALA_PORTDATA  0x11
const SERIALA_INTERRUPT 4

const SERIALB_PORTCMD   0x12
const SERIALB_PORTDATA  0x13
const SERIALB_INTERRUPT 5

var SerialPortA 0
var SerialPortB 0

const SERIALCMDWRITE   1
const SERIALCMDREAD    2
const SERIALCMDINTR    3
const SERIALCMDINTROFF 4

fn SerialCreate { name intn cmdport dataport -- deviceobject }
	fnsection "INIT$text"

	auto ok

	name@ // name
	0 // sizeinbytes
	DriverSerial // driver
	ACCESS_OWNER_READ ACCESS_GROUP_READ | ACCESS_OWNER_WRITE | ACCESS_GROUP_WRITE | // permissions
	IODeviceCreate ok! deviceobject!

	if (ok@)
		ok@ name@ "SerialCreate: failed to create %s (%i)\n" KeCrash
	end

	auto serialport
	deviceobject@ IODeviceGetExtension serialport!

	9 // sizelog (2^9 = 512 bytes)
	0 // quotablock
	MUSTSUCCEED // pri
	serialport@ SerialPort_ReceiveBuffer + // header
	IOTypeaheadBufferInitialize ok!

	if (ok@)
		ok@ name@ "SerialCreate: failed to create %s (%i)\n" KeCrash
	end

	cmdport@  serialport@ SerialPort_PortCMD + !
	dataport@ serialport@ SerialPort_PortData + !

	0 serialport@ SerialPort_RequestListHead + !
	0 serialport@ SerialPort_RequestListTail + !

	pointerof DriverSerialDPCFunction // function
	serialport@ SerialPort_DPC + // dpc
	KeDPCInitialize
end

fn (FDriverInit) DriverInit { stage -- ok }
	fnsection "INIT$text"

	if (stage@ STAGE_THREAD ==)
		auto deviceobject

		"ttyS0" // name
		SERIALA_INTERRUPT // intn
		SERIALA_PORTCMD // cmdport
		SERIALA_PORTDATA // dataport
		SerialCreate deviceobject!

		deviceobject@ IODeviceGetExtension SerialPortA!

		"ttyS1" // name
		SERIALB_INTERRUPT // intn
		SERIALB_PORTCMD // cmdport
		SERIALB_PORTDATA // dataport
		SerialCreate deviceobject!

		deviceobject@ IODeviceGetExtension SerialPortB!

		// register interrupts and start interrupting

		pointerof DriverSerialInterrupt // function
		SERIALA_INTERRUPT // interrupt number
		IPLSERIAL // interrupt priority level
		HALInterruptRegister

		pointerof DriverSerialInterrupt // function
		SERIALB_INTERRUPT // interrupt number
		IPLSERIAL // interrupt priority level
		HALInterruptRegister

		SERIALCMDINTR SERIALA_PORTCMD HALLIMNstationCitronCommand
		SERIALCMDINTR SERIALB_PORTCMD HALLIMNstationCitronCommand
	end

	0 ok!
end

fn (HALInterruptHandler) DriverSerialInterrupt { trapframe int -- }
	auto serialport

	if (int@ SERIALA_INTERRUPT ==)
		SerialPortA@ serialport!
	end elseif (int@ SERIALB_INTERRUPT ==)
		SerialPortB@ serialport!
	end else
		int@ "DriverSerialInterrupt: weird interrupt number %d\n" KeCrash
	end

	auto dpc
	serialport@ SerialPort_DPC + dpc!

	if (dpc@ KeDPC_Enqueued + @ ~~)
		serialport@ // context1
		0 // context2
		DPCHIGHIMPORTANCE // importance
		dpc@ // dpc
		KeDPCEnqueue
	end
end

fn (DPCFunction) DriverSerialDPCFunction { context1 context2 -- }
	auto currentreq
	context1@ SerialPort_RequestListHead + @ currentreq!

	auto completed
	0 completed!

	auto ok

	while (1)
		auto c
		SERIALCMDREAD context1@ SerialPort_PortCMD + @ HALLIMNstationCitronCommand
		context1@ SerialPort_PortData + @ HALLIMNstationCitronIni c!

		if (c@ 0xFFFF ==)
			break
		end

		1 // bytestocopy
		c@ // buf
		context1@ SerialPort_ReceiveBuffer + // header
		IOTypeaheadBufferCopyIn ok! drop

		if (currentreq@)
			if (currentreq@ SerialRequest_Flags + @ REQFLAG_WRITE & ~~)
				1 currentreq@ SerialRequest_LengthDone + +=
			end
		end

		if (ok@ STATUS_OTHER_CONDITION ==)
			if (DEBUGCHECKS)
				if (currentreq@ ~~)
					"DriverSerialDPCFunction: no read request\n" KeCrash
				end

				if (currentreq@ SerialRequest_Flags + @ REQFLAG_WRITE &)
					"DriverSerialDPCFunction: not a read request\n" KeCrash
				end
			end

			currentreq@ SerialRequest_LengthDone + @ currentreq@ SerialRequest_MDL + @ MmMDLHeader_Length + !

			1 completed!
		end
	end

	auto len
	auto buf

	if (currentreq@)
		if (currentreq@ SerialRequest_Flags + @ REQFLAG_WRITE &)
			currentreq@ SerialRequest_Length + @ len!
			currentreq@ SerialRequest_Buffer + @ buf!

			while (len@)
				if (context1@ SerialPort_PortCMD + @ HALLIMNstationCitronInb)
					break
				end

				buf@ gb context1@ SerialPort_PortData + @ HALLIMNstationCitronOutb

				1 buf +=
				1 len -=
			end

			if (len@ ~~)
				1 completed!
			end

			buf@ currentreq@ SerialRequest_Buffer + !
			len@ currentreq@ SerialRequest_Length + !
		end
	end

	while (completed@)
		0 completed!

		0 // status
		IOBOOSTCONSOLE // priboost
		currentreq@ SerialRequest_MDL + @ // mdl
		MmMDLComplete

		currentreq@ SerialRequest_Next + @ currentreq!

		currentreq@ context1@ SerialPort_RequestListHead + !

		if (currentreq@ ~~)
			0 context1@ SerialPort_RequestListTail + !
			return
		end

		0 currentreq@ SerialRequest_Prev + !

		// start next request

		if (currentreq@ SerialRequest_Flags + @ REQFLAG_WRITE &)
			currentreq@ SerialRequest_Length + @ len!
			currentreq@ SerialRequest_Buffer + @ buf!

			while (len@)
				if (context1@ SerialPort_PortCMD + @ HALLIMNstationCitronInb)
					break
				end

				buf@ gb context1@ SerialPort_PortData + @ HALLIMNstationCitronOutb

				1 buf +=
				1 len -=
			end

			if (len@ ~~)
				// managed to write everything.

				1 completed!

				continue
			end

			len@ currentreq@ SerialRequest_Length + !
			buf@ currentreq@ SerialRequest_Buffer + !
		end else
			currentreq@ SerialRequest_Length + @ len!
			currentreq@ SerialRequest_Buffer + @ buf!

			auto read
			len@ // bytestocopy
			buf@ // buf
			1 // switch
			context1@ SerialPort_ReceiveBuffer + // header
			IOTypeaheadBufferCopyOut ok! read!

			read@ len -=

			if (ok@ ~~)
				read@ currentreq@ SerialRequest_MDL + @ MmMDLHeader_Length + !

				1 completed!

				continue
			end

			if (DEBUGCHECKS)
				if (ok@ STATUS_OTHER_CONDITION ~=)
					ok@ "DriverSerialDPCFunction: odd %i\n" KeCrash
				end
			end

			len@ currentreq@ SerialRequest_Length + !
			buf@ read@ + currentreq@ SerialRequest_Buffer + !
		end
	end
end

fn (IODispatchReadFunction) DriverSerialRead { timeout flags kflags offset mdl fcb -- ok }
	0 // lockforwrite
	mdl@ // mdl
	MmMDLPin ok!

	if (ok@)
		return
	end

	auto buf

	if (mdl@ MmMDLHeader_Pages + @ 1 >)
		mdl@ MmMDLMap ok!

		if (ok@)
			mdl@ MmMDLUnpin

			return
		end

		mdl@ MmMDLHeader_MappedAddress + @ buf!
	end else
		// only one page, copy thru identityspace as a time saver
		mdl@ MmMDLHeader_SIZEOF + @ MmPageFrameDatabase@ - MmPageFrameEntry_SIZEOF / PAGESHIFT << IDENTITYSPACE |
		mdl@ MmMDLHeader_VirtualAddress + @ PAGEOFFSETMASK & + buf!
	end

	auto serialport
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension serialport!

	auto len
	mdl@ MmMDLHeader_Length + @ len!

	auto ior
	mdl@ MmMDLHeader_DriverGoWild + ior!

	0           ior@ SerialRequest_Next + !
	0           ior@ SerialRequest_Prev + !
	mdl@        ior@ SerialRequest_MDL + !
	0           ior@ SerialRequest_Flags + !
	buf@        ior@ SerialRequest_Buffer + !
	len@        ior@ SerialRequest_Length + !
	serialport@ ior@ SerialRequest_SerialPort + !
	0           ior@ SerialRequest_LengthDone + !

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto t
	serialport@ SerialPort_RequestListTail + @ t!

	if (t@ ~~)
		// no requests, enqueue our request and then read as many characters
		// as possible.

		auto read
		len@ // bytestocopy
		buf@ // buf
		1 // switch
		serialport@ SerialPort_ReceiveBuffer + // header
		IOTypeaheadBufferCopyOut ok! read!

		read@ len -=

		if (ok@ ~~)
			ipl@ KeIPLLower

			read@ mdl@ MmMDLHeader_Length + !

			0 // status
			IOBOOSTCONSOLE // priboost
			mdl@ // mdl
			MmMDLComplete

			return
		end

		if (DEBUGCHECKS)
			if (ok@ STATUS_OTHER_CONDITION ~=)
				"DriverSerialRead\n" KeCrash
			end
		end

		read@ ior@ SerialRequest_LengthDone + !
		len@ ior@ SerialRequest_Length + !
		buf@ read@ + ior@ SerialRequest_Buffer + !

		ior@ serialport@ SerialPort_RequestListTail + !
		ior@ serialport@ SerialPort_RequestListHead + !

		0 ok!
	end else
		// add our request to the tail of the queue.

		t@ ior@ SerialRequest_Prev + !
		ior@ t@ SerialRequest_Next + !
		ior@ serialport@ SerialPort_RequestListTail + !
	end

	ipl@ KeIPLLower
end

fn (IODispatchWriteFunction) DriverSerialWrite { flags kflags offset mdl fcb -- ok }
	0 // lockforwrite
	mdl@ // mdl
	MmMDLPin ok!

	if (ok@)
		return
	end

	auto buf

	if (mdl@ MmMDLHeader_Pages + @ 1 >)
		mdl@ MmMDLMap ok!

		if (ok@)
			mdl@ MmMDLUnpin

			return
		end

		mdl@ MmMDLHeader_MappedAddress + @ buf!
	end else
		// only one page, copy thru identityspace as a time saver
		mdl@ MmMDLHeader_SIZEOF + @ MmPageFrameDatabase@ - MmPageFrameEntry_SIZEOF / PAGESHIFT << IDENTITYSPACE |
		mdl@ MmMDLHeader_VirtualAddress + @ PAGEOFFSETMASK & + buf!
	end

	auto serialport
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension serialport!

	auto len
	mdl@ MmMDLHeader_Length + @ len!

	auto ior
	mdl@ MmMDLHeader_DriverGoWild + ior!

	0             ior@ SerialRequest_Next + !
	0             ior@ SerialRequest_Prev + !
	mdl@          ior@ SerialRequest_MDL + !
	REQFLAG_WRITE ior@ SerialRequest_Flags + !
	buf@          ior@ SerialRequest_Buffer + !
	len@          ior@ SerialRequest_Length + !
	serialport@   ior@ SerialRequest_SerialPort + !
	0             ior@ SerialRequest_LengthDone + !

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto t
	serialport@ SerialPort_RequestListTail + @ t!

	if (t@ ~~)
		// no requests, enqueue our request and then write as many characters
		// as possible.

		while (len@)
			if (serialport@ SerialPort_PortCMD + @ HALLIMNstationCitronInb)
				break
			end

			buf@ gb serialport@ SerialPort_PortData + @ HALLIMNstationCitronOutb

			1 buf +=
			1 len -=
		end

		if (len@ ~~)
			// managed to write everything.

			ipl@ KeIPLLower

			0 // status
			IOBOOSTCONSOLE // priboost
			mdl@ // mdl
			MmMDLComplete

			return
		end

		buf@ ior@ SerialRequest_Buffer + !
		len@ ior@ SerialRequest_Length + !

		ior@ serialport@ SerialPort_RequestListTail + !
		ior@ serialport@ SerialPort_RequestListHead + !
	end else
		// add our request to the tail of the queue.

		t@ ior@ SerialRequest_Prev + !
		ior@ t@ SerialRequest_Next + !
		ior@ serialport@ SerialPort_RequestListTail + !
	end

	ipl@ KeIPLLower
end

fn (IODispatchCancelFunction) DriverSerialCancel { mdl -- }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto ior
	mdl@ MmMDLHeader_DriverGoWild + ior!

	if (mdl@ MmMDLHeader_Flags + @ MMMDL_COMPLETE &)
		// already completed, nothing to do
		ipl@ KeIPLLower
		return
	end

	auto serialport
	ior@ SerialRequest_SerialPort + @ serialport!

	if (ior@ SerialRequest_Flags + @ REQFLAG_WRITE & ~~)
		serialport@ SerialPort_ReceiveBuffer + IOTypeaheadBufferComplete drop
	end

	auto ls
	ior@ SerialRequest_Prev + @ ls!

	auto ns
	ior@ SerialRequest_Next + @ ns!

	if (ls@)
		ns@ ls@ SerialRequest_Next + !
	end else
		ns@ serialport@ SerialPort_RequestListHead + !
	end

	if (ns@)
		ls@ ns@ SerialRequest_Prev + !
	end else
		ls@ serialport@ SerialPort_RequestListTail + !
	end

	ipl@ KeIPLLower

	STATUS_IO_CANCELLED // status
	0 // priboost
	mdl@ // mdl
	MmMDLComplete
end