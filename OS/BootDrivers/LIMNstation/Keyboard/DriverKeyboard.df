//
// Implements the amtsu keyboard driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALLIMNstationAmtsu.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALConsole.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/IO.h"

#include "<inc>/Console.h"

const KEYBDMID 0x8FC48FC4

const KEYBDCMDREAD 1

const KEYBD_SHIFT 1
const KEYBD_CTRL  2
const KEYBD_CAPS  4

struct Keyboard
	4 ID
	4 ScanCodeBuffer
	4 RawBuffer
	4 States
	KeDPC_SIZEOF DPC
endstruct

table DriverKeyboardDispatch
	0                                    // open
	0                                    // close
	0                                    // iocontrol
	pointerof DriverKeyboardRead         // read
	0                                    // write
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

table DriverKeyboard
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"keyboard"                           // name
	OSFILETYPE_CHARDEVICE                // type
	pointerof DriverKeyboardDispatch     // dispatch table
	Keyboard_SIZEOF                      // extension size

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

table KeyboardTable[16]

fn (FDriverInit) DriverInit { stage -- ok }
	if (stage@ STAGE_THREAD ==)
		pointerof DriverKeyboardEnumerate // func
		KEYBDMID // mid
		HALLIMNstationAmtsuEnumerate drop
	end

	0 ok!
end

fn (HALLIMNstationAmtsuCallbackF) DriverKeyboardEnumerate { id -- }
	auto name
	OBNAMEMAX alloc name!

	name@ // dest
	"kbd" // src
	strcpy

	id@ // n
	name@ 3 + // str
	itoa

	auto dev
	auto ok
	name@ // name
	0 // sizeinbytes
	DriverKeyboard // driver
	ACCESS_OWNER_READ ACCESS_GROUP_READ | // permissions
	IODeviceCreate ok! dev!

	if (ok@)
		ok@ name@ "DriverKeyboardEnumerate: failed to create %s (%i)\n" KeCrash
	end

	auto keyboard
	dev@ IODeviceGetExtension keyboard!

	pointerof DriverKeyboardDPCFunction // function
	keyboard@ Keyboard_DPC + // dpc
	KeDPCInitialize

	id@ keyboard@ Keyboard_ID + !

	0 keyboard@ Keyboard_States + !

	if (CoVideoConsoleRawBuffer@ ~~)
		// no device specified as video console input buffer, allocate it and
		// make that us

		auto rawbuffer
		10 // sizelog (2^10 = 1024 bytes)
		0 // valuesizelog (2^0 = 1 byte)
		IPLINTERACTIVE // synchipl
		0 // quotablock
		ExRingBufferCreate ok! rawbuffer!

		if (ok@)
			ok@ name@ "DriverKeyboardEnumerate: failed to create %s (%i)\n" KeCrash
		end

		rawbuffer@ keyboard@ Keyboard_RawBuffer + !
		rawbuffer@ CoVideoConsoleRawBuffer!
	end else
		0 keyboard@ Keyboard_RawBuffer + !
	end

	auto scanbuffer
	8 // sizelog (2^8 = 256 bytes)
	0 // valuesizelog (2^0 = 1 byte)
	IPLINTERACTIVE // synchipl
	0 // quotablock
	ExRingBufferCreate ok! scanbuffer!

	if (ok@)
		ok@ name@ "DriverKeyboardEnumerate: failed to create %s (%i)\n" KeCrash
	end

	scanbuffer@ keyboard@ Keyboard_ScanCodeBuffer + !

	keyboard@ [id@]KeyboardTable!

	auto irq
	id@ HALLIMNstationAmtsuIDToIrq irq!

	pointerof DriverKeyboardInterrupt // handler
	irq@ // int
	IPLINTERACTIVE // ipl
	HALInterruptRegister

	id@ HALLIMNstationAmtsuSetInterrupt
end

fn (IODispatchReadFunction) DriverKeyboardRead { timeout flags kflags length offset buffer fcb lastmode -- bytesread ok }
	auto keyboard
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension keyboard!

	auto ringbuf
	keyboard@ Keyboard_ScanCodeBuffer + @ ringbuf!

	0 bytesread!

	auto waitonempty
	EXRINGDONTWAIT waitonempty!

	if (flags@ OSACCESSFLAG_NONBLOCK & ~~)
		EXRINGWAIT waitonempty!
	end

	while (bytesread@ length@ <)
		auto c

		timeout@ // timeout
		lastmode@ // lastmode
		waitonempty@ // waitonempty
		ringbuf@ // ringbuffer
		ExRingBufferReadValue ok! drop c!

		if (ok@)
			return
		end

		if (lastmode@ USERMODE ==)
			c@ buffer@ KeSafeStoreByte ok!

			if (ok@)
				return
			end
		end else
			c@ buffer@ sb
		end

		1 buffer +=
		1 bytesread +=
	end

	0 ok!
end

fn (DPCFunction) DriverKeyboardDPCFunction { context1 context2 -- }
	auto console
	CoVideoConsole@ console!

	if (console@)
		if (context1@ Keyboard_RawBuffer + @)
			// there's a rawbuffer which means we're feeding the video
			// console.
			console@ CoConsoleCook
		end
	end

	IOBOOSTKEYBOARD // priboost
	context1@ Keyboard_ScanCodeBuffer + @ // ringbuffer
	ExRingBufferWakeReader
end

fn (HALInterruptHandler) DriverKeyboardInterrupt { int -- }
	auto keyboard

	auto id
	int@ HALLIMNstationAmtsuIrqToID id!

	[id@]KeyboardTable@ keyboard!

	auto scanbuf
	keyboard@ Keyboard_ScanCodeBuffer + @ scanbuf!

	auto rawbuf
	keyboard@ Keyboard_RawBuffer + @ rawbuf!

	auto c
	auto scan

	while (1)
		keyboard@ KeyboardRead c! scan!

		if (scan@ -1 ==)
			break
		end

		if (scan@ 0x8000 &)
			scan@ 0xFF & 0x80 | scan!
		end

		scan@ // value
		1  // overwrite
		0 // timeout
		KERNELMODE // lastmode
		EXRINGDONTWAIT // waitonfull
		scanbuf@ // ringbuffer
		ExRingBufferWriteValue drop drop

		if (rawbuf@)
			if (c@ -1 ~=)
				c@ // value
				1  // overwrite
				0 // timeout
				KERNELMODE // lastmode
				EXRINGDONTWAIT // waitonfull
				rawbuf@ // ringbuffer
				ExRingBufferWriteValue drop drop
			end
		end
	end

	auto dpc
	keyboard@ Keyboard_DPC + dpc!

	if (dpc@ KeDPC_Enqueued + @ ~~)
		// defer waking up any blocked readers til later,
		// otherwise we will BSOD since we're at IPLINTERACTIVE

		keyboard@ // context1
		0 // context2
		DPCLOWIMPORTANCE // importance
		dpc@ // dpc
		KeDPCEnqueue
	end
end

fn KeyboardRead { keyboard -- scan c }
	auto id
	keyboard@ Keyboard_ID + @ id!

	auto rs
	HALCPUInterruptDisable rs!

	id@ HALLIMNstationAmtsuSelect
	KEYBDCMDREAD HALLIMNstationAmtsuCommand
	HALLIMNstationAmtsuReadA scan!

	rs@ HALCPUInterruptRestore

	-1 c!

	if (scan@ 0xFFFF ==)
		-1 scan!
		return
	end

	if (scan@ 80 ==)
		KEYBD_CTRL keyboard@ Keyboard_States + |=
	end elseif (scan@ 82 ==)
		KEYBD_SHIFT keyboard@ Keyboard_States + |=
	end elseif (scan@ 32848 ==)
		KEYBD_CTRL ~ keyboard@ Keyboard_States + &=
	end elseif (scan@ 32850 ==)
		KEYBD_SHIFT ~ keyboard@ Keyboard_States + &=
	end elseif (scan@ 32820 ==)
		if (keyboard@ Keyboard_States + @ KEYBD_CAPS &)
			KEYBD_CAPS ~ keyboard@ Keyboard_States + &=
		end else
			KEYBD_CAPS keyboard@ Keyboard_States + |=
		end
	end

	if (scan@ 80 >=)
		return
	end

	if (scan@ 50 >=)
		if (scan@ 50 ==)
			'\n' c!
		end elseif (scan@ 51 ==)
			'\b' c!
		end else
			-1 c!
		end

		return
	end

	if (keyboard@ Keyboard_States + @ KEYBD_SHIFT &)
		[scan@]KeyboardLayoutShift@ c!
	end elseif (keyboard@ Keyboard_States + @ KEYBD_CTRL &)
		[scan@]KeyboardLayoutCtrl@ c!
	end elseif (keyboard@ Keyboard_States + @ KEYBD_CAPS & scan@ 26 < &&)
		[scan@]KeyboardLayoutShift@ c!
	end else
		[scan@]KeyboardLayout@ c!
	end
end

table KeyboardLayout
	'a'
	'b' 'c' 'd'
	'e' 'f' 'g'
	'h' 'i' 'j'
	'k' 'l' 'm'
	'n' 'o' 'p'
	'q' 'r' 's'
	't' 'u' 'v'
	'w' 'x' 'y'
	'z'
	'0' '1' '2'
	'3' '4' '5'
	'6' '7' '8'
	'9'
	';'
	' '
	' '
	'-'
	'='
	'['
	']'
	'\\'
	0
	'/'
	'.'
	'\''
	','
	'`'
endtable

table KeyboardLayoutCtrl
	1
	2 3 4
	5 6 7
	8 9 10
	11 12 13
	14 15 16
	17 18 19
	20 21 22
	23 24 25
	26
	-1 -1 0
	-1 -1 -1
	30 -1 -1
	-1
	-1
	-1
	-1
	31
	-1
	27
	29
	28
	-1
	-1
	-1
	-1
	-1
	-1
endtable

table KeyboardLayoutShift
	'A'
	'B' 'C' 'D'
	'E' 'F' 'G'
	'H' 'I' 'J'
	'K' 'L' 'M'
	'N' 'O' 'P'
	'Q' 'R' 'S'
	'T' 'U' 'V'
	'W' 'X' 'Y'
	'Z'
	')' '!' '@'
	'#' '$' '%'
	'^' '&' '*'
	'('
	':'
	' '
	' '
	'_'
	'+'
	'{'
	'}'
	'|'
	0
	'?'
	'>'
	'"'
	'<'
	'~'
endtable