#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<ll>/OSDLL/OSVideoControl.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALLIMNstationEBus.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

struct KinnowCard
	4 BaseAddress
	4 Width
	4 Height
	4 VRAMSize
endstruct

table DriverKinnowFBDispatch
	0                                    // open
	0                                    // close
	pointerof KinnowFBIOControl          // iocontrol
	pointerof KinnowFBRead               // read
	pointerof KinnowFBWrite              // write
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	pointerof KinnowFBGetPageAddress     // getpageaddr
	0                                    // delete device object
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

table DriverKinnowFB
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"kinnowfb"                           // name
	OSFILETYPE_CHARDEVICE                // type
	pointerof DriverKinnowFBDispatch     // dispatch table
	KinnowCard_SIZEOF                    // extension size

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

const KINNOWFB_MID 0x4B494E35

fn (FDriverInit) DriverInit { stage -- ok }
	if (stage@ STAGE_THREAD ==)
		pointerof KinnowFBEnumerate // func
		KINNOWFB_MID // mid
		HALLIMNstationEBusEnumerate drop
	end

	0 ok!
end

const LGVRAMOffset      0x100000
const LGRegistersOffset 0x3000

struct LGRegisters
	4 Screen
	4 VRAMSize
endstruct

fn (HALLIMNstationEBusCallbackF) KinnowFBEnumerate { slotid phyaddr -- }
	auto dev

	auto vaddr
	1 // cached
	512 // length
	phyaddr@ LGRegistersOffset + // phyaddr
	MmIORegionMap ok! vaddr!

	if (ok@)
		return
	end

	auto screenparam
	vaddr@ LGRegisters_Screen + @ screenparam!

	auto vramsize
	vaddr@ LGRegisters_VRAMSize + @ vramsize!

	512 // length
	vaddr@ // vaddr
	MmIORegionUnmap

	auto name
	OBNAMEMAX alloc name!

	name@ // dest
	"kinnowfb" // src
	strcpy

	slotid@ // n
	name@ 8 + // str
	itoa

	auto ok
	name@ // name
	vramsize@ // sizeinbytes
	DriverKinnowFB // driver
	ACCESS_OWNER_READ ACCESS_OWNER_WRITE | ACCESS_GROUP_READ | ACCESS_GROUP_WRITE | // permissions
	IODeviceCreate ok! dev!

	if (ok@)
		ok@ name@ "KinnowFBEnumerate: failed to create %s (%i)\n" KeCrash
	end

	auto kinnowfb
	dev@ IODeviceGetExtension kinnowfb!

	phyaddr@ kinnowfb@ KinnowCard_BaseAddress + !
	screenparam@ 0xFFF & kinnowfb@ KinnowCard_Width + !
	screenparam@ 12 >> 0xFFF & kinnowfb@ KinnowCard_Height + !
	vramsize@ kinnowfb@ KinnowCard_VRAMSize + !
end

fn (IODispatchIOControlFunction) KinnowFBIOControl { arg2 arg1 access fcb lastmode -- ret ok }
	0 ok!

	auto kinnowfb
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension kinnowfb!

	if (arg1@ OSVIDEOIOCONTROL_QUERY ==)
		auto query

		if (lastmode@ USERMODE ==)
			OSVideoQuery_SIZEOF alloc query!
		end else
			arg2@ query!
		end

		kinnowfb@ KinnowCard_Width + @ query@ OSVideoQuery_Width + !
		kinnowfb@ KinnowCard_Height + @ query@ OSVideoQuery_Height + !
		FBFORMAT_1AB5G5R5 query@ OSVideoQuery_Format + !

		if (lastmode@ USERMODE ==)
			arg2@ // dest
			query@ // src
			OSVideoQuery_SIZEOF // size
			KeSafeCopyOut ok!
		end
	end else
		STATUS_IO_NOT_SUPPORTED ok!
	end
end

fn (IODispatchGetPageAddressFunction) KinnowFBGetPageAddress { offset fcb -- phyaddr ok }
	auto kinnowfb
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension kinnowfb!

	if (offset@ kinnowfb@ KinnowCard_VRAMSize + @ >=)
		"KinnowFBGetPageAddress: beyond end of VRAM\n" KeCrash
	end

	0 ok!
	kinnowfb@ KinnowCard_BaseAddress + @ LGVRAMOffset + offset@ + phyaddr!
end

fn (IODispatchReadFunction) KinnowFBRead { timeout flags kflags length offset buffer fcb lastmode -- bytesread ok }
	auto kinnowfb
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension kinnowfb!

	auto vramsize
	kinnowfb@ KinnowCard_VRAMSize + @ vramsize!

	if (offset@ vramsize@ >=)
		0 bytesread!

		return
	end

	vramsize@ offset@ -
	length@
	min length!

	0 bytesread!

	auto lastpageno
	-1 lastpageno!

	auto vaddr
	-1 vaddr!

	while (bytesread@ length@ <)
		auto pageoff
		offset@ PAGEOFFSETMASK & pageoff!

		auto pageno
		offset@ PAGESHIFT >> pageno!

		auto m
		length@ bytesread@ -
		PAGESIZE pageoff@ -
		min m!

		if (pageno@ lastpageno@ ~=)
			if (vaddr@ -1 ~=)
				PAGESIZE // length
				vaddr@ // vaddr
				MmIORegionUnmap
			end

			0 // cached
			PAGESIZE // length
			kinnowfb@ KinnowCard_BaseAddress + @ LGVRAMOffset + offset@ PAGENUMBERMASK & + // phyaddr
			MmIORegionMap ok! vaddr!

			if (ok@)
				return
			end

			pageno@ lastpageno!
		end

		if (lastmode@ USERMODE ==)
			buffer@ // dest
			vaddr@ pageoff@ + // src
			m@ // size
			KeSafeCopyOut ok!

			if (ok@)
				PAGESIZE // length
				vaddr@ // vaddr
				MmIORegionUnmap

				return
			end
		end else
			buffer@ // dest
			vaddr@ pageoff@ + // src
			m@ // size
			memcpy
		end

		m@ buffer +=
		m@ bytesread +=
		m@ offset +=
	end

	if (vaddr@ -1 ~=)
		PAGESIZE // length
		vaddr@ // vaddr
		MmIORegionUnmap
	end
end

fn (IODispatchWriteFunction) KinnowFBWrite { flags kflags length offset buffer fcb lastmode -- byteswritten ok }
	auto kinnowfb
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension kinnowfb!

	auto vramsize
	kinnowfb@ KinnowCard_VRAMSize + @ vramsize!

	if (offset@ vramsize@ >=)
		STATUS_IO_END_OF_DISK ok!
		return
	end

	vramsize@ offset@ -
	length@
	min length!

	0 byteswritten!

	auto lastpageno
	-1 lastpageno!

	auto vaddr
	-1 vaddr!

	while (byteswritten@ length@ <)
		auto pageoff
		offset@ PAGEOFFSETMASK & pageoff!

		auto pageno
		offset@ PAGESHIFT >> pageno!

		auto m
		length@ byteswritten@ -
		PAGESIZE pageoff@ -
		min m!

		if (pageno@ lastpageno@ ~=)
			if (vaddr@ -1 ~=)
				PAGESIZE // length
				vaddr@ // vaddr
				MmIORegionUnmap
			end

			0 // cached
			PAGESIZE // length
			kinnowfb@ KinnowCard_BaseAddress + @ LGVRAMOffset + offset@ PAGENUMBERMASK & + // phyaddr
			MmIORegionMap ok! vaddr!

			if (ok@)
				return
			end

			pageno@ lastpageno!
		end

		if (lastmode@ USERMODE ==)
			vaddr@ pageoff@ + // dest
			buffer@ // src
			m@ // size
			KeSafeCopyIn ok!

			if (ok@)
				PAGESIZE // length
				vaddr@ // vaddr
				MmIORegionUnmap

				return
			end
		end else
			vaddr@ pageoff@ + // dest
			buffer@ // src
			m@ // size
			memcpy
		end

		m@ buffer +=
		m@ byteswritten +=
		m@ offset +=
	end

	if (vaddr@ -1 ~=)
		PAGESIZE // length
		vaddr@ // vaddr
		MmIORegionUnmap
	end
end