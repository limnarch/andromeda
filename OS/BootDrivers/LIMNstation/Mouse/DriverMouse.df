//
// Implements the amtsu mouse driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"
#include "<ll>/OSDLL/OSMouseControl.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALLIMNstationAmtsu.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALConsole.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/Console.h"

const MOUSEMID 0x4D4F5553

const MOUSECMDREAD  1
const MOUSECMDRESET 2

struct Mouse
	4 ID
	KeDPC_SIZEOF DPC

	IOAsyncDeviceHeader_SIZEOF Header

	OSMousePacket_SIZEOF Packet
endstruct

table DriverMouseDispatch
	0                                    // open
	0                                    // close
	0                                    // iocontrol
	pointerof DriverMouseRead            // read
	0                                    // write
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reclaim fcb
	pointerof IOAsyncDriverCancel        // cancel request
	0                                    // reserved
	0                                    // reserved
endtable

table DriverMouse
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"mouse"                              // name
	OSFILETYPE_CHARDEVICE                // type
	pointerof DriverMouseDispatch        // dispatch table
	Mouse_SIZEOF                         // extension size

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

table MouseTable[16]

fn (FDriverInit) DriverInit { stage -- ok }
	fnsection "INIT$text"

	if (stage@ STAGE_THREAD ==)
		pointerof DriverMouseEnumerate // func
		MOUSEMID // mid
		HALLIMNstationAmtsuEnumerate drop
	end

	0 ok!
end

fn (HALLIMNstationAmtsuCallbackF) DriverMouseEnumerate { id -- }
	fnsection "INIT$text"

	auto name
	OBNAMEMAX alloc name!

	name@ // dest
	"mouse" // src
	strcpy

	id@ // n
	name@ 5 + // str
	itoa

	auto dev
	auto ok
	name@ // name
	0 // sizeinbytes
	DriverMouse // driver
	ACCESS_OWNER_READ ACCESS_GROUP_READ | // permissions
	IODeviceCreate ok! dev!

	if (ok@)
		ok@ name@ "DriverMouseEnumerate: failed to create %s (%i)\n" KeCrash
	end

	auto mouse
	dev@ IODeviceGetExtension mouse!

	pointerof IOAsyncDPCFunction // function
	mouse@ Mouse_DPC + // dpc
	KeDPCInitialize

	id@ mouse@ Mouse_ID + !

	mouse@ // context
	0 // txfunc
	pointerof DriverMouseRX // rxfunc
	6 // rxsizelog (1<<6 = 64 bytes (8x8))
	MUSTSUCCEED // pri
	mouse@ Mouse_Header + // header
	IOAsyncDeviceInitialize ok!

	if (ok@)
		ok@ name@ "DriverMouseEnumerate: failed to create %s (%i)\n" KeCrash
	end

	mouse@ [id@]MouseTable!

	auto irq
	id@ HALLIMNstationAmtsuIDToIrq irq!

	pointerof DriverMouseInterrupt // handler
	irq@ // int
	IPLINTERACTIVE // ipl
	HALInterruptRegister

	id@ HALLIMNstationAmtsuSetInterrupt
end

fn (IODispatchReadFunction) DriverMouseRead { timeout flags kflags offset mdl fcb -- ok }
	if (mdl@ MmMDLHeader_Length + @ OSMousePacket_SIZEOF %)
		// not a multiple of the mouse event packet size

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	auto header
	fcb@ IOFileControlBlockGetDeviceObject IODeviceGetExtension Mouse_Header + header!

	timeout@ // timeout
	flags@ // flags
	kflags@ // kflags
	offset@ // offset
	mdl@ // mdl
	header@ // header
	IOAsyncDeviceRead ok!
end

fn (HALInterruptHandler) DriverMouseInterrupt { trapframe int -- }
	auto mouse

	auto id
	int@ HALLIMNstationAmtsuIrqToID id!

	[id@]MouseTable@ mouse!

	auto dpc
	mouse@ Mouse_DPC + dpc!

	if (dpc@ KeDPC_Enqueued + @ ~~)
		// defer waking up any blocked readers til later,
		// otherwise we will BSOD since we're at IPLINTERACTIVE

		mouse@ Mouse_Header + // context1
		0 // context2
		DPCLOWIMPORTANCE // importance
		dpc@ // dpc
		KeDPCEnqueue
	end
end

fn (IOAsyncRXFunc) DriverMouseRX { header -- c bytes ok }
	OSMousePacket_SIZEOF bytes!

	auto mouse
	header@ IOAsyncDeviceHeader_Context + @ mouse!

	auto info
	auto eventtype

	auto rs
	HALCPUInterruptDisable rs!

	mouse@ Mouse_ID + @ HALLIMNstationAmtsuSelect
	MOUSECMDREAD HALLIMNstationAmtsuCommand
	HALLIMNstationAmtsuReadA eventtype!
	HALLIMNstationAmtsuReadB info!

	rs@ HALCPUInterruptRestore

	if (eventtype@ ~~)
		-1 ok!
		return
	end

	mouse@ Mouse_Packet + c!

	eventtype@ c@ OSMousePacket_EventType + !
	info@ c@ OSMousePacket_Info + !

	0 ok!
end