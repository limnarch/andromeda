//
// Implements the AisixFS driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "AisixFS.h"

table DriverAFSFilesystem
	0                              // next
	0                              // prev

	"AisixFS"                      // name
	pointerof DriverAFSDispatch    // dispatchtable

	pointerof DriverAFSMount       // mountfunction
	pointerof DriverAFSUnmount     // unmountfunction
	pointerof DriverAFSFlush       // flushfunction
	pointerof DriverAFSUpdateFlags // updateflags
	0                              // flags

	0                              // reserved
	0                              // reserved
	0                              // reserved
	0                              // reserved
	0                              // reserved
	0                              // reserved
	0                              // reserved
endtable

table DriverAFSDispatch
	pointerof AFSOpen                    // open
	pointerof AFSClose                   // close
	0                                    // iocontrol
	pointerof AFSReadFile                // read
	pointerof AFSWriteFile               // write
	pointerof AFSUnlink                  // unlink
	pointerof AFSParse                   // parse
	pointerof AFSDelete                  // delete
	0                                    // flush
	pointerof AFSDeleteObject            // delete object
	pointerof AFSPoke                    // poke
	pointerof AFSSetSecurity             // setsecurity
	pointerof AFSRename                  // rename
	0                                    // readblock
	0                                    // writeblock
	pointerof AFSTruncate                // truncate
	pointerof AFSReadDirectory           // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	pointerof AFSFCBReclaim              // reclaim fcb
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable
public DriverAFSDispatch

fn (FDriverInit) DriverInit { stage -- ok }
	fnsection "INIT$text"

	if (stage@ STAGE_THREAD ==)
		DriverAFSFilesystem // filesystem
		IOFilesystemRegister ok!

		if (ok@)
			return
		end
	end

	0 ok!
end

fn (IOFilesystemMountFunction) DriverAFSMount { mount -- ok }
	AFSBLOCKSIZE // blocksize
	mount@ // mount
	FSVolumeInitialize ok! drop

	if (ok@)
		return
	end

	auto pageframe

	auto pfdbe

	0 // flags
	0 // kflags
	0 // offset
	mount@ // mount
	FSVolumeBlockRead ok! pfdbe! pageframe!

	if (ok@)
		mount@ FSVolumeUninitialize
		return
	end

	if (pageframe@ AFSSuperblock_Magic + @ AFSSUPERBLOCKMAGIC ~=)
		pfdbe@ MmEvictablePageDereference drop

		mount@ FSVolumeUninitialize

		STATUS_BAD_FILESYSTEM ok!

		return
	end

	if (pageframe@ AFSSuperblock_Version + @ AFSSUPERBLOCKVERSION ~=)
		pfdbe@ MmEvictablePageDereference drop

		mount@ FSVolumeUninitialize

		STATUS_BAD_FILESYSTEM ok!

		return
	end

	pageframe@ AFSSuperblock_DataStart + @ AFSBLOCKSHIFT << // size
	mount@ // mount
	FSVolumeFileCreate ok!

	if (ok@)
		pfdbe@ MmEvictablePageDereference drop

		mount@ FSVolumeUninitialize

		return
	end

	auto afsdata
	AFSData_SIZEOF // bytes
	'AFSD' // tag
	0 // flags
	MmAllocWithTag ok! afsdata!

	if (ok@)
		pfdbe@ MmEvictablePageDereference drop

		mount@ FSVolumeUninitialize

		return
	end

	pageframe@ AFSSuperblock_FATStart + @ afsdata@ AFSData_FATStart + !
	pageframe@ AFSSuperblock_FATSize + @ afsdata@ AFSData_FATSize + !
	pageframe@ AFSSuperblock_IStart + @ afsdata@ AFSData_IStart + !
	pageframe@ AFSSuperblock_ICount + @ afsdata@ AFSData_ICount + !
	pageframe@ AFSSuperblock_VolSize + @ afsdata@ AFSData_VolSize + !
	0 afsdata@ AFSData_FCBRefTotal + !

	0 afsdata@ AFSData_WritableFiles + !

	"AFSINodeAllocationMutex" // name
	KERNELMODE // mode
	afsdata@ AFSData_INodeAllocationMutex + // mutex
	KeMutexInitialize

	"AFSRenameMutex" // name
	KERNELMODE // mode
	afsdata@ AFSData_RenameMutex + // mutex
	KeMutexInitialize

	auto i
	0 i!

	auto mutex
	afsdata@ AFSData_FCBCacheMutexes + mutex!

	while (i@ AFSFCBBUCKETS <)
		"AFSFCBCacheBucketMutex" // name
		KERNELMODE // mode
		mutex@ // mutex
		KeMutexInitialize

		KeMutex_SIZEOF mutex +=
		1 i +=
	end

	afsdata@ AFSData_FCBBucketListHeads + // ptr
	AFSFCBBUCKETS 8 * // size
	0 // word
	memset

	afsdata@ mount@ IOMountSetContext

	pfdbe@ MmEvictablePageDereference drop

	mount@ AFSBlockBitmapInitialize ok!

	if (ok@)
		afsdata@ MmFree

		mount@ FSVolumeUninitialize

		return
	end

	auto rootfcb

	1 // inum
	mount@ // mount
	AFSFCBRead ok! rootfcb!

	if (ok@)
		mount@ AFSBlockBitmapUninitialize

		afsdata@ MmFree

		mount@ FSVolumeUninitialize

		return
	end

	rootfcb@ mount@ IOMountSetRootFCB

	0 ok!
end

fn (IOFilesystemUnmountFunction) DriverAFSUnmount { mount -- ok }
	auto afsdata
	mount@ IOMountGetContext afsdata!

	if (afsdata@ AFSData_FCBRefTotal + @)
		STATUS_DEVICE_BUSY ok!

		return
	end

	mount@ IOMountGetRootFCB IOFileControlBlockDereference drop

	1 // destroy
	mount@ // mount
	AFSFCBCacheFlush ok!

	if (ok@)
		ok@ "DriverAFSUnmount: cache destroy failed\n" KeCrash
	end

	mount@ AFSBlockBitmapUninitialize

	afsdata@ MmFree

	0 mount@ IOMountSetContext

	mount@ FSVolumeUninitialize

	mount@ FSVolumeFlush drop
end

fn (IOFilesystemFlushFunction) DriverAFSFlush { mount -- ok }
	// "DriverAFSFlush: TODO\n" KeCrash

	// I mean, we access the volume through the page cache,
	// so we don't have anything to flush I don't think...

	0 ok!
end

fn (IOFilesystemUpdateFlagsFunction) DriverAFSUpdateFlags { newflags oldflags mount -- ok }
	0 ok!

	if (newflags@ OSMOUNT_READONLY &)
		if (oldflags@ OSMOUNT_READONLY & ~~)
			// volume is being downgraded to read-only.
			// only allow if there are no writable files opened.

			auto rs
			HALCPUInterruptDisable rs!

			if (mount@ IOMountGetContext AFSData_WritableFiles + @)
				rs@ HALCPUInterruptRestore

				STATUS_DEVICE_BUSY ok!

				return
			end

			// evade a race condition by setting the readonly flag here

			mount@ IOMountGetFlags OSMOUNT_READONLY | mount@ IOMountSetFlags

			rs@ HALCPUInterruptRestore

			// flush all dirty pages to ensure the volume
			// won't be written while read-only.

			0 // destroy
			mount@ // mount
			AFSFCBCacheFlush drop

			mount@ FSVolumeFlush drop
		end
	end
end