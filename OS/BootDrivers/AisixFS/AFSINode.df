//
// Implements inode management for the AisixFS driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "AisixFS.h"

fn AFSINodeRead { inum mount urgent -- ptr pfdbe ok }
	auto block
	auto off

	auto kflags
	if (urgent@)
		IOKFLAG_URGENT kflags!
	end else
		0 kflags!
	end

	inum@ AFSINode_SIZEOF * off!

	mount@ IOMountGetContext AFSData_IStart + @ off@ AFSBLOCKSHIFT >> + AFSBLOCKSHIFT << block!

	OSACCESSFLAG_NOREADAHEAD // flags
	0 // kflags
	block@ // offset
	mount@ // mount
	FSVolumeBlockRead ok! pfdbe! ptr!

	if (ok@)
		return
	end

	off@ AFSBLOCKOFFMASK & ptr +=
end

fn AFSINodeAllocationLock { mount -- ok }
	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	mount@ IOMountGetContext AFSData_INodeAllocationMutex + // object
	KeThreadWaitForObject ok!
end

fn AFSINodeAllocationUnlock { mount -- }
	0 // abandon
	mount@ IOMountGetContext AFSData_INodeAllocationMutex + // mutex
	KeMutexRelease drop
end

fn AFSINodeFree { inum mount -- }
	auto ok

	auto pfdbe
	auto inode

	KeThreadCurrent@ KeThreadIgnoreKill drop

	inum@ // inum
	mount@ // mount
	1 // urgent
	AFSINodeRead ok! pfdbe! inode!

	if (ok@)
		ok@ "AFSINodeFree: couldn't read inode (%i)\n" KeCrash
	end

	0 inode@ AFSINode_type + !

	pfdbe@ // pfdbe
	mount@ // mount
	FSVolumeBlockWrite ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "AFSINodeFree: couldn't dirty block (%i)\n" KeCrash
		end
	end

	pfdbe@ MmEvictablePageDereference drop

	KeThreadCurrent@ KeThreadAcceptKill drop
end

fn AFSINodeAllocate { mount -- inum inode pfdbe ok }
	auto afsdata
	mount@ IOMountGetContext afsdata!

	auto inodes
	afsdata@ AFSData_ICount + @ inodes!

	auto inoblk
	afsdata@ AFSData_IStart + @ inoblk!

	mount@ AFSINodeAllocationLock ok!

	if (ok@)
		return
	end

	0 // flags
	0 // kflags
	inoblk@ AFSBLOCKSHIFT << // offset
	mount@ // mount
	FSVolumeBlockRead ok! pfdbe! inode!

	if (ok@)
		mount@ AFSINodeAllocationUnlock

		return
	end

	// skip inode 0
	1 inum!
	AFSINode_SIZEOF inode +=

	while (inum@ inodes@ <)
		if (inum@ AFSINode_SIZEOF * AFSBLOCKOFFMASK & ~~)
			pfdbe@ MmEvictablePageDereference drop

			1 inoblk +=

			0 // flags
			0 // kflags
			inoblk@ AFSBLOCKSHIFT << // offset
			mount@ // mount
			FSVolumeBlockRead ok! pfdbe! inode!

			if (ok@)
				mount@ AFSINodeAllocationUnlock

				return
			end
		end

		if (inode@ AFSINode_type + @ 0 ==)
			// found a free inode! reserve it and return
			
			-1 inode@ AFSINode_type + !

			mount@ AFSINodeAllocationUnlock

			return
		end

		AFSINode_SIZEOF inode +=
		1 inum +=
	end

	STATUS_END_OF_DISK ok!

	pfdbe@ MmEvictablePageDereference drop

	mount@ AFSINodeAllocationUnlock
end

fn (IODispatchPokeFunction) AFSPoke { poketype fcb -- }
	if (poketype@ IOPOKE_WRITE ==)
		fcb@ AFSINodeUpdateModificationTime
	end
end

fn (IODispatchSetSecurityFunction) AFSSetSecurity { uid gid permissions object -- ok }
	auto fcb
	object@ IOFileGetFileControlBlock fcb!

	auto fcbdata
	fcb@ IOFileControlBlockGetContext fcbdata!

	auto mount
	fcb@ IOFileControlBlockGetMount mount!

	if (mount@ IOMountGetFlags OSMOUNT_READONLY &)
		STATUS_READONLY_FILESYSTEM ok!
		return
	end

	if (gid@ -1 ~=)
		STATUS_NOT_SUPPORTED ok!
		return
	end

	if (uid@ -1 ~=)
		uid@ fcbdata@ AFSFCBData_UID + !
	end

	if (permissions@ -1 ~=)
		permissions@ fcbdata@ AFSFCBData_Permissions + !
	end

	fcb@ AFSINodeUpdate

	0 ok!
end

fn AFSINodeUpdateModificationTime { fcb -- }
	auto time
	KeTime_SIZEOF alloc time!

	time@ HALRTCQuery

	if (fcb@ IOFileControlBlockGetModifyTime KeTime_SecPart + @ time@ KeTime_SecPart + @ ~=)
		time@ fcb@ IOFileControlBlockSetModifyTime
		fcb@ AFSINodeUpdate
	end
end

fn AFSINodeUpdate { fcb -- }
	auto mount
	fcb@ IOFileControlBlockGetMount mount!

	auto fcbdata
	fcb@ IOFileControlBlockGetContext fcbdata!

	auto inum
	fcbdata@ AFSFCBData_INum + @ inum!

	auto ok

	auto pfdbe
	auto inode

	KeThreadCurrent@ KeThreadIgnoreKill drop

	inum@ // inum
	mount@ // mount
	1 // urgent
	AFSINodeRead ok! pfdbe! inode!

	if (ok@)
		ok@ "AFSINodeUpdate: couldn't read inode (%i)\n" KeCrash
	end

	fcb@ IOFileControlBlockGetSize inode@ AFSINode_bytesize + !
	fcbdata@ AFSFCBData_FirstFATLink + @ inode@ AFSINode_startblock + !
	fcbdata@ AFSFCBData_IParent + @ inode@ AFSINode_iparent + !
	fcbdata@ AFSFCBData_Permissions + @ inode@ AFSINode_permissions + !
	fcbdata@ AFSFCBData_UID + @ inode@ AFSINode_uid + !
	fcb@ IOFileControlBlockGetModifyTime KeTime_SecPart + @ inode@ AFSINode_timestamp + !

	pfdbe@ // pfdbe
	mount@ // mount
	FSVolumeBlockWrite ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "AFSINodeUpdate: couldn't dirty block (%i)\n" KeCrash
		end
	end

	pfdbe@ MmEvictablePageDereference drop

	KeThreadCurrent@ KeThreadAcceptKill drop
end

fn AFSFCBCacheTryLockBucket { bucket mount -- ok }
	if (DEBUGCHECKS)
		if (bucket@ AFSFCBBUCKETS >=)
			"AFSFCBCacheTryLockBucket: bucket >= AFSFCBBUCKETS\n" KeCrash
		end
	end

	KERNELMODE // waitmode
	0 // alertable
	0 // timeout
	mount@ IOMountGetContext AFSData_FCBCacheMutexes + bucket@ KeMutex_SIZEOF * + // object
	KeThreadWaitForObject ok!
end

fn AFSFCBCacheLockBucket { bucket mount -- ok }
	if (DEBUGCHECKS)
		if (bucket@ AFSFCBBUCKETS >=)
			"AFSFCBCacheLockBucket: bucket >= AFSFCBBUCKETS\n" KeCrash
		end
	end

	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	mount@ IOMountGetContext AFSData_FCBCacheMutexes + bucket@ KeMutex_SIZEOF * + // object
	KeThreadWaitForObject ok!
end

fn AFSFCBCacheLockBucketUnalertable { bucket mount -- }
	if (DEBUGCHECKS)
		if (bucket@ AFSFCBBUCKETS >=)
			"AFSFCBCacheLockBucketUnalertable: bucket >= AFSFCBBUCKETS\n" KeCrash
		end
	end

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	mount@ IOMountGetContext AFSData_FCBCacheMutexes + bucket@ KeMutex_SIZEOF * + // object
	KeThreadWaitForObject drop
end

fn AFSFCBCacheUnlockBucket { bucket mount -- }
	if (DEBUGCHECKS)
		if (bucket@ AFSFCBBUCKETS >=)
			"AFSFCBCacheUnlockBucket: bucket >= AFSFCBBUCKETS\n" KeCrash
		end
	end

	0 // abandon
	mount@ IOMountGetContext AFSData_FCBCacheMutexes + bucket@ KeMutex_SIZEOF * + // mutex
	KeMutexRelease drop
end

fn AFSFCBRemove { fcb buckethead -- }
	// remove from hash list.
	// assumes fcb cache bucket is locked.

	auto fcbdata
	fcb@ IOFileControlBlockGetContext fcbdata!

	auto n
	fcbdata@ AFSFCBData_NextFCB + @ n!

	if (n@)
		fcbdata@ AFSFCBData_PrevFCB + @ n@ IOFileControlBlockGetContext AFSFCBData_PrevFCB + !
	end else // no next means we were the tail
		fcbdata@ AFSFCBData_PrevFCB + @ buckethead@ 4 + !
	end

	fcbdata@ AFSFCBData_PrevFCB + @ n!

	if (n@)
		fcbdata@ AFSFCBData_NextFCB + @ n@ IOFileControlBlockGetContext AFSFCBData_NextFCB + !
	end else // no prev means we were the head
		fcbdata@ AFSFCBData_NextFCB + @ buckethead@!
	end
end

fn AFSFCBInsert { fcb buckethead -- }
	// insert into hash list on the recently-used end.
	// assumes fcb cache bucket is locked.

	auto fcbdata
	fcb@ IOFileControlBlockGetContext fcbdata!

	auto n
	buckethead@@ n!

	0 fcbdata@ AFSFCBData_PrevFCB + !
	n@ fcbdata@ AFSFCBData_NextFCB + !

	if (n@)
		fcb@ n@ IOFileControlBlockGetContext AFSFCBData_PrevFCB + !
	end else // no head, set tail
		fcb@ buckethead@ 4 + !
	end

	fcb@ buckethead@!
end

fn AFSMountReference { mount -- oldcount }
	auto afsdata
	mount@ IOMountGetContext afsdata!

	auto rs
	HALCPUInterruptDisable rs!

	afsdata@ AFSData_FCBRefTotal + @ oldcount!

	oldcount@ 1 + afsdata@ AFSData_FCBRefTotal + !

	rs@ HALCPUInterruptRestore
end

fn AFSMountDereference { mount -- oldcount }
	auto afsdata
	mount@ IOMountGetContext afsdata!

	auto rs
	HALCPUInterruptDisable rs!

	afsdata@ AFSData_FCBRefTotal + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"AFSMountDereference: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - afsdata@ AFSData_FCBRefTotal + !

	rs@ HALCPUInterruptRestore
end

fn AFSFCBCacheFlush { destroy mount -- ok }
	auto afsdata
	mount@ IOMountGetContext afsdata!

	// iterate each bucket from 0 to AFSFCBBUCKETS-1.
	// for each bucket, flush or destroy the FCB.

	KeThreadCurrent@ KeThreadIgnoreKill drop

	auto i
	0 i!

	while (i@ AFSFCBBUCKETS <)
		i@ // bucket
		mount@ // mount
		AFSFCBCacheLockBucket ok!

		if (ok@)
			ok@ "AFSFCBCacheFlush: lock failed even though kill ignored (%i)\n" KeCrash
		end

		auto buckethead
		afsdata@ AFSData_FCBBucketListHeads + i@ 3 << + buckethead!

		auto fcb
		buckethead@@ fcb!

		while (fcb@)
			auto fcbdata
			fcb@ IOFileControlBlockGetContext fcbdata!

			auto nextfcb
			fcbdata@ AFSFCBData_NextFCB + @ nextfcb!

			if (destroy@)
				if (DEBUGCHECKS)
					if (fcb@ IOFileControlBlockGetReferences)
						"AFSFCBCacheFlush: destroy: fcb refcount > 0\n" KeCrash
					end
				end

				fcb@ IOFileControlBlockReference drop

				1 // writeout
				fcb@ // fcb
				IOFileControlBlockDelete ok!

				if (ok@)
					break
				end

				fcbdata@ MmFree
			end else
				fcb@ IOFileControlBlockGetCacheInfoBlock // cacheblock
				IOCacheInfoBlockFlush ok!

				if (ok@)
					break
				end
			end

			nextfcb@ fcb!
		end

		i@ // bucket
		mount@ // mount
		AFSFCBCacheUnlockBucket

		if (ok@)
			break
		end

		1 i +=
	end

	KeThreadCurrent@ KeThreadAcceptKill drop
end

fn (IODispatchDeleteFunction) AFSDelete { fcb -- }
	// called by IOFileControlBlockDereference when it is removing the last
	// reference from the FCB and the DeleteLastReference flag is set.

	// must clean up any internal structures relating to the FCB and free any
	// on-disk resources associated with it as well.

	auto mount
	fcb@ IOFileControlBlockGetMount mount!

	auto afsdata
	mount@ IOMountGetContext afsdata!

	auto fcbdata
	fcb@ IOFileControlBlockGetContext fcbdata!

	auto bucket
	fcbdata@ AFSFCBData_INum + @ AFSFCBMASK & bucket!

	auto buckethead
	afsdata@ AFSData_FCBBucketListHeads + bucket@ 3 << + buckethead!

	// free disk blocks

	0 // newsize
	0 // zero
	0 // flags
	fcb@ // fcb
	AFSTruncate ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "AFSDelete: couldn't truncate FCB (%i)\n" KeCrash
		end
	end

	bucket@ // bucket
	mount@ // mount
	AFSFCBCacheLockBucket drop

	fcb@ // fcb
	buckethead@ // buckethead
	AFSFCBRemove

	bucket@ // bucket
	mount@ // mount
	AFSFCBCacheUnlockBucket

	auto ok
	auto pfdbe
	auto inode

	fcbdata@ AFSFCBData_INum + @ // inum
	mount@ // mount
	1 // urgent
	AFSINodeRead ok! pfdbe! inode!

	if (ok@)
		ok@ "AFSDelete: couldn't read inode (%i)\n" KeCrash
	end

	// mark inode freed

	0 inode@ AFSINode_type + !

	pfdbe@ // pfdbe
	mount@ // mount
	FSVolumeBlockWrite ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "AFSDelete: couldn't dirty block (%i)\n" KeCrash
		end
	end

	pfdbe@ MmEvictablePageDereference drop

	fcbdata@ MmFree
end

fn (IODispatchReclaimFCBFunction) AFSFCBReclaim { fcb -- reclaimed }
	// called by the IO subsystem when it decides it wants to reuse an FCB
	// that currently represents one of our (the AisixFS driver's) inodes.

	// we have to clean up our internal structures relating to this FCB.
	// duplicates some ideas with AFSDelete that are too annoying/too slow to
	// generalize.

	// entered at IPLDPC to give us a chance to sort out our synchronization
	// affairs. must LEAVE at IPLDPC as well.

	auto mount
	fcb@ IOFileControlBlockGetMount mount!

	auto afsdata
	mount@ IOMountGetContext afsdata!

	auto fcbdata
	fcb@ IOFileControlBlockGetContext fcbdata!

	auto bucket
	fcbdata@ AFSFCBData_INum + @ AFSFCBMASK & bucket!

	auto buckethead
	afsdata@ AFSData_FCBBucketListHeads + bucket@ 3 << + buckethead!

	auto locked
	bucket@ // bucket
	mount@ // mount
	AFSFCBCacheTryLockBucket locked!

	if (locked@ ~~)
		0 reclaimed!
		return
	end

	IPLLOW KeIPLLower

	// we must flush any dirty cache data while holding the cache bucket
	// mutex.

	auto ok
	fcb@ IOFileControlBlockFlush ok!

	if (ok@)
		0 reclaimed!

		IPLDPC KeIPLRaise drop

		bucket@ // bucket
		mount@ // mount
		AFSFCBCacheUnlockBucket

		return
	end

	1 reclaimed!

	fcb@ // fcb
	buckethead@ // buckethead
	AFSFCBRemove

	fcbdata@ MmFree

	IPLDPC KeIPLRaise drop

	bucket@ // bucket
	mount@ // mount
	AFSFCBCacheUnlockBucket
end

fn AFSFCBDelete { fcb -- }
	auto mount
	fcb@ IOFileControlBlockGetMount mount!

	auto afsdata
	mount@ IOMountGetContext afsdata!

	auto fcbdata
	fcb@ IOFileControlBlockGetContext fcbdata!

	auto bucket
	fcbdata@ AFSFCBData_INum + @ AFSFCBMASK & bucket!

	auto buckethead
	afsdata@ AFSData_FCBBucketListHeads + bucket@ 3 << + buckethead!

	KeThreadCurrent@ KeThreadIgnoreKill drop

	bucket@ // bucket
	mount@ // mount
	AFSFCBCacheLockBucket drop

	fcb@ // fcb
	buckethead@ // buckethead
	AFSFCBRemove

	bucket@ // bucket
	mount@ // mount
	AFSFCBCacheUnlockBucket

	KeThreadCurrent@ KeThreadAcceptKill drop

	fcbdata@ MmFree
	fcb@ MmFree
end

fn AFSFCBRead { inum mount -- fcb ok }
	auto afsdata
	mount@ IOMountGetContext afsdata!

	if (inum@ 0 ==)
		"AFSFCBRead: inum == 0\n" KeCrash
	end

	if (inum@ afsdata@ AFSData_ICount + @ >=)
		"AFSFCBRead: inum >= icount\n" KeCrash
	end

	auto time
	KeTime_SIZEOF alloc time!

	0 time@ KeTime_MsPart + !

	auto bucket
	inum@ AFSFCBMASK & bucket!

	bucket@ // bucket
	mount@ // mount
	AFSFCBCacheLockBucket ok!

	if (ok@)
		return
	end

	auto buckethead
	afsdata@ AFSData_FCBBucketListHeads + bucket@ 3 << + buckethead!

	auto buckettail
	afsdata@ AFSData_FCBBucketListHeads + bucket@ 3 << + 4 + buckettail!

	buckethead@@ fcb!

	while (fcb@)
		if (fcb@ IOFileControlBlockGetContext AFSFCBData_INum + @ inum@ ==)
			break
		end

		fcb@ IOFileControlBlockGetContext AFSFCBData_NextFCB + @ fcb!
	end

	auto pfdbe
	auto fcbdata
	auto rs

	if (fcb@ ~~)
		// didn't find, need to allocate and read in the inode.

		auto ptr
		inum@ // inum
		mount@ // mount
		0 // urgent
		AFSINodeRead ok! pfdbe! ptr!

		if (ok@)
			bucket@ // bucket
			mount@ // mount
			AFSFCBCacheUnlockBucket

			return
		end

		auto filetype

		if (ptr@ AFSINode_type + @ 1 ==)
			OSFILETYPE_FILE filetype!
		end elseif (ptr@ AFSINode_type + @ 2 ==)
			OSFILETYPE_DIRECTORY filetype!
		end else
			ptr@ AFSINode_type + @
			inum@
			"AFSFCBRead: i=%d weird inode type %d\n" KeCrash
		end

		DriverAFSDispatch // dispatchtable
		mount@ // devobj
		filetype@ // filetype
		0 // flags
		IOFileControlBlockAllocate ok! fcb!

		if (ok@)
			bucket@ // bucket
			mount@ // mount
			AFSFCBCacheUnlockBucket

			pfdbe@ MmEvictablePageDereference drop

			return
		end

		// allocate a new fcbdata

		AFSFCBData_SIZEOF // bytes
		'AFCX' // tag
		0 // flags
		MmAllocWithTag ok! fcbdata!

		if (ok@)
			-1 // writeout
			fcb@ // fcb
			IOFileControlBlockDelete drop

			bucket@ // bucket
			mount@ // mount
			AFSFCBCacheUnlockBucket

			pfdbe@ MmEvictablePageDereference drop

			return
		end

		0 fcbdata@ AFSFCBData_NextFCB + !
		0 fcbdata@ AFSFCBData_PrevFCB + !

		inum@ fcbdata@ AFSFCBData_INum + !

		ptr@ AFSINode_startblock + @ fcbdata@ AFSFCBData_FirstFATLink + !
		0 fcbdata@ AFSFCBData_GID + !
		ptr@ AFSINode_uid + @ fcbdata@ AFSFCBData_UID + !
		ptr@ AFSINode_permissions + @ fcbdata@ AFSFCBData_Permissions + !
		ptr@ AFSINode_iparent + @ fcbdata@ AFSFCBData_IParent + !

		0 fcbdata@ AFSFCBData_LastFATLinkBlkOff + !
		ptr@ AFSINode_startblock + @ fcbdata@ AFSFCBData_LastFATLinkValue + !

		fcbdata@ fcb@ IOFileControlBlockSetContext

		ptr@ AFSINode_bytesize + @ fcb@ IOFileControlBlockSetSize

		ptr@ AFSINode_timestamp + @ time@ KeTime_SecPart + !
		time@ fcb@ IOFileControlBlockSetAccessTime
		time@ fcb@ IOFileControlBlockSetModifyTime
		time@ fcb@ IOFileControlBlockSetChangeTime

		pfdbe@ MmEvictablePageDereference drop

		fcb@ // fcb
		buckethead@ // buckethead
		AFSFCBInsert

		fcb@ IOFileControlBlockReference drop

		// fcb@ "->0x%08x " Printf
	end else
		// found the FCB, it was in the cache already!

		// remove from hash list and reinsert on the recently-used end

		if (fcb@ buckethead@@ ~=)
			fcb@ // fcb
			buckethead@ // buckethead
			AFSFCBRemove

			fcb@ // fcb
			buckethead@ // buckethead
			AFSFCBInsert
		end

		fcb@ IOFileControlBlockReference drop

		if (DEBUGCHECKS)
			if (fcb@ IOFileControlBlockIsDoomed)
				"AFSFCBRead: grabbed doomed inode\n" KeCrash
			end
		end
	end

	bucket@ // bucket
	mount@ // mount
	AFSFCBCacheUnlockBucket
end