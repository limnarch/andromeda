//
// Implements directory management for the AisixFS driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "AisixFS.h"

fn AFSDirectoryAllocateEntry { fcb -- dirent pfdbe ok }
	// FCB is locked by caller

	if (DEBUGCHECKS)
		if (fcb@ IOFileControlBlockGetType OSFILETYPE_DIRECTORY ~=)
			// should have been caught by the IO system code
			"AFSDirectoryAllocateEntry: not a directory\n" KeCrash
		end
	end

	auto cacheblock
	fcb@ IOFileControlBlockGetCacheInfoBlock cacheblock!

	if (DEBUGCHECKS)
		if (cacheblock@ ~~)
			"AFSDirectoryAllocateEntry: no cacheblock\n" KeCrash
		end
	end

	auto mount
	fcb@ IOFileControlBlockGetMount mount!

	auto byteoff
	0 byteoff!

	auto bytesize
	fcb@ IOFileControlBlockGetSize bytesize!

	auto pageno
	byteoff@ PAGESHIFT >> pageno!

	auto curpageno
	-1 curpageno!

	0 pfdbe!

	while (byteoff@ bytesize@ <)
		if (pageno@ curpageno@ ~=)
			// must read in a new page

			if (pfdbe@)
				pfdbe@ MmEvictablePageDereference drop
			end

			0 // flags
			0 // kflags
			byteoff@ PAGENUMBERMASK & // offset
			fcb@ // fcb
			IOCachePageRead ok! pfdbe! dirent!

			if (ok@)
				return
			end

			byteoff@ PAGEOFFSETMASK & dirent +=

			pageno@ curpageno!
		end

		if (dirent@ AFSDirEnt_INum + @ ~~)
			// found a free dirent
			0 ok!
			return
		end

		AFSDirEnt_SIZEOF dirent +=
		AFSDirEnt_SIZEOF byteoff +=
		byteoff@ PAGESHIFT >> pageno!
	end

	if (pfdbe@)
		pfdbe@ MmEvictablePageDereference drop
	end

	// no existing free entries -- try to allocate a new one.

	bytesize@ AFSDirEnt_SIZEOF + // newsize
	1 // zero
	fcb@ // fcb
	AFSTruncate ok!

	if (ok@)
		return
	end

	0 // flags
	0 // kflags
	bytesize@ PAGENUMBERMASK & // offset
	fcb@ // fcb
	IOCachePageRead ok! pfdbe! dirent!

	if (ok@)
		return
	end

	bytesize@ PAGEOFFSETMASK & dirent +=

	if (DEBUGCHECKS)
		if (dirent@ AFSDirEnt_INum + @)
			"AFSDirectoryAllocateEntry: fresh dirent had inum\n" KeCrash
		end
	end
end

fn AFSDirectoryGetEntry { seek afsdirent fcb -- nextseek ok }
	// FCB is locked by caller

	if (DEBUGCHECKS)
		if (fcb@ IOFileControlBlockGetType OSFILETYPE_DIRECTORY ~=)
			// should have been caught by the IO system code
			"AFSDirectoryGetEntry: not a directory\n" KeCrash
		end
	end

	auto cacheblock
	fcb@ IOFileControlBlockGetCacheInfoBlock cacheblock!

	if (DEBUGCHECKS)
		if (cacheblock@ ~~)
			"AFSDirectoryGetEntry: no cacheblock\n" KeCrash
		end
	end

	auto mount
	fcb@ IOFileControlBlockGetMount mount!

	auto byteoff
	seek@ AFSDirEnt_SIZEOF * byteoff!

	auto bytesize
	fcb@ IOFileControlBlockGetSize bytesize!

	auto pageno
	byteoff@ PAGESHIFT >> pageno!

	auto curpageno
	-1 curpageno!

	auto pfdbe
	0 pfdbe!

	auto data

	while (byteoff@ bytesize@ <)
		if (pageno@ curpageno@ ~=)
			// must read in a new page

			if (pfdbe@)
				pfdbe@ MmEvictablePageDereference drop
			end

			0 // flags
			0 // kflags
			byteoff@ PAGENUMBERMASK & // offset
			fcb@ // fcb
			IOCachePageRead ok! pfdbe! data!

			if (ok@)
				return
			end

			byteoff@ PAGEOFFSETMASK & data +=

			pageno@ curpageno!
		end

		if (data@ AFSDirEnt_INum + @)
			// found a dirent

			afsdirent@ AFSDirEnt_name + // dest
			data@ AFSDirEnt_name + // src
			59 // max
			strncpy

			data@ AFSDirEnt_INum + @ afsdirent@ AFSDirEnt_INum + !

			pfdbe@ MmEvictablePageDereference drop

			0 ok!

			seek@ 1 + nextseek!

			return
		end

		AFSDirEnt_SIZEOF data +=
		AFSDirEnt_SIZEOF byteoff +=
		byteoff@ PAGESHIFT >> pageno!
		1 seek +=
	end

	if (pfdbe@)
		pfdbe@ MmEvictablePageDereference drop
	end

	seek@ nextseek!
	STATUS_IO_END_OF_FILE ok!
end

fn (IODispatchReadDirectoryFunction) AFSReadDirectory { seek dirent fcb -- nextseek ok }
	fcb@ IOFileControlBlockLockShared ok!

	if (ok@)
		return
	end

	auto afsdirent
	AFSDirEnt_SIZEOF alloc afsdirent!

	seek@ // seek
	afsdirent@ // afsdirent
	fcb@ // fcb
	AFSDirectoryGetEntry ok! nextseek!

	fcb@ IOFileControlBlockUnlock

	if (ok@)
		return
	end

	dirent@ OSDirectoryEntry_Name + // dest
	afsdirent@ AFSDirEnt_name + // src
	63 // max
	strncpy
end

fn (IODispatchUnlinkFunction) AFSUnlink { name dirfcb -- ok }
	name@ AFSVerifyName ok!

	if (ok@)
		return
	end

	STATUS_NOT_IMPLEMENTED ok!
end