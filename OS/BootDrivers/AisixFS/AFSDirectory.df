//
// Implements directory management for the AisixFS driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "<inc>/ViewCache.h"

#include "AisixFS.h"

fn AFSDirectoryAllocateEntry { fcb -- dirent bcb ok }
	fnsection "PAGE$text"

	// FCB is locked by caller

	if (DEBUGCHECKS)
		if (fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FileType + @ OSFILETYPE_DIRECTORY ~=)
			// should have been caught by the IO system code
			"AFSDirectoryAllocateEntry: not a directory\n" KeCrash
		end
	end

	auto mount
	fcb@ FSFileControlBlockGetMount mount!

	auto byteoff
	0 byteoff!

	auto bytesize
	fcb@ IOFileControlBlock_SizeInBytes + @ bytesize!

	auto pageno
	byteoff@ FILEVIEWSHIFT >> pageno!

	auto curpageno
	-1 curpageno!

	auto found

	0 bcb!

	while (byteoff@ bytesize@ <)
		if (pageno@ curpageno@ ~=)
			// must read in a new page

			if (bcb@)
				bcb@ VcBufferDecrementMapCount drop
			end

			byteoff@ FILEVIEWNUMBERMASK & // offset
			fcb@ // fcb
			VcFileControlBlockMap ok! bcb! dirent!

			if (ok@)
				return
			end

			byteoff@ FILEVIEWOFFSETMASK & dirent +=

			pageno@ curpageno!
		end

		if (dirent@ AFSDirEnt_INum + @ ~~)
			// found a free dirent
			0 ok!
			return
		end

		AFSDirEnt_SIZEOF dirent +=
		AFSDirEnt_SIZEOF byteoff +=
		byteoff@ FILEVIEWSHIFT >> pageno!
	end

	if (bcb@)
		bcb@ VcBufferDecrementMapCount drop
	end

	// no existing free entries -- try to allocate a new one.

	bytesize@ AFSDirEnt_SIZEOF + // newsize
	1 // zero
	0 // flags
	fcb@ // fcb
	AFSTruncate ok!

	if (ok@)
		return
	end

	bytesize@ FILEVIEWNUMBERMASK & // offset
	fcb@ // fcb
	VcFileControlBlockMap ok! bcb! dirent!

	if (ok@)
		return
	end

	bytesize@ FILEVIEWOFFSETMASK & dirent +=

	if (DEBUGCHECKS)
		if (dirent@ AFSDirEnt_INum + @)
			"AFSDirectoryAllocateEntry: fresh dirent had inum\n" KeCrash
		end
	end
end

fn AFSDirectoryGetEntry { seek afsdirent fcb -- nextseek ok }
	fnsection "PAGE$text"

	// FCB is locked by caller

	if (DEBUGCHECKS)
		if (fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FileType + @ OSFILETYPE_DIRECTORY ~=)
			// should have been caught by the IO system code
			"AFSDirectoryGetEntry: not a directory\n" KeCrash
		end
	end

	auto mount
	fcb@ FSFileControlBlockGetMount mount!

	auto byteoff
	seek@ AFSDirEnt_SIZEOF * byteoff!

	auto bytesize
	fcb@ IOFileControlBlock_SizeInBytes + @ bytesize!

	auto pageno
	byteoff@ FILEVIEWSHIFT >> pageno!

	auto curpageno
	-1 curpageno!

	auto bcb
	0 bcb!

	auto data

	while (byteoff@ bytesize@ <)
		if (pageno@ curpageno@ ~=)
			// must read in a new page

			if (bcb@)
				bcb@ VcBufferDecrementMapCount drop
			end

			byteoff@ FILEVIEWNUMBERMASK & // offset
			fcb@ // fcb
			VcFileControlBlockMap ok! bcb! data!

			if (ok@)
				return
			end

			byteoff@ FILEVIEWOFFSETMASK & data +=

			pageno@ curpageno!
		end

		if (data@ AFSDirEnt_INum + @)
			// found a dirent

			afsdirent@ AFSDirEnt_name + // dest
			data@ AFSDirEnt_name + // src
			59 // max
			strncpy

			data@ AFSDirEnt_INum + @ afsdirent@ AFSDirEnt_INum + !

			bcb@ VcBufferDecrementMapCount drop

			0 ok!

			seek@ 1 + nextseek!

			return
		end

		AFSDirEnt_SIZEOF data +=
		AFSDirEnt_SIZEOF byteoff +=
		byteoff@ FILEVIEWSHIFT >> pageno!
		1 seek +=
	end

	if (bcb@)
		bcb@ VcBufferDecrementMapCount drop
	end

	seek@ nextseek!
	STATUS_END_OF_FILE ok!
end

fn (IODispatchReadDirectoryFunction) AFSReadDirectory { seek dirent fcb -- nextseek ok }
	fnsection "PAGE$text"

	if (fcb@ IOFileControlBlock_CacheInfoBlock + @ ~~)
		fcb@ IOFileControlBlockCacheCheck ok! drop

		if (ok@)
			return
		end
	end

	fcb@ IOFileControlBlockLockShared ok!

	if (ok@)
		return
	end

	auto afsdirent
	AFSDirEnt_SIZEOF alloc afsdirent!

	seek@ // seek
	afsdirent@ // afsdirent
	fcb@ // fcb
	AFSDirectoryGetEntry ok! nextseek!

	fcb@ IOFileControlBlockUnlock

	if (ok@)
		return
	end

	dirent@ OSDirectoryEntry_Name + // dest
	afsdirent@ AFSDirEnt_name + // src
	63 // max
	strncpy
end

fn AFSDirectoryFindEntry { name dirfcb -- dirent bcb ok }
	fnsection "PAGE$text"

	if (DEBUGCHECKS)
		if (dirfcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FileType + @ OSFILETYPE_DIRECTORY ~=)
			// should have been caught by the IO system code
			"AFSDirectoryFindEntry: not a directory\n" KeCrash
		end
	end

	auto mount
	dirfcb@ FSFileControlBlockGetMount mount!

	auto byteoff
	0 byteoff!

	auto bytesize
	dirfcb@ IOFileControlBlock_SizeInBytes + @ bytesize!

	auto pageno
	byteoff@ FILEVIEWSHIFT >> pageno!

	auto curpageno
	-1 curpageno!

	0 bcb!

	while (byteoff@ bytesize@ <)
		if (pageno@ curpageno@ ~=)
			// must read in a new page

			if (bcb@)
				bcb@ VcBufferDecrementMapCount drop
			end

			byteoff@ FILEVIEWNUMBERMASK & // offset
			dirfcb@ // fcb
			VcFileControlBlockMap ok! bcb! dirent!

			if (ok@)
				return
			end

			byteoff@ FILEVIEWOFFSETMASK & dirent +=

			pageno@ curpageno!
		end

		if (dirent@ AFSDirEnt_INum + @)
			if (name@ -1 ==)
				// just checking for any valid entry

				bcb@ VcBufferDecrementMapCount drop

				0 ok!

				return
			end

			if (dirent@ AFSDirEnt_name + name@ strcmp)
				// found it!

				0 ok!

				return
			end
		end

		AFSDirEnt_SIZEOF dirent +=
		AFSDirEnt_SIZEOF byteoff +=
		byteoff@ FILEVIEWSHIFT >> pageno!
	end

	if (bcb@)
		bcb@ VcBufferDecrementMapCount drop
	end

	STATUS_NOT_FOUND ok!
end

fn AFSRenameLock { mount -- ok }
	fnsection "PAGE$text"

	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	mount@ IOMount_Extension + @ AFSData_RenameMutex + // object
	KeThreadWaitForObject ok!
end

fn AFSRenameUnlock { mount -- }
	fnsection "PAGE$text"

	0 // abandon
	mount@ IOMount_Extension + @ AFSData_RenameMutex + // mutex
	KeMutexRelease drop
end

fn AFSDirectoryCheckForCycle { testfcb searchfcb mount -- ok }
	fnsection "PAGE$text"

	auto iparent

	auto fcbdata
	searchfcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

	0 iparent!

	searchfcb@ AFSFCBReference

	0 ok!

	while (searchfcb@ testfcb@ ~=)
		if (fcbdata@ AFSFCBData_IParent + @ iparent@ ==)
			// found the root directory. no cycles.
			searchfcb@ AFSFCBDereference

			return
		end

		fcbdata@ AFSFCBData_IParent + @ iparent!

		auto nextfcb
		0 // flags
		iparent@  // inum
		mount@ // mount
		AFSFCBRead ok! nextfcb!

		searchfcb@ AFSFCBDereference

		if (ok@)
			return
		end

		nextfcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!
		nextfcb@ searchfcb!
	end

	searchfcb@ AFSFCBDereference

	STATUS_FORBIDDEN_OPERATION ok!
end

fn (IODispatchUnlinkFunction) AFSUnlink { name dirfcb -- ok }
	fnsection "PAGE$text"

	if (dirfcb@ IOFileControlBlock_CacheInfoBlock + @ ~~)
		dirfcb@ IOFileControlBlockCacheCheck ok! drop

		if (ok@)
			return
		end
	end

	name@ AFSVerifyName ok!

	if (ok@)
		if (ok@ STATUS_ALREADY_EXISTS ==)
			STATUS_FORBIDDEN_OPERATION ok!
		end

		return
	end

	auto bcb
	auto dirent

	name@ // name
	dirfcb@ // dirfcb
	AFSDirectoryFindEntry ok! bcb! dirent!

	if (ok@)
		return
	end

	auto mount
	dirfcb@ FSFileControlBlockGetMount mount!

	auto fcb
	0 // flags
	dirent@ AFSDirEnt_INum + @  // inum
	mount@ // mount
	AFSFCBRead ok! fcb!

	if (ok@)
		bcb@ VcBufferDecrementMapCount drop

		return
	end

	auto fcbdata
	fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

	if (fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_Flags + @ IOFCBFLAG_SYSTEMFILE &)
		bcb@ VcBufferDecrementMapCount drop
		fcb@ AFSFCBDereference

		STATUS_FORBIDDEN_OPERATION ok!

		return
	end

	if (fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FileType + @ OSFILETYPE_DIRECTORY ==)
		if (fcbdata@ AFSFCBData_References + @ 1 >)
			// unlinking directories is forbidden if anyone could possibly
			// add new entries to it afterwards.

			bcb@ VcBufferDecrementMapCount drop
			fcb@ AFSFCBDereference

			STATUS_TRY_AGAIN_LATER ok!

			return
		end

		// we're unlinking a directory, ensure that it is empty first

		-1 // name
		fcb@ // dirfcb
		AFSDirectoryFindEntry ok! drop drop

		if (ok@ STATUS_NOT_FOUND ~=)
			bcb@ VcBufferDecrementMapCount drop
			fcb@ AFSFCBDereference

			if (ok@ ~~)
				STATUS_IS_A_DIRECTORY ok!
			end

			return
		end
	end

	// free the directory entry
	0 dirent@ AFSDirEnt_INum + !

	bcb@ VcBufferDirty
	bcb@ VcBufferDecrementMapCount drop

	AFSFILEFLAG_DELETE fcbdata@ AFSFCBData_Flags + |=

	fcb@ AFSFCBDereference

	0 ok!
end

fn (IODispatchRenameFunction) AFSRename { srcname srcfcb destname destfcb -- ok }
	fnsection "PAGE$text"

	if (srcfcb@ IOFileControlBlock_CacheInfoBlock + @ ~~)
		srcfcb@ IOFileControlBlockCacheCheck ok! drop

		if (ok@)
			return
		end
	end

	if (destfcb@ IOFileControlBlock_CacheInfoBlock + @ ~~)
		destfcb@ IOFileControlBlockCacheCheck ok! drop

		if (ok@)
			return
		end
	end

	auto mount
	srcfcb@ FSFileControlBlockGetMount mount!

	if (destfcb@ FSFileControlBlockGetMount mount@ ~=)
		STATUS_CROSS_VOLUME ok!
		return
	end

	srcname@ AFSVerifyName ok!

	if (ok@)
		if (ok@ STATUS_ALREADY_EXISTS ==)
			STATUS_FORBIDDEN_OPERATION ok!
		end

		return
	end

	destname@ AFSVerifyName ok!

	if (ok@)
		return
	end

	auto srcbcb
	auto srcdirent

	srcname@ // name
	srcfcb@ // dirfcb
	AFSDirectoryFindEntry ok! srcbcb! srcdirent!

	if (ok@)
		return
	end

	if (srcfcb@ destfcb@ ==)
		if (srcname@ destname@ strcmp)
			srcbcb@ VcBufferDecrementMapCount drop

			0 ok!

			return
		end
	end

	auto destbcb
	auto destdirent

	// check to make sure the desired name isn't present in the destination
	// directory.

	destname@ // destname
	destfcb@ // dirfcb
	AFSDirectoryFindEntry ok! destbcb! destdirent!

	if (ok@ STATUS_NOT_FOUND ~=)
		srcbcb@ VcBufferDecrementMapCount drop

		if (ok@ ~~)
			destbcb@ VcBufferDecrementMapCount drop

			STATUS_ALREADY_EXISTS ok!
		end

		return
	end

	auto filefcb
	0 // flags
	srcdirent@ AFSDirEnt_INum + @  // inum
	mount@ // mount
	AFSFCBRead ok! filefcb!

	if (ok@)
		srcbcb@ VcBufferDecrementMapCount drop

		return
	end

	auto renamelocked
	0 renamelocked!

	if (srcfcb@ destfcb@ ~=)
		auto filetype
		filefcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FileType + @ filetype!

		if (filetype@ OSFILETYPE_DIRECTORY ==)
			// make sure it won't create a cycle by walking from the
			// destination directory up to the root directory, and seeing if
			// the source appears along the way. if it does, this operation
			// would create a cycle.

			mount@ AFSRenameLock ok!

			if (ok@)
				srcbcb@ VcBufferDecrementMapCount drop
				filefcb@ AFSFCBDereference

				return
			end

			filefcb@ // testfcb
			destfcb@ // searchfcb
			mount@ // mount
			AFSDirectoryCheckForCycle ok!

			if (ok@)
				mount@ AFSRenameUnlock

				srcbcb@ VcBufferDecrementMapCount drop
				filefcb@ AFSFCBDereference

				return
			end

			1 renamelocked!
		end

		destfcb@ AFSDirectoryAllocateEntry ok! destbcb! destdirent!

		if (ok@)
			if (renamelocked@)
				mount@ AFSRenameUnlock
			end

			srcbcb@ VcBufferDecrementMapCount drop
			filefcb@ AFSFCBDereference

			return
		end

		// move the directory entry over by invalidating the old one and updating
		// the new one.

		srcdirent@ AFSDirEnt_INum + @ destdirent@ AFSDirEnt_INum + !
		0 srcdirent@ AFSDirEnt_INum + !
	end else
		srcdirent@ destdirent!
	end

	destdirent@ AFSDirEnt_name + // dest
	destname@ // src
	strcpy

	srcbcb@ VcBufferDirty

	if (srcfcb@ destfcb@ ~=)
		destbcb@ VcBufferDirty
		destbcb@ VcBufferDecrementMapCount drop
	end

	if (renamelocked@)
		auto fcbdata
		filefcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

		destfcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ AFSFCBData_INum + @ fcbdata@ AFSFCBData_IParent + !

		filefcb@ AFSINodeUpdate

		mount@ AFSRenameUnlock
	end

	srcbcb@ VcBufferDecrementMapCount drop
	filefcb@ AFSFCBDereference
end