//
// Implements the XRstation serial port driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"
#include "<ll>/OSDLL/OSConsoleControl.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALXRstationCitron.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<inc>/Console.h"

struct SerialPort
	4 PortCMD
	4 PortData
	KeDPC_SIZEOF DPC
endstruct

const SERIALA_PORTCMD   0x10
const SERIALA_PORTDATA  0x11
const SERIALA_INTERRUPT 4

const SERIALB_PORTCMD   0x12
const SERIALB_PORTDATA  0x13
const SERIALB_INTERRUPT 5

var SerialPortA 0
var SerialPortB 0

const SERIALCMDWRITE   1
const SERIALCMDREAD    2
const SERIALCMDINTR    3
const SERIALCMDINTROFF 4

rosection "INIT$text"

fn SerialCreate { name intn cmdport dataport -- deviceobject }
	fnsection "INIT$text"

	auto serialport

	SerialPort_SIZEOF // bytes
	'SrlP' // tag
	0 // flags
	MmAllocWithTag ok! serialport!

	if (ok@)
		ok@ name@ "SerialCreate: failed to create %s (%i)\n" KeCrash
	end

	auto ok

	serialport@ // context
	pointerof DriverSerialTX // txfunc
	pointerof DriverSerialFlush // flushfunc
	OSDUPLEXFLAG_CONSOLE // flags
	0 // pri
	0 // quotablock
	1 // permanent
	name@ // name
	ACCESS_OWNER_READ ACCESS_GROUP_READ | ACCESS_OWNER_WRITE | ACCESS_GROUP_WRITE | // permissions
	CoDuplexObjectCreate ok! drop deviceobject!

	if (ok@)
		ok@ name@ "SerialCreate: failed to create %s (%i)\n" KeCrash
	end

	cmdport@  serialport@ SerialPort_PortCMD + !
	dataport@ serialport@ SerialPort_PortData + !

	pointerof DriverSerialDPCFunction // function
	serialport@ SerialPort_DPC + // dpc
	KeDPCInitialize

	deviceobject@ IODeviceDirectoryInsert ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ name@ "SerialCreate: failed to insert %s (%i)\n" KeCrash
		end
	end
end

fn (FDriverInit) DriverInit { stage -- ok }
	fnsection "INIT$text"

	if (stage@ STAGE_THREAD ==)
		auto deviceobject

		"ttyS0" // name
		SERIALA_INTERRUPT // intn
		SERIALA_PORTCMD // cmdport
		SERIALA_PORTDATA // dataport
		SerialCreate deviceobject!

		deviceobject@ IODeviceGetExtension SerialPortA!

		"ttyS1" // name
		SERIALB_INTERRUPT // intn
		SERIALB_PORTCMD // cmdport
		SERIALB_PORTDATA // dataport
		SerialCreate deviceobject!

		deviceobject@ IODeviceGetExtension SerialPortB!

		// register interrupts and start interrupting

		pointerof DriverSerialInterrupt // function
		SERIALA_INTERRUPT // interrupt number
		IPLSERIAL // interrupt priority level
		HALInterruptRegister

		pointerof DriverSerialInterrupt // function
		SERIALB_INTERRUPT // interrupt number
		IPLSERIAL // interrupt priority level
		HALInterruptRegister

		SERIALCMDINTR SERIALA_PORTCMD HALXRstationCitronCommand
		SERIALCMDINTR SERIALB_PORTCMD HALXRstationCitronCommand
	end

	0 ok!
end

rosection "text"

fn (HALInterruptHandler) DriverSerialInterrupt { trapframe int -- }
	auto serialport

	if (int@ SERIALA_INTERRUPT ==)
		SerialPortA@ serialport!
	end elseif (int@ SERIALB_INTERRUPT ==)
		SerialPortB@ serialport!
	end elseif (DEBUGCHECKS)
		int@ "DriverSerialInterrupt: weird interrupt number %d\n" KeCrash
	end

	auto dpc
	serialport@ CoDuplexGetContext SerialPort_DPC + dpc!

	serialport@ // context1
	0 // context2
	DPCHIGHIMPORTANCE // importance
	dpc@ // dpc
	KeDPCEnqueue drop
end

fn (DPCFunction) DriverSerialDPCFunction { context1 context2 -- }
	auto serialport
	context1@ CoDuplexGetContext serialport!

	while (1)
		auto c
		serialport@ SerialPort_PortData + @ HALXRstationCitronIni c!

		if (c@ 0xFFFF ==)
			break
		end

		c@ // c
		context1@ // duplex
		CoDuplexInputCharacter drop
	end

	context1@ DriverSerialFlush
end

fn (CoDuplexFlushFunction) DriverSerialFlush { duplex -- }
	auto serialport
	duplex@ CoDuplexGetContext serialport!

	auto c

	while (1)
		if (serialport@ SerialPort_PortCMD + @ HALXRstationCitronInb)
			break
		end

		auto ok
		duplex@ CoDuplexReadTransmitCharacter ok! c!

		if (ok@)
			break
		end

		c@ serialport@ SerialPort_PortData + @ HALXRstationCitronOutb
	end
end

fn (CoDuplexTXFunction) DriverSerialTX { c duplex -- ok }
	auto serialport
	duplex@ CoDuplexGetContext serialport!

	if (serialport@ SerialPort_PortCMD + @ HALXRstationCitronInb)
		-1 ok!
		return
	end

	0 ok!

	c@ serialport@ SerialPort_PortData + @ HALXRstationCitronOutb
end