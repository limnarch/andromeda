//
// Implements the DKS disk driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALXRstationCitron.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

const DKSBLOCKSHIFT 9
const DKSBLOCKSIZE (1 DKSBLOCKSHIFT <<)
const DKSBLOCKOFFMASK (DKSBLOCKSIZE 1 -)

const DKS_REALDISK  1
const DKS_PARTITION 2

const DKSBUFFERPHYS 0xF8020000

var DKSBuffer 0

var DKSCompletedBitmap 0

struct Disk
	4 Type
	4 DKSID
	4 BlockOffset
	4 Blocks
	4 RequestListHead
	4 RequestListTail
endstruct

const DKSKFLAG_READ 0x80000000

const DKSMAXDISKID 7

table DKSRealDisks[(DKSMAXDISKID 1 +)]

const DKSPORTCMD 0x19
const DKSPORTA   0x1A
const DKSPORTB   0x1B

const DKSCMDSELECT  0x1
const DKSCMDREAD    0x2
const DKSCMDWRITE   0x3
const DKSCMDINFO    0x4
const DKSCMDPOLL    0x5
const DKSCMDINTR    0x6
const DKSCMDINTROFF 0x7

const DKSINTERRUPT  0x3

const DKSBLOCKTRANSFER 0x0

datasection "text"

table DriverDKSDispatch
	0                                    // open
	0                                    // close
	pointerof DriverDKSIOControl         // iocontrol
	0                                    // reserved
	0                                    // reserved
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // reserved
	0                                    // reserved
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reserved
	0                                    // reserved
	pointerof DriverDKSRead              // read
	pointerof DriverDKSWrite             // write
endtable

table DriverDKS
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"dks"                                // name
	pointerof DriverDKSDispatch          // dispatch table
	0                                    // flags

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

datasection "data"

buffer DKSDPC KeDPC_SIZEOF

fn private CreateDisk { name blocks type id offset -- dev }
	auto sizeinbytes
	blocks@ 512 * sizeinbytes!

	auto ok

	Disk_SIZEOF // extensionsize
	OSFILETYPE_BLOCKDEVICE // type
	name@ // name
	sizeinbytes@ // sizeinbytes
	DriverDKS // driver
	ACCESS_OWNER_READ ACCESS_OWNER_WRITE | ACCESS_GROUP_READ | ACCESS_GROUP_WRITE | // permissions
	IODeviceCreate ok! dev!

	if (ok@)
		ok@ "DKSDriverInit: failed to create device object (%i)\n" KeCrash
	end

	9 dev@ IODevice_BlockLog + ! // 1<<9 = 512

	auto disk
	dev@ IODevice_Extension + @ disk!

	type@ disk@ Disk_Type + !
	id@ disk@ Disk_DKSID + !
	offset@ disk@ Disk_BlockOffset + !
	blocks@ disk@ Disk_Blocks + !
	0 disk@ Disk_RequestListHead + !
	0 disk@ Disk_RequestListTail + !

	if (type@ DKS_REALDISK ==)
		disk@ [id@]DKSRealDisks!
	end
end

fn (FDriverInit) DriverInitDKS { stage -- ok }
	if (stage@ STAGE_THREAD ==)
		MMIO_NOCACHE // cached
		512 8 * // length
		DKSBUFFERPHYS // phyaddr
		MmIORegionMap ok! DKSBuffer!

		if (ok@)
			"DKSDriverInit: failed to map buffer (%i)\n" KeCrash
		end

		pointerof DriverDKSDPCFunction // function
		DKSDPC // dpc
		KeDPCInitialize

		// detect and register disks

		auto diskid
		0 diskid!

		auto namebuf
		64 alloc namebuf!

		namebuf@ // dest
		"dks" // src
		strcpy

		// clear completion bitmap
		DKSCMDINFO DKSPORTCMD HALXRstationCitronCommand

		pointerof DriverDKSInterrupt // function
		DKSINTERRUPT // interrupt number
		IPLDISK // interrupt priority level
		HALInterruptRegister

		DKSCMDINTR DKSPORTCMD HALXRstationCitronCommand

		auto dev

		while (diskid@ DKSMAXDISKID <=)
			auto present
			auto blocks

			diskid@ DKSPORTA HALXRstationCitronOutl

			DKSCMDPOLL DKSPORTCMD HALXRstationCitronCommand

			DKSPORTA HALXRstationCitronInl present!
			DKSPORTB HALXRstationCitronInl blocks!

			if (present@ 1 & ~~)
				1 diskid +=
				continue
			end

			if (blocks@ 8388608 >=)
				namebuf@
				"%s: disk is >=4GB; this is not supported! skipping.\n" "DKSDriverInit" HALLog

				1 diskid +=
				continue
			end

			// we have a disk at this ID

			diskid@ // n
			namebuf@ 3 + // buf
			itoa

			blocks@ namebuf@ diskid@ "ID %d: NAME=%s BLOCKSZ=512 BLOCKS=%d\n" "DKSDriverInit" HALLog

			auto sizeinbytes
			blocks@ 512 * sizeinbytes!

			namebuf@ // name
			blocks@ // blocks
			DKS_REALDISK // type
			diskid@ // id
			0 // offset
			CreateDisk dev!

			auto partitiontable
			dev@ IOPartitionTableRead ok! partitiontable!

			if (ok@ 0 ==)
				auto pcount
				partitiontable@ IOPartitionTable_PartitionCount + @ pcount!

				auto pte
				partitiontable@ IOPartitionTable_SIZEOF + pte!

				namebuf@ 4 + // dest
				"s" // src
				strcpy

				while (pcount@)
					pte@ IOPartitionEntry_ID + @ // n
					namebuf@ 5 + // buf
					itoa

					pte@ IOPartitionEntry_SizeInBlocks + @ blocks!

					namebuf@ // name
					blocks@ // blocks
					DKS_PARTITION // type
					diskid@ // id
					pte@ IOPartitionEntry_BlockOffset + @ // offset
					CreateDisk dev!

					IOPartitionEntry_SIZEOF pte +=
					1 pcount -=
				end

				partitiontable@ MmFree
			end

			1 diskid +=
		end
	end

	0 ok!
end

fn DKSComplete { id -- }
	auto disk
	[id@]DKSRealDisks@ disk!

	if (DEBUGCHECKS)
		if (disk@ ~~)
			"DriverDKSDPCFunction: no disk\n" KeCrash
		end
	end

	auto iop
	disk@ Disk_RequestListHead + @ iop!

	if (DEBUGCHECKS)
		if (iop@ ~~)
			"DriverDKSDPCFunction: no request\n" KeCrash
		end
	end

	auto iopl
	iop@ IOPacketCurrentLocation iopl!

	if (iopl@ IOPacketLocation_FunctionCodeB + gb IODISPATCH_READ ==)
		iopl@ IOPacketLocationMappedBuffer iopl@ IOPacketLocation_Context + @ + // dest
		DKSBuffer@ id@ DKSBLOCKSHIFT << + // src
		DKSBLOCKSIZE // size
		memcpy
	end

	DKSBLOCKSIZE iopl@ IOPacketLocation_Offset + +=
	DKSBLOCKSIZE iopl@ IOPacketLocation_Context + +=

	if (iopl@ IOPacketLocation_Context + @
		iopl@ IOPacketLocation_Length + @ ==)
		// complete, start next one

		auto niop
		iop@ IOPacketHeader_DeviceQueueNext + @ niop!

		if (iopl@ IOPacketLocation_FunctionCodeB + gb IODISPATCH_READ ==)
			iopl@ IOPacketLocation_OffsetInMDL + @ // offset
			iopl@ IOPacketLocation_Length + @ // length
			0 // write
			0 // dma
			iop@ IOPacketHeader_MDL + @ // mdl
			MmMDLFlush
		end

		0 // status
		IOBOOSTDISK // priboost
		iop@ // iop
		IOPacketComplete

		niop@ iop!

		iop@ disk@ Disk_RequestListHead + !

		if (iop@ ~~)
			0 disk@ Disk_RequestListTail + !
			return
		end else
			iop@ IOPacketCurrentLocation iopl!
		end
	end

	auto rs

	// start next block transfer

	if (iopl@ IOPacketLocation_FunctionCodeB + gb IODISPATCH_READ ==)
		HALCPUInterruptDisable rs!

		id@ DKSPORTA HALXRstationCitronOutl
		DKSCMDSELECT DKSPORTCMD HALXRstationCitronCommandASyncIdle

		iopl@ IOPacketLocation_Offset + @ DKSBLOCKSHIFT >> DKSPORTA HALXRstationCitronOutl
		DKSCMDREAD DKSPORTCMD HALXRstationCitronCommandASyncIdle

		rs@ HALCPUInterruptRestore

		return
	end else
		DKSBuffer@ id@ DKSBLOCKSHIFT << + // dest
		iopl@ IOPacketLocationMappedBuffer iopl@ IOPacketLocation_Context + @ + // src
		DKSBLOCKSIZE // size
		memcpy

		HALCPUInterruptDisable rs!

		id@ DKSPORTA HALXRstationCitronOutl
		DKSCMDSELECT DKSPORTCMD HALXRstationCitronCommandASyncIdle

		iopl@ IOPacketLocation_Offset + @ DKSBLOCKSHIFT >> DKSPORTA HALXRstationCitronOutl
		DKSCMDWRITE DKSPORTCMD HALXRstationCitronCommandASyncIdle

		rs@ HALCPUInterruptRestore

		return
	end
end

fn (KeDPCFunction) DriverDKSDPCFunction { context1 context2 dpc -- }
	// fulfill pending requests

	auto completed

	auto rs
	HALCPUInterruptDisable rs!

	DKSCompletedBitmap@ completed!
	0 DKSCompletedBitmap!

	rs@ HALCPUInterruptRestore

	auto id
	0 id!

	while (id@ DKSMAXDISKID <=)
		if (completed@ 1 id@ << &)
			id@ DKSComplete
		end

		1 id +=
	end
end

fn (HALInterruptHandler) DriverDKSInterrupt { trapframe int -- }
	auto event
	auto details

	DKSCMDINFO DKSPORTCMD HALXRstationCitronCommandASyncIdle
	DKSPORTA HALXRstationCitronInl event!
	DKSPORTB HALXRstationCitronInl details!

	if (event@ DKSBLOCKTRANSFER ==)
		auto dpc
		DKSDPC dpc!

		details@ DKSCompletedBitmap |=

		// defer doing fun work til later,
		// otherwise we will BSOD since we're at IPLDISK

		0 // context1
		0 // context2
		DPCHIGHIMPORTANCE // importance
		dpc@ // dpc
		KeDPCEnqueue drop
	end
end

fn DKSBlockTransferCommand { disk iopl -- ok }
	0 ok!

	auto iop
	iopl@ IOPacketFromLocation iop!

	auto id
	disk@ Disk_DKSID + @ id!

	auto realdisk
	[id@]DKSRealDisks@ realdisk!

	iop@ IOPacketWasEnqueued

	// stash the completed length in context

	0 iopl@ IOPacketLocation_Context + !

	disk@ Disk_BlockOffset + @ DKSBLOCKSHIFT << iopl@ IOPacketLocation_Offset + +=

	0 iop@ IOPacketHeader_DeviceQueueNext + !
	0 iop@ IOPacketHeader_DeviceQueuePrev + !

	auto rs
	HALCPUInterruptDisable rs!

	auto t
	realdisk@ Disk_RequestListTail + @ t!

	if (t@ ~~)
		iop@ realdisk@ Disk_RequestListTail + !
		iop@ realdisk@ Disk_RequestListHead + !

		if (iopl@ IOPacketLocation_FunctionCodeB + gb IODISPATCH_WRITE ==)
			rs@ HALCPUInterruptRestore

			DKSBuffer@ id@ DKSBLOCKSHIFT << + // dest
			iopl@ IOPacketLocationMappedBuffer // src
			DKSBLOCKSIZE // len
			memcpy

			HALCPUInterruptDisable rs!
		end

		// no pending requests, start the disk

		id@ DKSPORTA HALXRstationCitronOutl
		DKSCMDSELECT DKSPORTCMD HALXRstationCitronCommandASyncIdle

		iopl@ IOPacketLocation_Offset + @ DKSBLOCKSHIFT >> DKSPORTA HALXRstationCitronOutl

		if (iopl@ IOPacketLocation_FunctionCodeB + gb IODISPATCH_READ ==)
			DKSCMDREAD DKSPORTCMD HALXRstationCitronCommandASyncIdle
		end else
			DKSCMDWRITE DKSPORTCMD HALXRstationCitronCommandASyncIdle
		end
	end else
		iop@ t@ IOPacketHeader_DeviceQueueNext + !
		iop@ realdisk@ Disk_RequestListTail + !
	end

	rs@ HALCPUInterruptRestore
end

fn (IODispatchIOControlFunction) DriverDKSIOControl { arg2 arg1 access fcb lastmode -- ret ok }
	0 ok!
end

// routines for I/O by byte offset.
// these are called when the device object is opened directly, either cached
// (in which case the caller is the page cache) or uncached.

// if caller isn't careful these can lead to some redundant reads and writes.
// which are slow.

fn (IODispatchEnqueueIOPFunction) DriverDKSRead { iopl -- done ok }
	1 done!

	auto iop
	iopl@ IOPacketFromLocation iop!

	auto devobj
	iopl@ IOPacketLocation_FileControlBlock + @ IOFileControlBlockGetDeviceObject devobj!

	auto disk
	devobj@ IODevice_Extension + @ disk!

	auto size
	iopl@ IOPacketLocation_FileControlBlock + @ IOFileControlBlockGetSize size!

	auto offset
	iopl@ IOPacketLocation_Offset + @ offset!

	0 ok!

	if (offset@ size@ >=)
		0 iop@ IOPacketHeader_StatusBlock + OSStatusBlock_Length + !
	
		0 // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	if (offset@ DKSBLOCKOFFMASK &)
		STATUS_UNALIGNED ok!

		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	auto mdl
	iop@ IOPacketHeader_MDL + @ mdl!

	if (iopl@ IOPacketLocationVirtualBuffer DKSBLOCKOFFMASK &)
		STATUS_UNALIGNED ok!

		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	auto length
	size@ offset@ -
	iopl@ IOPacketLocation_Length + @
	min length!

	if (length@ DKSBLOCKOFFMASK &)
		STATUS_UNALIGNED ok!

		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	if (length@ ~~)
		0 iop@ IOPacketHeader_StatusBlock + OSStatusBlock_Length + !
	
		0 // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	1 // lockforwrite
	mdl@ // mdl
	MmMDLPin ok!

	if (ok@)
		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	mdl@ MmMDLMap ok!

	if (ok@)
		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	length@ iop@ IOPacketHeader_StatusBlock + OSStatusBlock_Length + !
	length@ iopl@ IOPacketLocation_Length + !

	disk@ // disk
	iopl@ // iopl
	DKSBlockTransferCommand ok!

	if (ok@)
		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end
end

fn (IODispatchEnqueueIOPFunction) DriverDKSWrite { iopl -- done ok }
	1 done!

	auto iop
	iopl@ IOPacketFromLocation iop!

	auto devobj
	iopl@ IOPacketLocation_FileControlBlock + @ IOFileControlBlockGetDeviceObject devobj!

	auto disk
	devobj@ IODevice_Extension + @ disk!

	auto bytesize
	iopl@ IOPacketLocation_FileControlBlock + @ IOFileControlBlockGetSize bytesize!

	auto offset
	iopl@ IOPacketLocation_Offset + @ offset!

	0 ok!

	if (offset@ bytesize@ >=)
		STATUS_END_OF_DISK ok!

		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	if (offset@ DKSBLOCKOFFMASK &)
		STATUS_UNALIGNED ok!

		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	auto mdl
	iop@ IOPacketHeader_MDL + @ mdl!

	if (iopl@ IOPacketLocationVirtualBuffer DKSBLOCKOFFMASK &)
		STATUS_UNALIGNED ok!

		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	auto length
	bytesize@ offset@ -
	iopl@ IOPacketLocation_Length + @
	min length!

	if (length@ DKSBLOCKOFFMASK &)
		STATUS_UNALIGNED ok!

		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	if (length@ ~~)
		0 iop@ IOPacketHeader_StatusBlock + OSStatusBlock_Length + !
	
		0 // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	0 // lockforwrite
	mdl@ // mdl
	MmMDLPin ok!

	if (ok@)
		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	mdl@ MmMDLMap ok!

	if (ok@)
		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	length@ iop@ IOPacketHeader_StatusBlock + OSStatusBlock_Length + !
	length@ iopl@ IOPacketLocation_Length + !

	iopl@ IOPacketLocation_OffsetInMDL + @ // offset
	iopl@ IOPacketLocation_Length + @ // length
	1 // write
	0 // dma
	mdl@ // mdl
	MmMDLFlush

	disk@ // disk
	iopl@ // iopl
	DKSBlockTransferCommand ok!

	if (ok@)
		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end
end