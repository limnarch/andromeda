//
// Implements the EBus enumeration driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALXRstationEBus.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

const EBusSlotsStart 0xC0000000
const EBusSlots      7
const EBusSlotSpace  0x8000000
const EBusBoardMagic 0x0C007CA1

struct EBusIDROM
	4 Magic
	4 MID
	16 Name
	4 DriverROMOffset
endstruct

fn (FDriverInit) DriverInit { stage -- ok }
	fnsection "INIT$text"

	if (stage@ STAGE_THREAD ==)
		pointerof EBusEnumerate HALXRstationEBusEnumerateFunction!
	end

	0 ok!
end

fn (HALXRstationEBusEnumerateF) EBusEnumerate { func mid -- count }
	// loop all the boards on the bus and call the provided function for each
	// one found with the given MID.

	auto i
	0 i!

	0 count!

	auto phyaddr
	EBusSlotsStart phyaddr!

	auto vaddr

	while (i@ EBusSlots <)
		auto ok
		MMIO_NOCACHE // cached
		512 // length
		phyaddr@ // phyaddr
		MmIORegionMap ok! vaddr!

		if (ok@)
			return
		end

		if (vaddr@ EBusIDROM_Magic + @ EBusBoardMagic ==)
			if (vaddr@ EBusIDROM_MID + @ mid@ ==)
				i@ // slotid
				phyaddr@ // phyaddr
				func@ HALXRstationEBusCallbackF
			end
		end

		512 // length
		vaddr@ // vaddr
		MmIORegionUnmap

		EBusSlotSpace phyaddr +=
		1 i +=
	end
end