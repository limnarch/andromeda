//
// Implements the XRstation RTC driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/rta3x/a3x.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALXRstationCitron.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<ll>/OSDLL/OSStatistics.h"
#include "<ll>/OSDLL/OSContext.h"

externptr KiTimerExpirationEarliest
externptr KiTimerExpirationDPC

externptr KiThreadQuantumDPC

const RTCPORTCMD   0x20
const RTCPORTDATA  0x21
const RTCINTERRUPT 1

const RTCCMDINTERVAL 1
const RTCCMDQUERYSEC 2
const RTCCMDQUERYMS  3

buffer DriverRTCTimeCurrent KeTime_SIZEOF
buffer DriverRTCUptime      KeTime_SIZEOF

extern DriverRTCInterrupt { int -- }

fn (FDriverInit) DriverInitRTC { stage -- ok }
	if (stage@ STAGE_PRETASKING ==)
		// start the clock interrupt

		pointerof DriverRTCInterrupt // function
		RTCINTERRUPT // interrupt number
		IPLCLOCK // interrupt priority level
		HALInterruptRegister

		HALRTCINTERVAL RTCPORTDATA HALXRstationCitronOutl
		RTCCMDINTERVAL RTCPORTCMD HALXRstationCitronCommand

		DriverRTCTimeCurrent DriverRTCQuerySlow

		pointerof DriverRTCQuery HALRTCQueryFunction!
		pointerof DriverRTCUptimeQuery HALUptimeQueryFunction!
	end

	0 ok!
end

fn (HALRTCQueryF) DriverRTCQuery { time -- }
	auto ctime
	DriverRTCTimeCurrent ctime!

	ctime@ KeTime_SecPart + @ time@ KeTime_SecPart + !
	ctime@ KeTime_MsPart + @ time@ KeTime_MsPart + !
end

fn (HALUptimeQueryF) DriverRTCUptimeQuery { time -- }
	auto ctime
	DriverRTCUptime ctime!

	ctime@ KeTime_SecPart + @ time@ KeTime_SecPart + !
	ctime@ KeTime_MsPart + @ time@ KeTime_MsPart + !
end

fn DriverRTCQuerySlow { time -- }
	auto rs
	HALCPUInterruptDisable rs!

	RTCCMDQUERYSEC RTCPORTCMD HALXRstationCitronCommand
	RTCPORTDATA HALXRstationCitronInl time@ KeTime_SecPart + !

	RTCCMDQUERYMS RTCPORTCMD HALXRstationCitronCommand
	RTCPORTDATA HALXRstationCitronInl time@ KeTime_MsPart + !

	rs@ HALCPUInterruptRestore
end

asm "

DriverRTCInterrupt:
	subi sp, sp, 8
	mov  long [sp], lr
	mov  long [sp + 4], s0

	mov  s0, a1

	la   t0, KeStatistics
	mov  t1, long [t0 + OSStatistics_ClockTicks]
	addi t1, t1, 1
	mov  long [t0 + OSStatistics_ClockTicks], t1

	mov  t1, long [s0 + OSContext_IPL]
	addi t0, t0, OSStatistics_IPLTimes
	mov  t2, long [t0 + t1 LSH 2]
	addi t2, t2, HALRTCINTERVAL
	mov  long [t0 + t1 LSH 2], t2

	la   a0, DriverRTCUptime
	li   a1, HALRTCINTERVAL
	jal  KeTimeAddMs

	la   a0, DriverRTCTimeCurrent
	jal  DriverRTCQuerySlow

	la   t0, KiTimerExpirationDPC
	mov  t1, long [t0 + KeDPC_Enqueued]
	bne  t1, .skipdpc

	la   a1, KiTimerExpirationEarliest
	la   a0, DriverRTCUptime
	jal  KeTimeCompare

	subi a0, a0, TIMEEARLIER
	bne  a0, .skipdpc

	li   a3, 0
	li   a2, 0
	li   a1, DPCLOWIMPORTANCE
	la   a0, KiTimerExpirationDPC
	jal  KeDPCEnqueue

.skipdpc:
	la   t0, KeThreadCurrent
	mov  t0, long [t0]

	beq  t0, .skipthread

	mov  t1, long [t0 + KeThread_Process]

	mov  t2, long [KeDPCActive]

	beq  t2, .updatettime

	la   t2, KeStatistics
	mov  t3, long [t2 + OSStatistics_DPCTimeMs]
	addi t3, t3, HALRTCINTERVAL
	mov  long [t2 + OSStatistics_DPCTimeMs], t3

	b    .skiptime

.updatettime:
	mov  t2, long [s0 + OSContext_ers]
	andi t2, t2, XR17032_ERS_USER
	beq  t2, .updatektime

	mov  t2, long [t1 + KeProcess_UserTimeMs]
	addi t2, t2, HALRTCINTERVAL
	mov  long [t1 + KeProcess_UserTimeMs], t2

	mov  t2, long [t0 + KeThread_UserTimeMs]
	addi t2, t2, HALRTCINTERVAL
	mov  long [t0 + KeThread_UserTimeMs], t2

	b    .skiptime

.updatektime:
	mov  t2, long [s0 + OSContext_IPL]
	beq  t2, .updatesystime

	mov  t2, long [t1 + KeProcess_DPCTimeMs]
	addi t2, t2, HALRTCINTERVAL
	mov  long [t1 + KeProcess_DPCTimeMs], t2

	mov  t2, long [t0 + KeThread_DPCTimeMs]
	addi t2, t2, HALRTCINTERVAL
	mov  long [t0 + KeThread_DPCTimeMs], t2

	b    .skiptime

.updatesystime:
	mov  t2, long [t1 + KeProcess_SystemTimeMs]
	addi t2, t2, HALRTCINTERVAL
	mov  long [t1 + KeProcess_SystemTimeMs], t2

	mov  t2, long [t0 + KeThread_SystemTimeMs]
	addi t2, t2, HALRTCINTERVAL
	mov  long [t0 + KeThread_SystemTimeMs], t2

	b    .skiptime

.skiptime:

	mov  t1, byte [t0 + KeThread_QuantumB]

	subi t2, t1, QUANTUMUNITSPERTICK
	blt  t2, .skipdec

	b    .continuedec

.skipdec:
	li   t2, 0

.continuedec:
	mov  byte [t0 + KeThread_QuantumB], t2

	bne  t2, .skipthread

	la   t0, KiThreadQuantumDPC
	mov  t1, long [t0 + KeDPC_Enqueued]
	bne  t1, .skipthread

	li   a3, 0
	li   a2, 0
	li   a1, DPCLOWIMPORTANCE
	mov  a0, t0
	jal  KeDPCEnqueue

.skipthread:

	mov  s0, long [sp + 4]
	mov  lr, long [sp]
	addi sp, sp, 8
	ret

"