//
// Implements file management for the FAT driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "<inc>/ViewCache.h"

#include "Fat.h"

fn FatFCBCacheLock { alertable mount -- ok }
	fnsection "PAGE$text"

	KERNELMODE // waitmode
	alertable@ // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	mount@ IOMount_Extension + @ FatData_FCBCacheMutex + // object
	KeThreadWaitForObject ok!
end

fn FatFCBCacheUnlock { mount -- }
	fnsection "PAGE$text"

	0 // abandon
	mount@ IOMount_Extension + @ FatData_FCBCacheMutex + // mutex
	KeMutexRelease drop
end

fn (IODispatchPokeFunction) FatPoke { poketype object -- }
	// this function gives us a chance to update timestamps when an operation
	// occurs that might bypass us entirely i.e. a fully cached read or write.

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	if (fcb@ FSFileControlBlockGetMount IOMount_Flags + @ OSMOUNT_READONLY &)
		return
	end

	auto ok
	fcb@ IOFileControlBlockLock ok!

	if (ok@)
		return
	end

	if (poketype@ IOPOKE_WRITE ==)
		fcb@ // fcb
		object@ // fileobject
		FatUpdateModifyTimestamp
	end elseif (poketype@ IOPOKE_READ ==)
		fcb@ // fcb
		object@ // fileobject
		FatUpdateAccessTimestamp
	end

	fcb@ IOFileControlBlockUnlock
end

fn (IODispatchSetSecurityFunction) FatSetSecurity { uid gid permissions object -- ok }
	fnsection "PAGE$text"

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	if (uid@ -1 ~=)
		STATUS_NOT_SUPPORTED ok!
		return
	end

	if (gid@ -1 ~=)
		STATUS_NOT_SUPPORTED ok!
		return
	end

	if (permissions@ -1 ==)
		0 ok!
		return
	end

	permissions@ fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ FatFCBData_SavedPermissions + !
end

fn (IODispatchSetFileFunction) FatSetFile { info fileobject -- ok }
	0 ok!

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	auto fcbp
	fcb@ IOFileControlBlock_Paged + @ fcbp!

	if (fcb@ FSFileControlBlockGetMount IOMount_Flags + @ OSMOUNT_READONLY &)
		STATUS_READONLY_FILESYSTEM ok!

		return
	end

	fcb@ IOFileControlBlockLock ok!

	if (ok@)
		return
	end

	if (info@ OSFileInformation_MTimeMsPart + @ -1 ~=)
		// set modify timestamp

		info@ OSFileInformation_MTimeMsPart + @
		fcbp@ IOFileControlBlockPaged_ModifyTime + KeTime_MsPart + !

		info@ OSFileInformation_MTimeSecPart + @
		fcbp@ IOFileControlBlockPaged_ModifyTime + KeTime_SecPart + !

		FATFILECONTEXT_UPDATEONCLOSE fileobject@ IOFile_Context + |=
	end

	if (info@ OSFileInformation_ATimeMsPart + @ -1 ~=)
		// set access timestamp

		info@ OSFileInformation_ATimeMsPart + @
		fcbp@ IOFileControlBlockPaged_AccessTime + KeTime_MsPart + !

		info@ OSFileInformation_ATimeSecPart + @
		fcbp@ IOFileControlBlockPaged_AccessTime + KeTime_SecPart + !

		FATFILECONTEXT_UPDATEONCLOSE fileobject@ IOFile_Context + |=
	end

	if (info@ OSFileInformation_CreationTimeMsPart + @ -1 ~=)
		// set creation timestamp

		info@ OSFileInformation_CreationTimeMsPart + @
		fcbp@ IOFileControlBlockPaged_CreationTime + KeTime_MsPart + !

		info@ OSFileInformation_CreationTimeSecPart + @
		fcbp@ IOFileControlBlockPaged_CreationTime + KeTime_SecPart + !

		FATFILECONTEXT_UPDATEONCLOSE fileobject@ IOFile_Context + |=
	end

	fcb@ IOFileControlBlockUnlock
end

fn FatFCBCacheDestroy { mount -- ok }
	fnsection "PAGE$text"

	// We have to flush and free all of the FCBs that are in the cache.
	// We can't do this with the mount's fcbdata list, because the FCBs are
	// arranged in a tree that models the filesystem tree, and children nodes
	// keep their parent node (the containing directory) referenced.
	// Therefore, we have to do this from the leaves of the tree upwards.
	// There is a convenient way to do this.
	// Basically, we take FCBs off the head of the reclaimable list and we
	// obliterate them until the reclaimable list is empty. This will get rid
	// of all of the FCBs except the root FCB which we delete manually. This
	// works because when all of the children of a tree node are gone, that
	// node will become a leaf with a zero refcount and be placed on the
	// reclaimable list as well.

	0 ok!

	auto fatdata
	mount@ IOMount_Extension + @ fatdata!

	0 // alertable
	mount@ // mount
	FatFCBCacheLock drop

	while (1)
		auto fcbdata
		fatdata@ FatData_ReclaimableListHead + @ fcbdata!

		if (fcbdata@ ~~)
			break
		end

		auto fcb
		fcbdata@ FatFCBData_FCB + @ fcb!

		fcb@ FatFCBReferenceLockHeld

		1 // writeout
		fcb@ // fcb
		FatFCBDelete
	end

	mount@ FatFCBCacheUnlock

	if (DEBUGCHECKS)
		if (fatdata@ FatData_FCBDataListHead + @)
			"FatFCBCacheDestroy: incomplete\n" KeCrash
		end
	end

	1 // writeout
	mount@ IOMount_RootFCB + @ // fcb
	FatFCBDelete

	0 mount@ IOMount_RootFCB + !
end

fn FatFCBCacheFlush { mount -- ok }
	fnsection "PAGE$text"

	0 ok!

	auto fatdata
	mount@ IOMount_Extension + @ fatdata!

	0 // alertable
	mount@ // mount
	FatFCBCacheLock drop

	auto fcbdata
	fatdata@ FatData_FCBDataListHead + @ fcbdata!

	while (fcbdata@)
		auto fcb
		fcbdata@ FatFCBData_FCB + @ fcb!

		fcb@ IOFileControlBlockFlush drop

		fcbdata@ FatFCBData_NextFCBData + @ fcbdata!
	end

	mount@ FatFCBCacheUnlock

	mount@ IOMount_RootFCB + @ IOFileControlBlockFlush drop
end

fn (IOFilesystemReclaimFunction) FatFCBReclaim { preferredcount fsdeviceobject -- actualcount }
	fnsection "PAGE$text"

	auto mount
	fsdeviceobject@ IODevice_RelevantMount + @ mount!

	auto fatdata
	mount@ IOMount_Extension + @ fatdata!

	0 actualcount!

	0 // alertable
	mount@ // mount
	FatFCBCacheLock drop

	while (actualcount@ preferredcount@ <)
		auto fcbdata
		fatdata@ FatData_ReclaimableListHead + @ fcbdata!

		if (fcbdata@ ~~)
			break
		end

		auto fcb
		fcbdata@ FatFCBData_FCB + @ fcb!

		fcb@ FatFCBReferenceLockHeld

		1 // writeout
		fcb@ // fcb
		FatFCBDelete

		1 actualcount +=
	end

	mount@ FatFCBCacheUnlock
end

fn FatFCBCreateFromDirent { name flags dirfcb longdirentseek shortdirentseek shortdirent mount -- fcb ok }
	fnsection "PAGE$text"

	auto fatdata
	mount@ IOMount_Extension + @ fatdata!

	auto firstcluster
	shortdirent@ FatDirectoryEntry_FirstClusterLowI + gi firstcluster!

	if (mount@ IOMount_Extension + @ FatData_FatType + @ 32 ==)
		shortdirent@ FatDirectoryEntry_FirstClusterHighI + gi 16 << firstcluster |=
	end

	auto filetype

	if (shortdirent@ FatDirectoryEntry_AttributeB + gb FAT_ATTR_DIRECTORY &)
		OSFILETYPE_DIRECTORY filetype!
	end else
		OSFILETYPE_FILE filetype!
	end

	name@ // name
	flags@ // flags
	filetype@ // filetype
	mount@ // mount
	FatFCBCreate ok! fcb!

	if (ok@)
		return
	end

	auto fcbp
	fcb@ IOFileControlBlock_Paged + @ fcbp!

	auto fcbdata
	fcbp@ IOFileControlBlockPaged_FSContext + @ fcbdata!

	firstcluster@ fcbdata@ FatFCBData_StartingCluster + !

	shortdirent@ FatDirectoryEntry_FileSizeBytes + @ fcb@ IOFileControlBlock_SizeInBytes + !

	// read the timestamps.

	auto timestamp
	shortdirent@ FatDirectoryEntry_CreationDateI + gi FatDateToUnix timestamp!
	shortdirent@ FatDirectoryEntry_CreationTimeI + gi FatTimeToUnix timestamp +=

	shortdirent@ FatDirectoryEntry_CreationTimeTenthB + gb 10 / timestamp +=

	timestamp@ fcbp@ IOFileControlBlockPaged_CreationTime + KeTime_SecPart + !

	shortdirent@ FatDirectoryEntry_ModificationDateI + gi FatDateToUnix timestamp!
	shortdirent@ FatDirectoryEntry_ModificationTimeI + gi FatTimeToUnix timestamp +=

	timestamp@ fcbp@ IOFileControlBlockPaged_ModifyTime + KeTime_SecPart + !

	shortdirent@ FatDirectoryEntry_AccessDateI + gi FatDateToUnix timestamp!

	timestamp@ fcbp@ IOFileControlBlockPaged_AccessTime + KeTime_SecPart + !

	// FAT timestamps are in local time, so we have to normalize it to UTC.
	// currently this does not remove the bias from daylight savings time, but
	// Ke has an opportunity to normalize that and we shouldn't have to touch
	// this again.

	fcbp@ IOFileControlBlockPaged_CreationTime + // desttime
	fcbp@ IOFileControlBlockPaged_CreationTime + // srctime
	KeLocalTimeToRealTime

	fcbp@ IOFileControlBlockPaged_ModifyTime + // desttime
	fcbp@ IOFileControlBlockPaged_ModifyTime + // srctime
	KeLocalTimeToRealTime

	fcbp@ IOFileControlBlockPaged_AccessTime + // desttime
	fcbp@ IOFileControlBlockPaged_AccessTime + // srctime
	KeLocalTimeToRealTime

	longdirentseek@ fcbdata@ FatFCBData_LongDirentSeek + !
	shortdirentseek@ fcbdata@ FatFCBData_ShortDirentSeek + !

	fcb@ // childfcb
	dirfcb@ // fcb
	mount@ // mount
	FatDirectoryInsertCachedChild

	if (filetype@ OSFILETYPE_DIRECTORY ==)
		if (firstcluster@ ~~)
			// directory was either corrupted, or we just created it.
			// either way, allocate a cluster for it.

			fatdata@ FatData_ClusterSizeBytes + @ // newsize
			1 // zero
			0 // flags
			fcb@ // fcb
			FatTruncate ok!

			if (ok@)
				-1 // writeout
				fcb@ // fcb
				FatFCBDelete

				return
			end
		end else
			fcb@ FatFCBMeasureSize ok!

			if (ok@)
				-1 // writeout
				fcb@ // fcb
				FatFCBDelete

				return
			end
		end
	end
end

fn FatFCBCreate { name flags filetype mount -- fcb ok }
	fnsection "PAGE$text"

	auto namelen
	0 namelen!

	if (name@)
		name@ strlen 1 + namelen!
	end

	if (flags@ OSFILEFLAG_PAGEFILE &)
		mount@ IOMount_FsDeviceObject + @ // devobj
		filetype@ // filetype
		0 // flags
		IOFileControlBlockCreate ok! fcb!
	end else
		mount@ IOMount_FsDeviceObject + @ // devobj
		filetype@ // filetype
		IOFCBFLAG_PAGED // flags
		IOFileControlBlockCreate ok! fcb!
	end

	if (ok@)
		return
	end

	auto fcbdata
	if (flags@ OSFILEFLAG_PAGEFILE & ~~)
		if (filetype@ OSFILETYPE_DIRECTORY ==)
			FatDCBData_SIZEOF namelen@ + // bytes
			'FDCp' // tag
			PAGED // flags
			MmAllocWithTag ok! fcbdata!
		end else
			FatFCBData_SIZEOF namelen@ + // bytes
			'FFCp' // tag
			PAGED // flags
			MmAllocWithTag ok! fcbdata!
		end
	end else
		FatFCBData_SIZEOF namelen@ + // bytes
		'FFCX' // tag
		0 // flags
		MmAllocWithTag ok! fcbdata!
	end

	if (ok@)
		-1 // writeout
		fcb@ // fcb
		IOFileControlBlockDelete drop

		return
	end

	auto fcbnp
	FatFCBDataNonpaged_SIZEOF // bytes
	'FFCn' // tag
	0 // flags
	MmAllocWithTag ok! fcbnp!

	if (ok@)
		fcbdata@ MmFree

		-1 // writeout
		fcb@ // fcb
		IOFileControlBlockDelete drop

		return
	end

	if (filetype@ OSFILETYPE_DIRECTORY ==)
		OSDEFAULTDIRPERMISSIONS fcbdata@ FatFCBData_SavedPermissions + !
	end else
		OSDEFAULTFILEPERMISSIONS fcbdata@ FatFCBData_SavedPermissions + !
	end

	fcbnp@ fcbdata@ FatFCBData_Nonpaged + !
	fcbdata@ fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + !

	0 fcbdata@ FatFCBData_ParentFCBData + !
	0 fcbdata@ FatFCBData_LeftChild + !
	0 fcbdata@ FatFCBData_RightChild + !

	0 fcbdata@ FatFCBData_ParentDirDCB + !

	fcb@ fcbdata@ FatFCBData_FCB + !

	0 fcbdata@ FatFCBData_ReclaimNext + !
	0 fcbdata@ FatFCBData_ReclaimPrev + !

	0 fcbdata@ FatFCBData_NextFCBData + !
	0 fcbdata@ FatFCBData_PrevFCBData + !

	0 fcbdata@ FatFCBData_Name + !

	if (namelen@)
		if (filetype@ OSFILETYPE_DIRECTORY ==)
			fcbdata@ FatDCBData_SIZEOF + // dest
			name@ // src
			namelen@ // sz
			memcpy

			fcbdata@ FatDCBData_SIZEOF +
			fcbdata@ FatFCBData_Name + !
		end else
			fcbdata@ FatFCBData_SIZEOF + // dest
			name@ // src
			namelen@ // sz
			memcpy

			fcbdata@ FatFCBData_SIZEOF +
			fcbdata@ FatFCBData_Name + !
		end
	end

	-1 fcbdata@ FatFCBData_LongDirentSeek + !
	0 fcbdata@ FatFCBData_ShortDirentSeek + !

	0 fcbdata@ FatFCBData_StartingCluster + !

	flags@ fcbdata@ FatFCBData_InitialFlags + !
	1 fcbdata@ FatFCBData_References + !

	0 fcbdata@ FatFCBData_Flags + !

	-1 fcbnp@ FatFCBDataNonpaged_LastFATLinkClusterOff + !
	0 fcbnp@ FatFCBDataNonpaged_LastFATLinkValue + !

	if (filetype@ OSFILETYPE_DIRECTORY ==)
		0 fcbdata@ FatDCBData_SplayTreeRoot + !
		0 fcbdata@ FatDCBData_DirentHint + !
		-1 fcbdata@ FatDCBData_LastDirentIndex + !

		0 // sizeinbits
		0 // data
		fcbdata@ FatDCBData_DirentBitmapHeader + // header
		ComBitmapInitialize
	end
end

fn FatFCBDelete { writeout fcb -- }
	fnsection "PAGE$text"

	auto fcbdata
	fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

	if (DEBUGCHECKS)
		if (fcbdata@ FatFCBData_References + @ 1 ~=)
			fcbdata@ FatFCBData_References + @ "FatFCBDelete: FCB had %d references\n" KeCrash
		end
	end

	if (fcbdata@ FatFCBData_ParentDirDCB + @)
		fcb@ // childfcb
		fcb@ FSFileControlBlockGetMount // mount
		FatDirectoryRemoveCachedChild
	end

	if (fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FileType + @
		OSFILETYPE_DIRECTORY ==)

		if (DEBUGCHECKS)
			if (fcbdata@ FatDCBData_SplayTreeRoot + @)
				"FatFCBDelete: directory cache had children\n" KeCrash
			end
		end

		auto bmp
		fcbdata@ FatDCBData_DirentBitmapHeader + ComBitmapGetData bmp!

		if (bmp@)
			bmp@ MmFree
		end
	end

	writeout@ // writeout
	fcb@ // fcb
	IOFileControlBlockDelete drop

	fcbdata@ FatFCBData_Nonpaged + @ MmFree
	fcbdata@ MmFree
end

fn FatFCBMeasureSize { fcb -- ok }
	fnsection "PAGE$text"

	auto fcbdata
	fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

	auto mount
	fcb@ FSFileControlBlockGetMount mount!

	auto length
	-1 // mustlen
	fcbdata@ FatFCBData_StartingCluster + @ // cluster
	mount@ // mount
	FatClusterChainValidate ok! length!

	if (ok@)
		return
	end

	FATFILEFLAG_VALIDATED fcbdata@ FatFCBData_Flags + |=

	length@
	mount@ IOMount_Extension + @ FatData_ClusterSizeShift + @ <<
	fcb@ IOFileControlBlock_SizeInBytes + !
end

fn FatFCBReference { fcb -- }
	fnsection "PAGE$text"

	auto mount
	fcb@ FSFileControlBlockGetMount mount!

	0 mount@ FatFCBCacheLock drop

	fcb@ FatFCBReferenceLockHeld

	mount@ FatFCBCacheUnlock
end

fn FatFCBReferenceLockHeld { fcb -- }
	fnsection "PAGE$text"

	// assumes the FCB cache lock is held

	auto mount
	fcb@ FSFileControlBlockGetMount mount!

	auto fatdata
	mount@ IOMount_Extension + @ fatdata!

	auto fcbdata
	fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

	auto oldcount
	fcbdata@ FatFCBData_References + @ oldcount!

	oldcount@ 1 + fcbdata@ FatFCBData_References + !

	if (oldcount@ ~~)
		// remove from reclaimable list

		auto ls
		fcbdata@ FatFCBData_ReclaimPrev + @ ls!

		auto ns
		fcbdata@ FatFCBData_ReclaimNext + @ ns!

		if (ls@)
			ns@ ls@ FatFCBData_ReclaimNext + !
		end else
			ns@ fatdata@ FatData_ReclaimableListHead + !
		end

		if (ns@)
			ls@ ns@ FatFCBData_ReclaimPrev + !
		end else
			ls@ fatdata@ FatData_ReclaimableListTail + !
		end

		IOFileControlBlockDecrementReclaimable
	end
end

fn FatFCBDereference { fcb -- }
	fnsection "PAGE$text"

	auto mount
	fcb@ FSFileControlBlockGetMount mount!

	auto fatdata
	mount@ IOMount_Extension + @ fatdata!

	0 mount@ FatFCBCacheLock drop

	auto fcbdata
	fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

	auto oldcount
	fcbdata@ FatFCBData_References + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ ~~)
			"FatFCBDereference: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - fcbdata@ FatFCBData_References + !

	if (oldcount@ 1 ==)
		// insert into reclaimable list

		auto t
		fatdata@ FatData_ReclaimableListTail + @ t!

		if (t@ ~~)
			0 fcbdata@ FatFCBData_ReclaimNext + !
			0 fcbdata@ FatFCBData_ReclaimPrev + !

			fcbdata@ fatdata@ FatData_ReclaimableListHead + !
			fcbdata@ fatdata@ FatData_ReclaimableListTail + !
		end else
			0 fcbdata@ FatFCBData_ReclaimNext + !

			t@ fcbdata@ FatFCBData_ReclaimPrev + !
			fcbdata@ t@ FatFCBData_ReclaimNext + !
			fcbdata@ fatdata@ FatData_ReclaimableListTail + !
		end

		IOFileControlBlockIncrementReclaimable
	end

	mount@ FatFCBCacheUnlock
end

fn FatUpdateModifyTimestamp { fcb fileobject -- }
	fnsection "PAGE$text"

	auto time
	KeTime_SIZEOF alloc time!

	time@ KeTimeQuery

	auto fcbp
	fcb@ IOFileControlBlock_Paged + @ fcbp!

	if (time@ KeTime_SecPart + @
		fcbp@ IOFileControlBlockPaged_ModifyTime + KeTime_SecPart + @ ~=)

		fcbp@ IOFileControlBlockPaged_ModifyTime + // dest
		time@ // src
		KeTime_SIZEOF // sz
		memcpy

		if (fileobject@)
			FATFILECONTEXT_UPDATEONCLOSE fileobject@ IOFile_Context + |=
		end else
			fcb@ FatUpdateDirent
		end
	end
end

fn FatUpdateAccessTimestamp { fcb fileobject -- }
	fnsection "PAGE$text"

	auto time
	KeTime_SIZEOF alloc time!

	time@ KeTimeQuery

	auto fcbp
	fcb@ IOFileControlBlock_Paged + @ fcbp!

	// only update access timestamp if it is prior to the modify timestamp OR
	// it is older than a day.

	if (fcbp@ IOFileControlBlockPaged_AccessTime + KeTime_SecPart + @
		fcbp@ IOFileControlBlockPaged_ModifyTime + KeTime_SecPart + @ <
		time@ KeTime_SecPart + @ fcbp@ IOFileControlBlockPaged_AccessTime + KeTime_SecPart + @ - 86400 >= ||)

		if (time@ KeTime_SecPart + @
			fcbp@ IOFileControlBlockPaged_AccessTime + KeTime_SecPart + @ ~=)

			fcbp@ IOFileControlBlockPaged_AccessTime + // dest
			time@ // src
			KeTime_SIZEOF // sz
			memcpy

			if (fileobject@)
				FATFILECONTEXT_UPDATEONCLOSE fileobject@ IOFile_Context + |=
			end else
				fcb@ FatUpdateDirent
			end
		end
	end
end

fn FatFileDelete { fcb -- ok }
	fnsection "PAGE$text"

	// remove all cache pages.
	// this has to be done before we free the disk blocks, otherwise pageouts
	// in progress will behave unpredictably.

	0 // writeout
	fcb@ // fcb
	IOFileControlBlockDestroyCache

	// free disk blocks.

	fcb@ FatTruncateToZero ok!

	if (ok@)
		return
	end

	// free dirent(s).

	fcb@ FatFreeDirentsForFCB

	// delete FCB.

	-1 // writeout
	fcb@ // fcb
	FatFCBDelete
end