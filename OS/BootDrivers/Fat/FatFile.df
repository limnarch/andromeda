//
// Implements file management for the FAT driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "<inc>/ViewCache.h"

#include "Fat.h"

fn (IODispatchPokeFunction) FatPoke { poketype object -- }
	// this function gives us a chance to update timestamps when an operation
	// occurs that might bypass us entirely i.e. a fully cached read or write.

end

fn (IODispatchSetSecurityFunction) FatSetSecurity { uid gid permissions object -- ok }
	fnsection "PAGE$text"

	STATUS_NOT_IMPLEMENTED ok!
end

fn FatFCBCacheFlush { destroy mount -- ok }
	fnsection "PAGE$text"

	STATUS_NOT_IMPLEMENTED ok!
end

fn (IOFilesystemReclaimFunction) FatFCBReclaim { preferredcount fsdeviceobject -- actualcount }
	fnsection "PAGE$text"

	0 actualcount!
end

fn FatFCBCreate { flags filetype mount -- fcb ok }
	fnsection "PAGE$text"

	if (flags@ OSFILEFLAG_PAGEFILE &)
		mount@ IOMount_FsDeviceObject + @ // devobj
		filetype@ // filetype
		0 // flags
		IOFileControlBlockCreate ok! fcb!
	end else
		mount@ IOMount_FsDeviceObject + @ // devobj
		filetype@ // filetype
		IOFCBFLAG_PAGED // flags
		IOFileControlBlockCreate ok! fcb!
	end

	if (ok@)
		return
	end

	auto fcbdata
	if (flags@ OSFILEFLAG_PAGEFILE & ~~)
		FatFCBData_SIZEOF // bytes
		'FFCp' // tag
		PAGED // flags
		MmAllocWithTag ok! fcbdata!
	end else
		FatFCBData_SIZEOF // bytes
		'FFCX' // tag
		0 // flags
		MmAllocWithTag ok! fcbdata!
	end

	if (ok@)
		-1 // writeout
		fcb@ // fcb
		IOFileControlBlockDelete drop

		return
	end

	auto fcbnp
	FatFCBDataNonpaged_SIZEOF // bytes
	'FFCn' // tag
	0 // flags
	MmAllocWithTag ok! fcbnp!

	if (ok@)
		fcbdata@ MmFree

		-1 // writeout
		fcb@ // fcb
		IOFileControlBlockDelete drop

		return
	end

	fcbnp@ fcbdata@ FatFCBData_Nonpaged + !
	fcbdata@ fcb@ IOFileControlBlockSetContext

	0 fcbdata@ FatFCBData_Parent + !
	0 fcbdata@ FatFCBData_LeftChild + !
	0 fcbdata@ FatFCBData_RightChild + !
	0 fcbdata@ FatFCBData_Value + !

	fcb@ fcbdata@ FatFCBData_FCB + !

	0 fcbdata@ FatFCBData_ReclaimNext + !
	0 fcbdata@ FatFCBData_ReclaimPrev + !

	0 fcbdata@ FatFCBData_Name + !

	0 fcbdata@ FatFCBData_ParentDirFCB + !
	0 fcbdata@ FatFCBData_DirentOffset + !

	-1 fcbdata@ FatFCBData_StartingCluster + !

	flags@ fcbdata@ FatFCBData_InitialFlags + !
	1 fcbdata@ FatFCBData_References + !

	0 fcbdata@ FatFCBData_Flags + !
end

fn FatFCBDelete { writeout fcb -- }
	fnsection "PAGE$text"

	auto fcbdata
	fcb@ IOFileControlBlockGetContext fcbdata!

	writeout@ // writeout
	fcb@ // fcb
	IOFileControlBlockDelete drop

	fcbdata@ FatFCBData_Nonpaged + @ MmFree
	fcbdata@ MmFree
end