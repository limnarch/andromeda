//
// Implements file management for the FAT driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "<inc>/ViewCache.h"

#include "Fat.h"

fn FatFCBCacheLock { alertable mount -- ok }
	fnsection "PAGE$text"

	KERNELMODE // waitmode
	alertable@ // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	mount@ IOMount_Extension + @ FatData_FCBCacheMutex + // object
	KeThreadWaitForObject ok!
end

fn FatFCBCacheUnlock { mount -- }
	fnsection "PAGE$text"

	0 // abandon
	mount@ IOMount_Extension + @ FatData_FCBCacheMutex + // mutex
	KeMutexRelease drop
end

fn (IODispatchPokeFunction) FatPoke { poketype object -- }
	// this function gives us a chance to update timestamps when an operation
	// occurs that might bypass us entirely i.e. a fully cached read or write.

end

fn (IODispatchSetSecurityFunction) FatSetSecurity { uid gid permissions object -- ok }
	fnsection "PAGE$text"

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	if (uid@ -1 ~=)
		STATUS_NOT_SUPPORTED ok!
		return
	end

	if (gid@ -1 ~=)
		STATUS_NOT_SUPPORTED ok!
		return
	end

	if (permissions@ -1 ==)
		0 ok!
		return
	end

	permissions@ fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ FatFCBData_SavedPermissions + !
end

fn FatFCBCacheFlush { destroy mount -- ok }
	fnsection "PAGE$text"

	STATUS_NOT_IMPLEMENTED ok!
end

fn (IOFilesystemReclaimFunction) FatFCBReclaim { preferredcount fsdeviceobject -- actualcount }
	fnsection "PAGE$text"

	0 actualcount!
end

fn FatFCBCreateFromDirent { name flags dirfcb longdirentseek shortdirentseek shortdirent mount -- fcb ok }
	fnsection "PAGE$text"

	auto firstcluster
	shortdirent@ FatDirectoryEntry_FirstClusterLowI + gi firstcluster!

	if (mount@ IOMount_Extension + @ FatData_FatType + @ 32 ==)
		shortdirent@ FatDirectoryEntry_FirstClusterHighI + gi 16 << firstcluster |=
	end

	auto filetype

	if (shortdirent@ FatDirectoryEntry_AttributeB + gb FAT_ATTR_DIRECTORY &)
		OSFILETYPE_DIRECTORY filetype!
	end else
		OSFILETYPE_FILE filetype!
	end

	name@ // name
	flags@ // flags
	filetype@ // filetype
	mount@ // mount
	FatFCBCreate ok! fcb!

	if (ok@)
		return
	end

	auto fcbdata
	fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

	firstcluster@ fcbdata@ FatFCBData_StartingCluster + !

	shortdirent@ FatDirectoryEntry_FileSizeBytes + @ fcb@ IOFileControlBlock_SizeInBytes + !

	if (filetype@ OSFILETYPE_DIRECTORY ==)
		fcb@ FatFCBMeasureSize ok!

		if (ok@)
			-1 // writeout
			fcb@ // fcb
			FatFCBDelete

			return
		end
	end

	longdirentseek@ FatDirectoryEntry_SIZEOF * fcbdata@ FatFCBData_LongDirentOffset + !
	shortdirentseek@ FatDirectoryEntry_SIZEOF * fcbdata@ FatFCBData_ShortDirentOffset + !
	dirfcb@ fcbdata@ FatFCBData_ParentDirDCB + !

	dirfcb@ FatFCBReference
end

fn FatFCBCreate { name flags filetype mount -- fcb ok }
	fnsection "PAGE$text"

	auto namelen
	0 namelen!

	if (name@)
		name@ strlen 1 + namelen!
	end

	if (flags@ OSFILEFLAG_PAGEFILE &)
		mount@ IOMount_FsDeviceObject + @ // devobj
		filetype@ // filetype
		0 // flags
		IOFileControlBlockCreate ok! fcb!
	end else
		mount@ IOMount_FsDeviceObject + @ // devobj
		filetype@ // filetype
		IOFCBFLAG_PAGED // flags
		IOFileControlBlockCreate ok! fcb!
	end

	if (ok@)
		return
	end

	auto fcbdata
	if (flags@ OSFILEFLAG_PAGEFILE & ~~)
		if (filetype@ OSFILETYPE_DIRECTORY ==)
			FatDCBData_SIZEOF namelen@ + // bytes
			'FDCp' // tag
			PAGED // flags
			MmAllocWithTag ok! fcbdata!
		end else
			FatFCBData_SIZEOF namelen@ + // bytes
			'FFCp' // tag
			PAGED // flags
			MmAllocWithTag ok! fcbdata!
		end
	end else
		FatFCBData_SIZEOF namelen@ + // bytes
		'FFCX' // tag
		0 // flags
		MmAllocWithTag ok! fcbdata!
	end

	if (ok@)
		-1 // writeout
		fcb@ // fcb
		IOFileControlBlockDelete drop

		return
	end

	auto fcbnp
	FatFCBDataNonpaged_SIZEOF // bytes
	'FFCn' // tag
	0 // flags
	MmAllocWithTag ok! fcbnp!

	if (ok@)
		fcbdata@ MmFree

		-1 // writeout
		fcb@ // fcb
		IOFileControlBlockDelete drop

		return
	end

	if (filetype@ OSFILETYPE_DIRECTORY ==)
		OSDEFAULTDIRPERMISSIONS fcbdata@ FatFCBData_SavedPermissions + !
	end else
		OSDEFAULTFILEPERMISSIONS fcbdata@ FatFCBData_SavedPermissions + !
	end

	fcbnp@ fcbdata@ FatFCBData_Nonpaged + !
	fcbdata@ fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + !

	0 fcbdata@ FatFCBData_ParentFCBData + !
	0 fcbdata@ FatFCBData_LeftChild + !
	0 fcbdata@ FatFCBData_RightChild + !

	0 fcbdata@ FatFCBData_ParentDirDCB + !

	fcb@ fcbdata@ FatFCBData_FCB + !

	0 fcbdata@ FatFCBData_ReclaimNext + !
	0 fcbdata@ FatFCBData_ReclaimPrev + !

	0 fcbdata@ FatFCBData_Name + !

	if (namelen@)
		if (filetype@ OSFILETYPE_DIRECTORY ==)
			fcbdata@ FatDCBData_SIZEOF + // dest
			name@ // src
			namelen@ // sz
			memcpy

			fcbdata@ FatDCBData_SIZEOF +
			fcbdata@ FatFCBData_Name + !
		end else
			fcbdata@ FatFCBData_SIZEOF + // dest
			name@ // src
			namelen@ // sz
			memcpy

			fcbdata@ FatFCBData_SIZEOF +
			fcbdata@ FatFCBData_Name + !
		end
	end

	0 fcbdata@ FatFCBData_LongDirentOffset + !
	0 fcbdata@ FatFCBData_ShortDirentOffset + !

	0 fcbdata@ FatFCBData_StartingCluster + !

	flags@ fcbdata@ FatFCBData_InitialFlags + !
	1 fcbdata@ FatFCBData_References + !

	0 fcbdata@ FatFCBData_Flags + !

	-1 fcbnp@ FatFCBDataNonpaged_LastFATLinkClusterOff + !
	0 fcbnp@ FatFCBDataNonpaged_LastFATLinkValue + !

	if (filetype@ OSFILETYPE_DIRECTORY ==)
		0 fcbdata@ FatDCBData_SplayTreeRoot + !
		0 fcbdata@ FatDCBData_DirentHint + !
		-1 fcbdata@ FatDCBData_LastDirentIndex + !
		0 fcbdata@ FatDCBData_FreeDirentCount + !

		0 // sizeinbits
		0 // data
		fcbdata@ FatDCBData_DirentBitmapHeader + // header
		ComBitmapInitialize
	end
end

fn FatFCBDelete { writeout fcb -- }
	fnsection "PAGE$text"

	auto fcbdata
	fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

	if (fcbdata@ FatFCBData_ParentDirDCB + @)
		fcbdata@ FatFCBData_ParentDirDCB + @ FatFCBDereference
	end

	if (fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FileType + @
		OSFILETYPE_DIRECTORY ==)

		if (DEBUGCHECKS)
			if (fcbdata@ FatDCBData_SplayTreeRoot + @)
				"FatFCBDelete: directory cache had children\n" KeCrash
			end
		end

		auto bmp
		fcbdata@ FatDCBData_DirentBitmapHeader + ComBitmapGetData bmp!

		if (bmp@)
			bmp@ MmFree
		end
	end

	writeout@ // writeout
	fcb@ // fcb
	IOFileControlBlockDelete drop

	fcbdata@ FatFCBData_Nonpaged + @ MmFree
	fcbdata@ MmFree
end

fn FatFCBMeasureSize { fcb -- ok }
	fnsection "PAGE$text"

	auto fcbdata
	fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FSContext + @ fcbdata!

	auto mount
	fcb@ FSFileControlBlockGetMount mount!

	auto length
	fcbdata@ FatFCBData_StartingCluster + @ // cluster
	mount@ // mount
	FatClusterChainMeasureLength ok! length!

	if (ok@)
		return
	end

	length@
	mount@ IOMount_Extension + @ FatData_ClusterSizeShift + @ <<
	fcb@ IOFileControlBlock_SizeInBytes + !
end

fn FatFCBReference { fcb -- }
	fnsection "PAGE$text"

end

fn FatFCBDereference { fcb -- }
	fnsection "PAGE$text"

end

fn FatFileUpdate { fcb -- }
	fnsection "PAGE$text"

end