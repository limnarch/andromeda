//
// Implements directory management for the FAT driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/FSRTL.h"

#include "<inc>/ViewCache.h"

#include "Fat.h"

fn (IODispatchReadDirectoryFunction) FatReadDirectory { seek dirent fcb -- nextseek ok }
	fnsection "PAGE$text"

	STATUS_NOT_IMPLEMENTED ok!
end

fn (IODispatchUnlinkFunction) FatUnlink { name dirfcb -- ok }
	fnsection "PAGE$text"

	STATUS_NOT_IMPLEMENTED ok!
end

fn (IODispatchRenameFunction) FatRename { srcname srcfcb destname destfcb -- ok }
	fnsection "PAGE$text"

	STATUS_NOT_IMPLEMENTED ok!
end

fn FatRootDirectoryCreate { mount -- ok }
	fnsection "PAGE$text"

	// create the FCB for the root directory.

	auto fatdata
	mount@ IOMount_Extension + @ fatdata!

	auto fcb
	0 // flags
	OSFILETYPE_DIRECTORY // filetype
	mount@ // mount
	FatFCBCreate ok! fcb!

	if (ok@)
		return
	end

	auto fcbdata
	fcb@ IOFileControlBlockGetContext fcbdata!

	// set root directory as its own parent

	fcb@ fcbdata@ FatFCBData_ParentDirFCB + !

	fatdata@ FatData_RootFirstCluster + @ fcbdata@ FatFCBData_StartingCluster + !

	if (fatdata@ FatData_FatType + @ 32 ==)
		// the root directory has a cluster chain in FAT32.

		fcb@ FatFCBMeasureSize ok!

		if (ok@)
			-1 // writeout
			fcb@ // fcb
			FatFCBDelete

			return
		end
	end else
		// the root directory has a fixed size in FAT12/16.

		fatdata@ FatData_RootEntryCount + @ FatDirectoryEntry_SIZEOF *
		fcb@ IOFileControlBlockSetSize
	end

	fcb@ mount@ IOMount_RootFCB + !
end