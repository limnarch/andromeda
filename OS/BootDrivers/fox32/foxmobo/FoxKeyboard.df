//
// Implements the fox32 keyboard driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALMap.h"
#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALfox32IO.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALConsole.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/Console.h"

const KBD_PORT 0x80000500

const SCANCOUNT 84

const KEYBD_SHIFT 1
const KEYBD_CTRL  2
const KEYBD_CAPS  4
const KEYBD_ARROW 8

const SCANCODEBUFFERSIZE 32 // must be power of two

struct Keyboard
	SCANCODEBUFFERSIZE ScanCodeBuffer

	4 ReadIndex
	4 WriteIndex
	4 Remaining

	4 States
	4 PendingArrowKey

	4 RequestListHead
	4 RequestListTail
endstruct

table DriverKeyboardDispatch
	0                                    // open
	0                                    // close
	0                                    // iocontrol
	0                                    // reserved
	0                                    // reserved
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reclaim fcb
	pointerof DriverKeyboardCancel       // cancel request
	pointerof DriverKeyboardRead         // read
	0                                    // reserved
endtable

table DriverKeyboard
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"keyboard"                           // name
	pointerof DriverKeyboardDispatch     // dispatch table
	0                                    // flags

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

var Fox32Keyboard 0

rosection "INIT$text"

fn Fox32KeyboardInit { -- }
	auto dev
	auto ok

	Keyboard_SIZEOF // extensionsize
	OSFILETYPE_CHARDEVICE // type
	"foxkbd0" // name
	0 // sizeinbytes
	DriverKeyboard // driver
	ACCESS_OWNER_READ ACCESS_GROUP_READ | // permissions
	IODeviceCreate ok! dev!

	if (ok@)
		ok@ "Fox32KeyboardInit: failed to create foxkbd0 (%i)\n" KeCrash
	end

	auto keyboard
	dev@ IODevice_Extension + @ keyboard!

	0 keyboard@ Keyboard_States + !
	0 keyboard@ Keyboard_PendingArrowKey + !

	0 keyboard@ Keyboard_RequestListHead + !
	0 keyboard@ Keyboard_RequestListTail + !

	0 keyboard@ Keyboard_ReadIndex + !
	0 keyboard@ Keyboard_WriteIndex + !
	SCANCODEBUFFERSIZE keyboard@ Keyboard_Remaining + !

	if (CoVideoConsoleInputDevice@ ~~)
		// no device specified as video console input buffer, make that us
		keyboard@ CoVideoConsoleInputDevice!
	end

	keyboard@ Fox32Keyboard!
end

rosection "text"

fn (IODispatchEnqueueIOPFunction) DriverKeyboardRead { iopl -- done ok }
	1 done!
	0 ok!

	auto keyboard
	iopl@ IOPacketLocation_FileControlBlock + @ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_DeviceObject + @ IODevice_Extension + @ keyboard!

	auto iop
	iopl@ IOPacketFromLocation iop!

	if (iopl@ IOPacketLocation_Length + @ ~~)
		0 // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	auto mdl
	iop@ IOPacketHeader_MDL + @ mdl!

	1 // lockforwrite
	mdl@ // mdl
	MmMDLPin ok!

	if (ok@)
		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	mdl@ MmMDLMap ok!

	if (ok@)
		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow

		return
	end

	auto buf
	iopl@ IOPacketLocationMappedBuffer buf!

	auto length
	iopl@ IOPacketLocation_Length + @ length!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto rp
	keyboard@ Keyboard_ReadIndex + @ rp!

	auto bytecnt
	keyboard@ Keyboard_WriteIndex + @ rp@ - bytecnt!

	if (length@ bytecnt@ <)
		length@ bytecnt!
	end

	if (bytecnt@)
		auto endp
		rp@ bytecnt@ + endp!

		if (rp@ SCANCODEBUFFERSIZE 1 - ~ & endp@ 1 - SCANCODEBUFFERSIZE 1 - ~ & ==)
			// doesn't cross the boundary, do a single copy

			buf@ // dest
			keyboard@ Keyboard_ScanCodeBuffer + rp@ SCANCODEBUFFERSIZE 1 - & + // src
			bytecnt@ // sz
			memcpy
		end else
			// crosses the boundary, do two copies

			buf@ // dest
			keyboard@ Keyboard_ScanCodeBuffer + rp@ SCANCODEBUFFERSIZE 1 - & + // src
			SCANCODEBUFFERSIZE rp@ SCANCODEBUFFERSIZE 1 - & - // sz
			memcpy

			buf@ SCANCODEBUFFERSIZE rp@ SCANCODEBUFFERSIZE 1 - & - + // dest
			keyboard@ Keyboard_ScanCodeBuffer + // src
			endp@ SCANCODEBUFFERSIZE 1 - & // sz
			memcpy
		end

		endp@ keyboard@ Keyboard_ReadIndex + !
		bytecnt@ keyboard@ Keyboard_Remaining + +=
	end

	if (bytecnt@ length@ ~=)
		if (iop@ IOPacketHeader_Timeout + @)
			// enqueue

			STATUS_OTHER_CONDITION ok!

			bytecnt@ iopl@ IOPacketLocation_Offset + !
			keyboard@ iopl@ IOPacketLocation_Context + !

			0 iop@ IOPacketHeader_DeviceQueueNext + !

			auto t
			keyboard@ Keyboard_RequestListTail + @ t!

			t@ iop@ IOPacketHeader_DeviceQueuePrev + !

			if (t@ ~~)
				iop@ keyboard@ Keyboard_RequestListHead + !
			end else
				iop@ t@ IOPacketHeader_DeviceQueueNext + !
			end

			iop@ keyboard@ Keyboard_RequestListTail + !

			iop@ IOPacketWasEnqueued
		end else
			bytecnt@ iop@ IOPacketHeader_StatusBlock + OSStatusBlock_Length + !
		end
	end

	ipl@ KeIPLLower

	if (ok@ STATUS_OTHER_CONDITION ~=)
		ok@ // status
		0 // priboost
		iop@ // iop
		IOPacketCompleteLow
	end else
		0 ok!
	end
end

fn (IODispatchCancelFunction) DriverKeyboardCancel { iop -- ok }
	0 ok!

	auto iopl
	iop@ IOPacketCurrentLocation iopl!

	auto keyboard
	iopl@ IOPacketLocation_Context + @ keyboard!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (iop@ IOPacketHeader_IOPFlagsB + gb IOPFLAG_COMPLETE &)
		// already completed, nothing to do
		ipl@ KeIPLLower
		return
	end

	auto ls
	auto ns

	iop@ IOPacketHeader_DeviceQueuePrev + @ ls!
	iop@ IOPacketHeader_DeviceQueueNext + @ ns!

	if (ls@)
		ns@ ls@ IOPacketHeader_DeviceQueueNext + !
	end else
		ns@ keyboard@ Keyboard_RequestListHead + !
	end

	if (ns@)
		ls@ ns@ IOPacketHeader_DeviceQueuePrev + !
	end else
		ls@ keyboard@ Keyboard_RequestListTail + !
	end

	ipl@ KeIPLLower

	STATUS_IO_CANCELLED // status
	0 // priboost
	iop@ // iop
	IOPacketCompleteLow
end

fn Fox32KeyboardPoll { -- }
	if (Fox32Keyboard@ ~~)
		return
	end

	auto scanbuf
	Fox32Keyboard@ Keyboard_ScanCodeBuffer + scanbuf!

	auto c
	auto scan

	while (1)
		Fox32Keyboard@ KeyboardRead c! scan!

		if (scan@ -1 ==)
			break
		end

		if (scan@ -2 ~=)
			if (scan@ 0x8000 &)
				scan@ 0xFF & 0x80 | scan!
			end

			auto iop
			Fox32Keyboard@ Keyboard_RequestListHead + @ iop!

			if (iop@)
				auto iopl
				iop@ IOPacketCurrentLocation iopl!

				auto buf
				iopl@ IOPacketLocationMappedBuffer buf!

				scan@
				buf@ iopl@ IOPacketLocation_Offset + @ + sb

				1 iopl@ IOPacketLocation_Offset + +=
				1 iopl@ IOPacketLocation_Length + -=

				if (iopl@ IOPacketLocation_Length + @ ~~)
					auto niop
					iop@ IOPacketHeader_DeviceQueueNext + @ niop!

					// complete the client MDL.

					0 // status
					IOBOOSTKEYBOARD // priboost
					iop@ // mdl
					IOPacketComplete

					// unlink the client request.

					niop@ iop!
					iop@ Fox32Keyboard@ Keyboard_RequestListHead + !

					if (iop@)
						0 iop@ IOPacketHeader_DeviceQueuePrev + !
					end else
						0 Fox32Keyboard@ Keyboard_RequestListTail + !
					end
				end
			end elseif (Fox32Keyboard@ Keyboard_Remaining + @)
				// insert into the buffer

				scan@
				scanbuf@ Fox32Keyboard@ Keyboard_WriteIndex + @ SCANCODEBUFFERSIZE 1 - & + sb

				1 Fox32Keyboard@ Keyboard_Remaining + -=
				1 Fox32Keyboard@ Keyboard_WriteIndex + +=
			end
		end

		if (CoVideoConsoleInputDevice@ Fox32Keyboard@ ==)
			if (CoVideoConsole@)
				if (c@ -1 ~=)
					c@ CoVideoConsoleInputCharacter
				end
			end
		end
	end
end

fn KeyboardRead { keyboard -- scan c }
	if (keyboard@ Keyboard_States + @ KEYBD_ARROW &)
		KEYBD_ARROW ~ keyboard@ Keyboard_States + &=
		-2 scan!
		'[' c!
		return
	end elseif (keyboard@ Keyboard_PendingArrowKey + @)
		-2 scan!
		keyboard@ Keyboard_PendingArrowKey + @ c!
		0 keyboard@ Keyboard_PendingArrowKey + !
		return
	end

	KBD_PORT HALfox32In scan!

	-1 c!

	if (scan@ 0 ==)
		-1 scan!
		return
	end

	if (scan@ 0x1D ==)
		KEYBD_CTRL keyboard@ Keyboard_States + |=
		return
	end elseif (scan@ 0x2A == scan@ 0x36 == ||)
		KEYBD_SHIFT keyboard@ Keyboard_States + |=
		return
	end elseif (scan@ 0x9D ==)
		KEYBD_CTRL ~ keyboard@ Keyboard_States + &=
		return
	end elseif (scan@ 0xAA == scan@ 0xB6 == ||)
		KEYBD_SHIFT ~ keyboard@ Keyboard_States + &=
		return
	end elseif (scan@ 0xBA ==)
		if (keyboard@ Keyboard_States + @ KEYBD_CAPS &)
			KEYBD_CAPS ~ keyboard@ Keyboard_States + &=
		end else
			KEYBD_CAPS keyboard@ Keyboard_States + |=
		end
		return
	end

	if (scan@ 0x1C ==)
		'\r' c!
		return
	end elseif (scan@ 0x0E ==)
		'\b' c!
		return
	end elseif (scan@ 0x67 ==) // up
		0x1B c!
		KEYBD_ARROW keyboard@ Keyboard_States + |=
		'A' keyboard@ Keyboard_PendingArrowKey + !
		return
	end elseif (scan@ 0x69 ==) // left
		0x1B c!
		KEYBD_ARROW keyboard@ Keyboard_States + |=
		'D' keyboard@ Keyboard_PendingArrowKey + !
		return
	end elseif (scan@ 0x6A ==) // right
		0x1B c!
		KEYBD_ARROW keyboard@ Keyboard_States + |=
		'C' keyboard@ Keyboard_PendingArrowKey + !
		return
	end elseif (scan@ 0x6C ==) // down
		0x1B c!
		KEYBD_ARROW keyboard@ Keyboard_States + |=
		'B' keyboard@ Keyboard_PendingArrowKey + !
		return
	end

	if (scan@ SCANCOUNT >=)
		return
	end

	if (keyboard@ Keyboard_States + @ KEYBD_SHIFT &)
		[scan@]KeyboardLayoutShift@ c!
	end elseif (keyboard@ Keyboard_States + @ KEYBD_CTRL &)
		[scan@]KeyboardLayoutCtrl@ c!
	end elseif (keyboard@ Keyboard_States + @ KEYBD_CAPS &)
		[scan@]KeyboardLayoutCaps@ c!
	end else
		[scan@]KeyboardLayout@ c!
	end
end

table KeyboardLayout
	-1
	-1
	'1' '2' '3' '4' '5' '6' '7' '8' '9' '0'
	'-' '=' -1  ' ' 'q' 'w' 'e' 'r' 't' 'y'
	'u' 'i' 'o' 'p' '[' ']' 0xD -1  'a' 's'
	'd' 'f' 'g' 'h' 'j' 'k' 'l' ';' '\'' '`'
	-1 '\\' 'z' 'x' 'c' 'v' 'b' 'n' 'm' ','
	'.' '/' -1  '*' -1  ' ' -1  -1  -1  -1    // <- F3
	-1  -1  -1  -1  -1  -1  -1  -1  -1  '7'
	'8' '9' '-' '4' '5' '6' '+' '1' '2' '3'
	'0' '.'
endtable

table KeyboardLayoutCtrl
	-1
	-1
	'1' 0   '3' '4' '5' '6' '7' '8' '9' '0'
	'-' '=' -1  ' ' 17  23  5   18  20  25
	21  9   15  16  27  29  0xD -1  1   19
	4   6   7   8   10  11  12  ';' '\'' 30
	-1  28  26  24  3   22  2   14  13  ','
	'.' '/' -1  '*' -1  ' ' -1  -1  -1  -1    // <- F3
	-1  -1  -1  -1  -1  -1  -1  -1  -1  '7'
	'8' '9' '-' '4' '5' '6' '+' '1' '2' '3'
	'0' '.'
endtable

table KeyboardLayoutShift
	-1
	-1
	'!' '@' '#' '$' '%' '^' '&' '*' '(' ')'
	'_' '+' -1  ' ' 'Q' 'W' 'E' 'R' 'T' 'Y'
	'U' 'I' 'O' 'P' '{' '}' 0xD -1  'A' 'S'
	'D' 'F' 'G' 'H' 'J' 'K' 'L' ':' '\"' '~'
	-1  '|' 'Z' 'X' 'C' 'V' 'B' 'N' 'M' '<'
	'>' '?' -1  '*' -1  ' ' -1  -1  -1  -1    // <- F3
	-1  -1  -1  -1  -1  -1  -1  -1  -1  '7'
	'8' '9' '-' '4' '5' '6' '+' '1' '2' '3'
	'0' '.'
endtable

table KeyboardLayoutCaps
	-1
	-1
	'1' '2' '3' '4' '5' '6' '7' '8' '9' '0'
	'-' '=' -1  ' ' 'Q' 'W' 'E' 'R' 'T' 'Y'
	'U' 'I' 'O' 'P' '[' ']' 0xD -1  'A' 'S'
	'D' 'F' 'G' 'H' 'J' 'K' 'L' ';' '\'' '`'
	-1 '\\' 'Z' 'X' 'C' 'V' 'B' 'N' 'M' ','
	'.' '/' -1  '*' -1  ' ' -1  -1  -1  -1    // <- F3
	-1  -1  -1  -1  -1  -1  -1  -1  -1  '7'
	'8' '9' '-' '4' '5' '6' '+' '1' '2' '3'
	'0' '.'
endtable