//
// Implements the fox32 mouse driver.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALMap.h"
#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALfox32IO.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALConsole.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OSMouseControl.h"

const MSE_PORT 0x80000400
const MSE_PORT_BUTTONS 0
const MSE_PORT_POS     1

var Fox32MouseButtonLast 0
var Fox32MousePosLast 0

const PACKETBUFFERSIZE (OSMousePacket_SIZEOF 4 *)

struct Mouse
	PACKETBUFFERSIZE PacketBuffer

	4 ReadIndex
	4 WriteIndex
	4 Remaining

	4 RequestListHead
	4 RequestListTail
endstruct

struct MouseRequest
	4 Next
	4 Prev

	4 Mouse
	4 MDL
	4 Buffer
	4 Length
endstruct

table DriverMouseDispatch
	0                                    // open
	0                                    // close
	0                                    // iocontrol
	pointerof DriverMouseRead            // read
	0                                    // write
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reclaim fcb
	pointerof DriverMouseCancel          // cancel request
	0                                    // reserved
	0                                    // reserved
endtable

table DriverMouse
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"mouse"                              // name
	OSFILETYPE_CHARDEVICE                // type
	pointerof DriverMouseDispatch        // dispatch table
	Mouse_SIZEOF                         // extension size

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

var Fox32Mouse 0

rosection "INIT$text"

fn Fox32MouseInit { -- }
	fnsection "INIT$text"

	auto dev
	auto ok
	"foxmouse0" // name
	0 // sizeinbytes
	DriverMouse // driver
	ACCESS_OWNER_READ ACCESS_GROUP_READ | // permissions
	IODeviceCreate ok! dev!

	if (ok@)
		ok@ "Fox32MouseInit: failed to create foxmouse0 (%i)\n" KeCrash
	end

	auto mouse
	dev@ IODeviceGetExtension mouse!

	0 mouse@ Mouse_RequestListHead + !
	0 mouse@ Mouse_RequestListTail + !

	0 mouse@ Mouse_ReadIndex + !
	0 mouse@ Mouse_WriteIndex + !
	PACKETBUFFERSIZE mouse@ Mouse_Remaining + !

	mouse@ Fox32Mouse!
end

rosection "text"

fn (IODispatchCancelFunction) DriverMouseCancel { mdl -- }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto ior
	mdl@ MmMDLHeader_DriverGoWild + ior!

	if (mdl@ MmMDLHeader_Flags + @ MMMDL_COMPLETE &)
		// already completed, nothing to do
		ipl@ KeIPLLower
		return
	end

	auto mouse
	ior@ MouseRequest_Mouse + @ mouse!

	auto ls
	auto ns

	ior@ MouseRequest_Prev + @ ls!
	ior@ MouseRequest_Next + @ ns!

	if (ls@)
		ns@ ls@ MouseRequest_Next + !
	end else
		ns@ mouse@ Mouse_RequestListHead + !
	end

	if (ns@)
		ls@ ns@ MouseRequest_Prev + !
	end else
		ls@ mouse@ Mouse_RequestListTail + !
	end

	ipl@ KeIPLLower

	STATUS_IO_CANCELLED // status
	0 // priboost
	mdl@ // mdl
	MmMDLComplete
end

fn (IODispatchReadFunction) DriverMouseRead { timeout flags kflags offset mdl fcb -- ok }
	0 ok!

	if (mdl@ MmMDLHeader_Length + @ OSMousePacket_SIZEOF %)
		STATUS_UNALIGNED ok!
		return
	end

	auto mouse
	fcb@ IOFileControlBlock_DeviceObject + @ IODeviceGetExtension mouse!

	if (mdl@ MmMDLHeader_Length + @ ~~)
		0 // status
		0 // priboost
		mdl@ // mdl
		MmMDLComplete

		return
	end

	1 // lockforwrite
	mdl@ // mdl
	MmMDLPin ok!

	if (ok@)
		return
	end

	auto buf

	if (mdl@ MmMDLHeader_Pages + @ 1 >)
		mdl@ MmMDLMap ok!

		if (ok@)
			return
		end

		mdl@ MmMDLHeader_MappedAddress + @ buf!
	end else
		// only one page, copy thru identityspace as a time saver
		mdl@ MmMDLHeader_SIZEOF + @ MmPageFrameDatabase@ - MmPageFrameEntry_SIZEOF / PAGESHIFT << IDENTITYSPACE |
		mdl@ MmMDLHeader_VirtualAddress + @ PAGEOFFSETMASK & + buf!
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto rp
	mouse@ Mouse_ReadIndex + @ rp!

	auto bytecnt
	mouse@ Mouse_WriteIndex + @ rp@ - bytecnt!

	if (mdl@ MmMDLHeader_Length + @ bytecnt@ <)
		mdl@ MmMDLHeader_Length + @ bytecnt!
	end

	if (bytecnt@)
		auto endp
		rp@ bytecnt@ + endp!

		if (rp@ PACKETBUFFERSIZE 1 - ~ & endp@ PACKETBUFFERSIZE 1 - ~ & ==)
			// doesn't cross the boundary, do a single copy

			buf@ // dest
			mouse@ Mouse_PacketBuffer + rp@ PACKETBUFFERSIZE 1 - & + // src
			bytecnt@ // sz
			memcpy
		end else
			// crosses the boundary, do two copies

			buf@ // dest
			mouse@ Mouse_PacketBuffer + rp@ PACKETBUFFERSIZE 1 - & + // src
			PACKETBUFFERSIZE rp@ PACKETBUFFERSIZE 1 - & - // sz
			memcpy

			buf@ PACKETBUFFERSIZE rp@ PACKETBUFFERSIZE 1 - & - + // dest
			mouse@ Mouse_PacketBuffer + // src
			endp@ PACKETBUFFERSIZE 1 - & // sz
			memcpy
		end

		endp@ mouse@ Mouse_ReadIndex + !
		bytecnt@ mouse@ Mouse_Remaining + +=
	end

	if (bytecnt@ mdl@ MmMDLHeader_Length + @ ~=)
		if (timeout@)
			// enqueue

			STATUS_OTHER_CONDITION ok!

			auto ior
			mdl@ MmMDLHeader_DriverGoWild + ior!

			mouse@ ior@ MouseRequest_Mouse + !
			mdl@ ior@ MouseRequest_MDL + !
			buf@ bytecnt@ + ior@ MouseRequest_Buffer + !
			mdl@ MmMDLHeader_Length + @ bytecnt@ - ior@ MouseRequest_Length + !

			0 ior@ MouseRequest_Next + !

			auto t
			mouse@ Mouse_RequestListTail + @ t!

			t@ ior@ MouseRequest_Prev + !

			if (t@ ~~)
				ior@ mouse@ Mouse_RequestListHead + !
				ior@ mouse@ Mouse_RequestListTail + !
			end else
				ior@ t@ MouseRequest_Next + !
			end
		end else
			bytecnt@ mdl@ MmMDLHeader_Length + !
		end
	end

	ipl@ KeIPLLower

	if (ok@ ~~)
		0 // status
		0 // priboost
		mdl@ // mdl
		MmMDLComplete
	end elseif (ok@ STATUS_OTHER_CONDITION ==)
		// this means the request was enqueued successfully, so report success
		0 ok!
	end
end

fn Fox32MouseEvent { info eventtype -- }
	auto mouse
	Fox32Mouse@ mouse!

	auto eventbuf
	mouse@ Mouse_PacketBuffer + eventbuf!

	auto req
	mouse@ Mouse_RequestListHead + @ req!

	if (req@)
		info@ req@ MouseRequest_Buffer + @ OSMousePacket_Info + !
		eventtype@ req@ MouseRequest_Buffer + @ OSMousePacket_EventType + !

		OSMousePacket_SIZEOF req@ MouseRequest_Buffer + +=
		OSMousePacket_SIZEOF req@ MouseRequest_Length + -=

		if (req@ MouseRequest_Length + @ ~~)
			// complete the client MDL.

			0 // status
			0 // priboost
			req@ MouseRequest_MDL + @ // mdl
			MmMDLComplete

			// unlink the client request.

			req@ MouseRequest_Next + @ req!

			req@ mouse@ Mouse_RequestListHead + !

			if (req@)
				0 req@ MouseRequest_Prev + !
			end else
				0 mouse@ Mouse_RequestListTail + !
			end
		end
	end elseif (mouse@ Mouse_Remaining + @)
		// insert into the buffer

		info@ eventbuf@ mouse@ Mouse_WriteIndex + @ PACKETBUFFERSIZE 1 - & + OSMousePacket_Info + !
		eventtype@ eventbuf@ mouse@ Mouse_WriteIndex + @ PACKETBUFFERSIZE 1 - & + OSMousePacket_EventType + !

		OSMousePacket_SIZEOF mouse@ Mouse_Remaining + -=
		OSMousePacket_SIZEOF mouse@ Mouse_WriteIndex + +=
	end
end

fn Fox32MousePoll { -- }
	auto mousebutton
	MSE_PORT MSE_PORT_BUTTONS | HALfox32In mousebutton!

	auto mousepos
	MSE_PORT MSE_PORT_POS | HALfox32In mousepos!

	if (mousebutton@ Fox32MouseButtonLast@ ~=)
		if (mousebutton@ 1 &) // clicked
			OSMOUSEBUTTON_PRIMARY // info
			OSMOUSEEVENT_PRESSED // eventtype
			Fox32MouseEvent
		end else // released
			OSMOUSEBUTTON_PRIMARY // info
			OSMOUSEEVENT_RELEASED // eventtype
			Fox32MouseEvent
		end

		mousebutton@ Fox32MouseButtonLast!
	end

	if (mousepos@ Fox32MousePosLast@ ~=)
		mousepos@ 16 >> mousepos@ 16 << | // info
		OSMOUSEEVENT_MOVEDABS // eventtype
		Fox32MouseEvent

		mousepos@ Fox32MousePosLast!
	end
end