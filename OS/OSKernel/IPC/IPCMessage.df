//
// Implements IPC message management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALArgs.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/IPC.h"

fn IPCMessageAllocate { allowhandle umsg mode conid portobject -- clientid msg ok }
	fnsection "PAGE$text"

	portobject@ IPCPort_ZoneHeader + // zoneheader
	MmZoneAllocate ok! msg!

	if (ok@)
		if (DEBUGCHECKS)
			if (ok@ STATUS_NO_MEMORY ~=)
				ok@ "IPCMessageAllocate: odd status (%i)\n" KeCrash
			end
		end

		// try to extend the port message zone.

		portobject@ // portobject
		IPCMessageZoneExtend ok! msg!

		if (ok@)
			return
		end
	end

	0 msg@ IPCKernelMessage_PortNext + !
	0 msg@ IPCKernelMessage_PortPrev + !

	0 msg@ IPCKernelMessage_QueueNext + !
	0 msg@ IPCKernelMessage_QueuePrev + !

	portobject@ msg@ IPCKernelMessage_OriginatingPort + !
	0 msg@ IPCKernelMessage_RundownPointer + !
	0 msg@ IPCKernelMessage_Object + !
	0 msg@ IPCKernelMessage_EnqueuedTo + !

	// pull in the message header

	if (mode@ USERMODE ==)
		msg@ IPCKernelMessage_Header + // dest
		umsg@ // src
		OSMessageHeader_SIZEOF // sz
		KeSafeCopyIn ok!

		if (ok@)
			msg@ // ptr
			portobject@ IPCPort_ZoneHeader + // zoneheader
			MmZoneFree

			return
		end
	end else
		msg@ IPCKernelMessage_Header + // dest
		umsg@ // src
		OSMessageHeader_SIZEOF // sz
		memcpy
	end

	// pull in the message body

	if (msg@ IPCKernelMessage_Header + OSMessageHeader_LengthI + gi
		portobject@ IPCPort_MaximumMessageBody + @ >)
		STATUS_MESSAGE_TOO_LONG ok!

		msg@ // ptr
		portobject@ IPCPort_ZoneHeader + // zoneheader
		MmZoneFree

		return
	end

	if (msg@ IPCKernelMessage_Header + OSMessageHeader_LengthI + gi)
		if (mode@ USERMODE ==)
			msg@ IPCKernelMessage_Header + OSMessageHeader_SIZEOF + // dest
			umsg@ OSMessageHeader_SIZEOF + // src
			msg@ IPCKernelMessage_Header + OSMessageHeader_LengthI + gi // sz
			KeSafeCopyIn ok!

			if (ok@)
				msg@ // ptr
				portobject@ IPCPort_ZoneHeader + // zoneheader
				MmZoneFree

				return
			end
		end else
			msg@ IPCKernelMessage_Header + OSMessageHeader_SIZEOF + // dest
			umsg@ OSMessageHeader_SIZEOF + // src
			msg@ IPCKernelMessage_Header + OSMessageHeader_LengthI + gi // sz
			memcpy
		end
	end

	msg@ IPCKernelMessage_Header + OSMessageHeader_ClientID + @ clientid!

	if (msg@ IPCKernelMessage_Header + OSMessageHeader_Handle + @ OSNONE ~=)
		if (portobject@ IPCPort_UFlags + @ OSPORT_FLAG_NO_HANDLES &)
			0 allowhandle!
		end

		if (allowhandle@ ~~)
			msg@ // ptr
			portobject@ IPCPort_ZoneHeader + // zoneheader
			MmZoneFree

			STATUS_INVALID_ARGUMENT ok!

			return
		end

		auto passedobject
		auto access

		0 // type
		msg@ IPCKernelMessage_Header + OSMessageHeader_Handle + @ // handle
		ObObjectReferenceByHandle ok! passedobject! access!

		if (ok@)
			msg@ // ptr
			portobject@ IPCPort_ZoneHeader + // zoneheader
			MmZoneFree

			return
		end

		if (access@ ACCESS_NOINHERIT &)
			msg@ // ptr
			portobject@ IPCPort_ZoneHeader + // zoneheader
			MmZoneFree

			passedobject@ ObObjectDereferenceByPointer drop

			STATUS_PERMISSION_DENIED ok!

			return
		end

		ACCESS_ALL access &=

		if (access@ msg@ IPCKernelMessage_Header + OSMessageHeader_Access + @ | access@ ~=)
			// not a subset

			msg@ // ptr
			portobject@ IPCPort_ZoneHeader + // zoneheader
			MmZoneFree

			passedobject@ ObObjectDereferenceByPointer drop

			STATUS_PERMISSION_DENIED ok!

			return
		end

		passedobject@ msg@ IPCKernelMessage_Object + !

		// no other message type allowed when passing a handle.
		OSPORT_MESSAGE_REQUEST msg@ IPCKernelMessage_Header + OSMessageHeader_TypeB + sb
	end

	// fill in the kernel-controlled parts of the message header.

	portobject@ IPCPort_ClientID + @ msg@ IPCKernelMessage_Header + OSMessageHeader_ClientID + !
	portobject@ IPCPort_ServerContextForClient + @ msg@ IPCKernelMessage_Header + OSMessageHeader_Context + !

	if (msg@ IPCKernelMessage_Header + OSMessageHeader_TypeB + gb OSPORT_MESSAGE_REPLY ==)
		msg@ IPCKernelMessage_Header + OSMessageHeader_ConversationID + @ conid!
	end else
		// don't let clients prank the server into thinking there was a
		// connection or disconnection when there wasn't.
		OSPORT_MESSAGE_REQUEST msg@ IPCKernelMessage_Header + OSMessageHeader_TypeB + sb
	end

	if (conid@ OSPORT_CONID_NEW ==)
		portobject@ IPCPort_NextConversationID + @ conid!

		conid@ msg@ IPCKernelMessage_Header + OSMessageHeader_ConversationID + !

		if (conid@ -1 ==)
			// overflow correctly
			OSPORT_CONID_FIRSTDYNAMIC portobject@ IPCPort_NextConversationID + !
		end else
			conid@ 1 + portobject@ IPCPort_NextConversationID + !
		end
	end else
		conid@ msg@ IPCKernelMessage_Header + OSMessageHeader_ConversationID + !
	end
end

fn IPCMessageFree { msg -- }
	fnsection "PAGE$text"

	if (msg@ IPCKernelMessage_Object + @)
		msg@ IPCKernelMessage_Object + @ ObObjectDereferenceByPointer drop
	end

	msg@ // ptr
	msg@ IPCKernelMessage_OriginatingPort + @ IPCPort_ZoneHeader + // zoneheader
	MmZoneFree
end

fn IPCMessageZoneExtend { portobject -- msg ok }
	fnsection "PAGE$text"

	auto msgzonesize
	IPCKernelMessage_SIZEOF portobject@ IPCPort_MaximumMessageBody + @ +
	IPCMESSAGEEXTENSION *
	MMZONEOVERHEAD + msgzonesize!

	auto quotablock
	portobject@ ObObjectNonpagedHeader ObNonpagedHeader_QuotaBlock + @ quotablock!

	auto charge
	msgzonesize@ MmChargeBytesGet charge!

	// charge the quotablock for the extra extension

	charge@ // charge
	quotablock@ // quotablock
	MmQuotaBlockChargePaged ok!

	if (ok@)
		return
	end

	// allocate the chunk

	auto chunk
	msgzonesize@ // bytes
	'PoZx' // tag
	PAGED // flags
	MmAllocWithTag ok! chunk!

	if (ok@)
		charge@ // charge
		quotablock@ // quotablock
		MmQuotaBlockUnchargePaged

		return
	end

	msgzonesize@ // bytes
	chunk@ // chunk
	portobject@ IPCPort_ZoneHeader + // zoneheader
	MmZoneExtend

	charge@ portobject@ IPCPort_ZoneExtensionCharge + +=

	portobject@ IPCPort_ZoneHeader + // zoneheader
	MmZoneAllocate ok! msg!

	if (DEBUGCHECKS)
		if (ok@)
			"IPCMessageZoneExtend: failed to allocate even though just extended\n" KeCrash
		end
	end
end

fn IPCMessageEnqueueRundown { msg -- }
	fnsection "PAGE$text"

	// add message to port rundown list

	auto msgport
	msg@ IPCKernelMessage_OriginatingPort + @ msgport!

	auto t
	msgport@ IPCPort_SentListTail + @ t!

	t@ msg@ IPCKernelMessage_PortPrev + !

	if (t@ ~~)
		msg@ msgport@ IPCPort_SentListHead + !
	end else
		msg@ t@ IPCKernelMessage_PortNext + !
	end

	msg@ msgport@ IPCPort_SentListTail + !
end

fn IPCMessageDequeueRundown { msg -- }
	fnsection "PAGE$text"

	// remove message from port rundown list

	auto msgport
	msg@ IPCKernelMessage_OriginatingPort + @ msgport!

	auto ls
	auto ns

	msg@ IPCKernelMessage_PortPrev + @ ls!
	msg@ IPCKernelMessage_PortNext + @ ns!

	if (ls@)
		ns@ ls@ IPCKernelMessage_PortNext + !
	end else
		ns@ msgport@ IPCPort_SentListHead + !
	end

	if (ns@)
		ls@ ns@ IPCKernelMessage_PortPrev + !
	end else
		ls@ msgport@ IPCPort_SentListTail + !
	end
end

fn IPCMessageDequeue { msg -- }
	fnsection "PAGE$text"

	// remove message from queue

	auto portobject
	msg@ IPCKernelMessage_EnqueuedTo + @ portobject!

	1 portobject@ IPCPort_QueueLength + -=

	auto ls
	auto ns

	msg@ IPCKernelMessage_QueuePrev + @ ls!
	msg@ IPCKernelMessage_QueueNext + @ ns!

	if (ls@)
		ns@ ls@ IPCKernelMessage_QueueNext + !
	end else
		ns@ portobject@ IPCPort_MessageListHead + !
	end

	if (ns@)
		ls@ ns@ IPCKernelMessage_QueuePrev + !
	end else
		ls@ portobject@ IPCPort_MessageListTail + !
	end

	0 msg@ IPCKernelMessage_EnqueuedTo + !
end