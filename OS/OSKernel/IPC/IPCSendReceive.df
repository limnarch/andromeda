//
// Implements port connection.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALArgs.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/IPC.h"

#include "IPCInternal.h"

fn IPCPortSendAndWaitReceiveObject { mode rxmsg txmsg timeout portobject -- ok }
	fnsection "PAGE$text"

	IPCiThreadBlockCreate ok!

	if (ok@)
		return
	end

	auto ipl
	1 IPCiGlobalLock ok! ipl!

	if (ok@)
		return
	end

	auto otherport

	auto clientid

	if (txmsg@)
		0 // allowhandle
		txmsg@ // umsg
		mode@ // mode
		OSPORT_CONID_NEW // conid
		portobject@ // portobject
		IPCiMessageAllocate ok! txmsg! clientid!

		if (ok@)
			ipl@ IPCiGlobalUnlock

			return
		end

		if (portobject@ IPCiPort_Flags + @ IPCPORTFLAG_CLIENT &)
			// we are a client port sending to the server

			portobject@ IPCiPort_ServerPort + @ otherport!

			if (otherport@ ~~)
				// disconnected

				txmsg@ IPCiMessageFree

				ipl@ IPCiGlobalUnlock

				STATUS_PORT_DISCONNECTED ok!

				return
			end
		end else
			// we are a server port sending to a client

			auto clienttable
			portobject@ IPCiPort_ClientTableHeader + @ clienttable!

			clienttable@ ExHandleTableLockShared ok!

			if (ok@)
				txmsg@ IPCiMessageFree

				ipl@ IPCiGlobalUnlock

				return
			end

			clientid@ // handle
			clienttable@ // handletable
			1 // locked
			ExHandleTableLookupAndReferenceObject ok! otherport!

			if (ok@)
				clienttable@ ExHandleTableUnlock

				txmsg@ IPCiMessageFree

				ipl@ IPCiGlobalUnlock

				if (ok@ STATUS_INVALID_HANDLE ==)
					STATUS_NO_SUCH_CLIENT ok!
				end

				return
			end

			if (otherport@ IPCiPort_Flags + @ IPCPORTFLAG_UNFINISHED_CONNECTION &)
				// connection not yet accepted

				clienttable@ ExHandleTableUnlock

				txmsg@ IPCiMessageFree

				ipl@ IPCiGlobalUnlock

				otherport@ ObObjectDereferenceByPointer drop

				STATUS_INVALID_ARGUMENT ok!

				return
			end

			clienttable@ ExHandleTableUnlock

			otherport@ ObObjectDereferenceByPointer drop
		end

		txmsg@ // msg
		otherport@ // portobject
		IPCiPortSendMessage ok!

		if (ok@)
			ipl@ IPCiGlobalUnlock

			return
		end
	end else
		if (portobject@ IPCiPort_Flags + @ IPCPORTFLAG_CLIENT &)
			portobject@ IPCiPort_ServerPort + @ otherport!

			if (otherport@ ~~)
				ipl@ IPCiGlobalUnlock

				STATUS_PORT_DISCONNECTED ok!

				return
			end
		end
	end

	if (rxmsg@)
		// receive

		ipl@ // ipl
		rxmsg@ // umsg
		mode@ // mode
		0 // clientid
		OSPORT_CONID_ANY // conid
		timeout@ // timeout
		portobject@ // portobject
		IPCiPortReceiveMessage ok!
	end

	ipl@ IPCiGlobalUnlock
end

fn IPCPortSendAndWaitReceive { mode rxmsg txmsg timeout porthandle -- ok }
	fnsection "PAGE$text"

	auto portobject
	IPCPortObjectType@ // type
	porthandle@ // handle
	ObObjectReferenceByHandle ok! portobject! drop

	if (ok@)
		return
	end

	if (portobject@ IPCiPort_OwningProcess + @ KeThreadCurrent@ KeThread_Process + @ ~=)
		portobject@ ObObjectDereferenceByPointer drop

		STATUS_PERMISSION_DENIED ok!

		return
	end

	mode@ // mode
	rxmsg@ // rxmsg
	txmsg@ // txmsg
	timeout@ // timeout
	portobject@ // portobject
	IPCPortSendAndWaitReceiveObject ok!

	portobject@ ObObjectDereferenceByPointer drop
end

fn IPCPortSendAndWaitReplyObject { mode rxmsg txmsg timeout portobject -- ok }
	fnsection "PAGE$text"

	IPCiThreadBlockCreate ok!

	if (ok@)
		return
	end

	auto ipl
	1 IPCiGlobalLock ok! ipl!

	if (ok@)
		return
	end

	auto otherport

	auto clientid
	auto conid

	1 // allowhandle
	txmsg@ // umsg
	mode@ // mode
	OSPORT_CONID_NEW // conid
	portobject@ // portobject
	IPCiMessageAllocate ok! txmsg! clientid!

	if (ok@)
		ipl@ IPCiGlobalUnlock

		return
	end

	auto object
	txmsg@ IPCiKernelMessage_Object + @ object!

	txmsg@ IPCiKernelMessage_Header + OSMessageHeader_ConversationID + @ conid!

	if (portobject@ IPCiPort_Flags + @ IPCPORTFLAG_CLIENT &)
		// we are a client port sending to the server

		0 clientid!

		portobject@ IPCiPort_ServerPort + @ otherport!

		if (otherport@ ~~)
			// disconnected

			txmsg@ IPCiMessageFree

			ipl@ IPCiGlobalUnlock

			STATUS_PORT_DISCONNECTED ok!

			return
		end
	end else
		// we are a server port sending to a client

		auto clienttable
		portobject@ IPCiPort_ClientTableHeader + @ clienttable!

		clienttable@ ExHandleTableLockShared ok!

		if (ok@)
			txmsg@ IPCiMessageFree

			ipl@ IPCiGlobalUnlock

			return
		end

		clientid@ // handle
		clienttable@ // handletable
		1 // locked
		ExHandleTableLookupAndReferenceObject ok! otherport!

		if (ok@)
			clienttable@ ExHandleTableUnlock

			txmsg@ IPCiMessageFree

			ipl@ IPCiGlobalUnlock

			if (ok@ STATUS_INVALID_HANDLE ==)
				STATUS_NO_SUCH_CLIENT ok!
			end

			return
		end

		if (otherport@ IPCiPort_Flags + @ IPCPORTFLAG_UNFINISHED_CONNECTION &)
			// connection not yet accepted

			clienttable@ ExHandleTableUnlock

			txmsg@ IPCiMessageFree

			ipl@ IPCiGlobalUnlock

			otherport@ ObObjectDereferenceByPointer drop

			STATUS_INVALID_ARGUMENT ok!

			return
		end

		clienttable@ ExHandleTableUnlock

		otherport@ ObObjectDereferenceByPointer drop
	end

	txmsg@ // msg
	otherport@ // portobject
	IPCiPortSendMessage ok!

	if (ok@)
		ipl@ IPCiGlobalUnlock

		return
	end

	// receive

	ipl@ // ipl
	rxmsg@ // umsg
	mode@ // mode
	clientid@ // clientid
	conid@ // conid
	timeout@ // timeout
	portobject@ // portobject
	IPCiPortReceiveMessage ok!

	if (object@)
		if (txmsg@ IPCiKernelMessage_Object + @)
			// the object wasn't consumed, clear the pointer so it never is
			// since we're about to dereference it.

			0 txmsg@ IPCiKernelMessage_Object + !

			ipl@ IPCiGlobalUnlock
		end else
			// the object was consumed; the message was left around so we
			// could check whether it was or not, so free the message now.

			txmsg@ IPCiMessageFree

			ipl@ IPCiGlobalUnlock
		end

		// return our reference to the passed object.

		object@ ObObjectDereferenceByPointer drop
	end else
		ipl@ IPCiGlobalUnlock
	end
end

fn IPCPortSendAndWaitReply { mode rxmsg txmsg timeout porthandle -- ok }
	fnsection "PAGE$text"

	auto portobject
	IPCPortObjectType@ // type
	porthandle@ // handle
	ObObjectReferenceByHandle ok! portobject! drop

	if (ok@)
		return
	end

	if (portobject@ IPCiPort_OwningProcess + @ KeThreadCurrent@ KeThread_Process + @ ~=)
		portobject@ ObObjectDereferenceByPointer drop

		STATUS_PERMISSION_DENIED ok!

		return
	end

	mode@ // mode
	rxmsg@ // rxmsg
	txmsg@ // txmsg
	timeout@ // timeout
	portobject@ // portobject
	IPCPortSendAndWaitReplyObject ok!

	portobject@ ObObjectDereferenceByPointer drop
end