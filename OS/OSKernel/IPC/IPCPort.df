//
// Implements the executive port object.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALArgs.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/IPC.h"

fn (ObTypeOpenFunction) IPCPortObjectOpen { access object process -- ok }
	fnsection "PAGE$text"

	0 ok!

	if (process@ object@ IPCPort_OwningProcess + @ ~=)
		STATUS_PERMISSION_DENIED ok!
	end
end

fn (ObTypeDeleteFunction) IPCPortObjectDelete { object -- }
	fnsection "PAGE$text"

	auto ok

	auto clienttable

	auto ipl
	0 IPCGlobalLock drop ipl!

	// rundown all of my messages still out there in a queue

	auto msg

	while (1)
		object@ IPCPort_SentListHead + @ msg!

		if (msg@ ~~)
			break
		end

		msg@ IPCMessageDequeueRundown

		if (msg@ IPCKernelMessage_RundownPointer + @)
			0 msg@ IPCKernelMessage_RundownPointer + @ !
		end else
			msg@ IPCMessageDequeue
		end

		msg@ IPCMessageFree
	end

	if (object@ IPCPort_Flags + @ IPCPORTFLAG_CLIENT &)
		// it's a client, check if there's a server port still.

		if (object@ IPCPort_ServerPort + @)
			if (object@ IPCPort_Flags + @ IPCPORTFLAG_UNFINISHED_CONNECTION & ~~)
				auto kdms
				object@ IPCPort_DisconnectionMessage + @ kdms!

				object@ IPCPort_ServerContextForClient + @ kdms@ IPCKernelMessage_Header + OSMessageHeader_Context + !
				OSPORT_MESSAGE_DISCONNECT kdms@ IPCKernelMessage_Header + OSMessageHeader_TypeB + sb
				object@ IPCPort_ClientID + @ kdms@ IPCKernelMessage_Header + OSMessageHeader_ClientID + !

				object@ IPCPort_DisconnectionMessage + @ // msg
				object@ IPCPort_ServerPort + @ // portobject
				IPCPortSendMessage drop
			end

			// remove client ID from server's table

			object@ IPCPort_ServerPort + @ IPCPort_ClientTableHeader + @ clienttable!

			object@ IPCPort_ClientID + @ // handle
			clienttable@ // handletable
			0 // locked
			ExHandleDelete ok! drop drop

			if (DEBUGCHECKS)
				if (ok@)
					"IPCPortObjectDelete: failed to delete handle (%i)\n" KeCrash
				end
			end
		end
	end else
		object@ IPCPort_ClientTableHeader + @ clienttable!

		pointerof IPCPortHandleDestroyFunction // func
		clienttable@ // handletable
		ExHandleTableDelete
	end

	// orphan all of the pending messages in my queue

	while (1)
		object@ IPCPort_MessageListHead + @ msg!

		if (msg@ ~~)
			break
		end

		msg@ IPCMessageDequeueRundown
		msg@ IPCMessageDequeue

		if (msg@ IPCKernelMessage_Object + @ ~~)
			msg@ IPCMessageFree
		end
	end

	ipl@ IPCGlobalUnlock

	object@ IPCPort_OwningProcess + @ ObObjectDereferenceByPointer drop

	// destroy my zone

	object@ IPCPort_ZoneHeader + MmZoneEmpty

	// uncharge quota for zone extensions

	if (object@ IPCPort_ZoneExtensionCharge + @)
		object@ IPCPort_ZoneExtensionCharge + @ // charge
		object@ ObObjectNonpagedHeader ObNonpagedHeader_QuotaBlock + @ // quotablock
		MmQuotaBlockUnchargePaged
	end
end

fn (ExHandleEnumFunction) IPCPortHandleDestroyFunction { entryptr handle handletable -- ok }
	fnsection "PAGE$text"

	0 ok!

	auto clientport
	entryptr@@ clientport!

	0 clientport@ IPCPort_ServerPort + !

	while (1)
		auto waiter
		clientport@ IPCPort_WaiterListHead + @ waiter!

		if (waiter@ ~~)
			break
		end

		-1 // rxmsg
		waiter@ // waiter
		clientport@ // portobject
		IPCPortWakeWaiter
	end

	clientport@ IPCPort_DisconnectionMessage + @ IPCMessageFree
end

fn IPCPortCreateObject { flags maxlen serverport owningprocess permissions name -- portobject ok }
	fnsection "PAGE$text"

	if (maxlen@ 3 &)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	auto msgzonesize

	if (serverport@)
		serverport@ IPCPort_UFlags + @ flags!
		serverport@ IPCPort_MaximumMessageBody + @ maxlen!

		IPCKernelMessage_SIZEOF maxlen@ +
		IPCINITIALMESSAGES_CLIENT *
		MMZONEOVERHEAD + msgzonesize!
	end else
		IPCKernelMessage_SIZEOF maxlen@ +
		IPCINITIALMESSAGES_SERVER *
		MMZONEOVERHEAD + msgzonesize!
	end

	name@ // name
	0 // flags
	permissions@ // permissions
	0 // npquotabias
	msgzonesize@ MmChargeBytesGet // pquotabias
	IPCPort_SIZEOF // bodysize
	IPCPortObjectType@ // type
	ObObjectCreate ok! portobject!

	if (ok@)
		return
	end

	0 portobject@ IPCPort_MessageListHead + !
	0 portobject@ IPCPort_MessageListTail + !

	0 portobject@ IPCPort_QueueLength + !

	0 portobject@ IPCPort_SentListHead + !
	0 portobject@ IPCPort_SentListTail + !

	0 portobject@ IPCPort_WaiterListHead + !
	0 portobject@ IPCPort_WaiterListTail + !

	0 portobject@ IPCPort_Flags + !

	flags@ portobject@ IPCPort_UFlags + !

	0 portobject@ IPCPort_ServerContextForClient + !

	OSPORT_CONID_FIRSTDYNAMIC portobject@ IPCPort_NextConversationID + !

	owningprocess@ portobject@ IPCPort_OwningProcess + !

	0 portobject@ IPCPort_ZoneExtensionCharge + !

	0 portobject@ IPCPort_DisconnectionMessage + !

	auto chunk
	msgzonesize@ // bytes
	'PoZn' // tag
	PAGED // flags
	MmAllocWithTag ok! chunk!

	if (ok@)
		portobject@ ObObjectDeallocate

		return
	end

	msgzonesize@ // bytes
	chunk@ // chunk
	IPCKernelMessage_SIZEOF maxlen@ + // blocksize
	portobject@ IPCPort_ZoneHeader + // zoneheader
	MmZoneInitialize

	auto clienttable

	if (serverport@)
		// this is a client port.

		serverport@ portobject@ IPCPort_ServerPort + !
		0 portobject@ IPCPort_ClientTableHeader + !

		// provide a way to inform the server that a client is not consuming
		// its messages before the server exhausts all of its pool quota.
		16 portobject@ IPCPort_MaximumQueueLength + !

		auto kdms
		OSMessageHeader_SIZEOF alloc kdms!

		0 kdms@ OSMessageHeader_LengthI + si
		OSNONE kdms@ OSMessageHeader_Handle + !

		0 // allowhandle
		kdms@ // umsg
		KERNELMODE // mode
		OSPORT_CONID_DISCONNECT // conid
		serverport@ // portobject
		IPCMessageAllocate ok! kdms! drop

		if (ok@)
			chunk@ MmFree

			portobject@ ObObjectDeallocate

			return
		end

		kdms@ portobject@ IPCPort_DisconnectionMessage + !

		serverport@ IPCPort_ClientTableHeader + @ clienttable!

		auto clientid
		portobject@ // entryvalue
		clienttable@ // handletable
		0 // locked
		ExHandleCreate ok! drop clientid!

		if (ok@)
			kdms@ IPCMessageFree

			chunk@ MmFree

			portobject@ ObObjectDeallocate

			return
		end

		clientid@ portobject@ IPCPort_ClientID + !

		IPCPORTFLAG_CLIENT portobject@ IPCPort_Flags + |=
		IPCPORTFLAG_UNFINISHED_CONNECTION portobject@ IPCPort_Flags + |=
	end else
		// this IS a server port.

		0 portobject@ IPCPort_ClientID + !

		0 portobject@ IPCPort_ServerPort + !

		-1 portobject@ IPCPort_MaximumQueueLength + !

		portobject@ // context
		owningprocess@ PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ // quotablock
		0 // entrysizelog
		ExHandleTableCreate ok! clienttable!

		if (ok@)
			chunk@ MmFree

			portobject@ ObObjectDeallocate

			return
		end

		clienttable@ portobject@ IPCPort_ClientTableHeader + !
	end

	owningprocess@ ObObjectReferenceByPointer drop

	maxlen@ portobject@ IPCPort_MaximumMessageBody + !
end

fn IPCPortCreate { flags maxlen permissions name -- porthandle ok }
	fnsection "PAGE$text"

	auto portobject
	flags@ // flags
	maxlen@ // maxlen
	0 // serverport
	KeProcessCurrent // owningprocess
	permissions@ // permissions
	name@ // name
	IPCPortCreateObject ok! portobject!

	if (ok@)
		return
	end

	1 // nocheck
	ACCESS_ALL ACCESS_NOINHERIT | // access
	portobject@ // object
	KeProcessCurrent // process
	ObObjectOpenProcess ok! porthandle!

	if (ok@)
		portobject@ ObObjectDereferenceByPointer drop
	end
end

fn IPCPortReferenceProcessByClientID { clientid portobject -- processobject ok }
	fnsection "PAGE$text"

	auto clienttable
	portobject@ IPCPort_ClientTableHeader + @ clienttable!

	clienttable@ ExHandleTableLockShared ok!

	if (ok@)
		return
	end

	auto otherport
	clientid@ // handle
	clienttable@ // handletable
	1 // locked
	ExHandleTableLookupAndReferenceObject ok! otherport!

	if (ok@)
		clienttable@ ExHandleTableUnlock

		if (ok@ STATUS_INVALID_HANDLE ==)
			STATUS_NO_SUCH_CLIENT ok!
		end

		return
	end

	if (otherport@ IPCPort_Flags + @ IPCPORTFLAG_UNFINISHED_CONNECTION &)
		clienttable@ ExHandleTableUnlock

		otherport@ ObObjectDereferenceByPointer drop

		STATUS_NO_SUCH_CLIENT ok!

		return
	end

	otherport@ IPCPort_OwningProcess + @ processobject!
	processobject@ ObObjectReferenceByPointer drop

	clienttable@ ExHandleTableUnlock

	otherport@ ObObjectDereferenceByPointer drop
end

fn IPCPortOpenProcessByClientID { access clientid porthandle -- processhandle ok }
	fnsection "PAGE$text"

	auto portobject
	IPCPortObjectType@ // type
	porthandle@ // handle
	ObObjectReferenceByHandle ok! portobject! drop

	if (ok@)
		return
	end

	if (portobject@ IPCPort_OwningProcess + @ KeThreadCurrent@ KeThread_Process + @ ~=)
		portobject@ ObObjectDereferenceByPointer drop

		STATUS_PERMISSION_DENIED ok!

		return
	end

	if (portobject@ IPCPort_Flags + @ IPCPORTFLAG_CLIENT &)
		portobject@ ObObjectDereferenceByPointer drop

		STATUS_INVALID_OBJECT_TYPE ok!

		return
	end

	auto processobject
	clientid@ // clientid
	portobject@ // portobject
	IPCPortReferenceProcessByClientID ok! processobject!

	portobject@ ObObjectDereferenceByPointer drop

	if (ok@)
		return
	end

	0 // nocheck
	access@ // access
	processobject@ // object
	KeProcessCurrent // process
	ObObjectOpenProcess ok! processhandle!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop
	end
end

fn IPCPortWakeWaiter { rxmsg waiter portobject -- }
	fnsection "PAGE$text"

	// store message pointer

	rxmsg@ waiter@ IPCThreadBlock_RXMessage + !
	
	if (rxmsg@ -1 ~=)
		waiter@ IPCThreadBlock_RXMessage + rxmsg@ IPCKernelMessage_RundownPointer + !
	end

	// dequeue waiter

	waiter@ // waiter
	portobject@ // portobject
	IPCPortWaiterDequeue

	// signal event

	IPCBOOST // priboost
	waiter@ IPCThreadBlock_Event + // event
	KeEventSignal
end

fn IPCPortSendMessage { msg portobject -- ok }
	fnsection "PAGE$text"

	// assumes global rwlock is held shared and port object queue is locked.

	// add the message to the queue for the port object.
	// if there are any waiters with a matching conversation ID, wake them.
	// if the message type is OSPORT_MESSAGE_REPLY, the message can only go to
	// someone waiting on that specific conversation ID. if it is any other,
	// the message can only go to someone waiting on any message.
	//
	// caller should have verified that the destination port is connected to
	// the source port. client source does this by grabbing ServerPort
	// atomically with enqueuing the message. server source does this by
	// carefully checking the client port's pointer count in a similar manner
	// to how referencing a process by PID works. this must be atomic with
	// calling this function i.e. IPL is raised to IPLDPC for the duration of
	// the check and the operation of this function.

	0 ok!

	msg@ IPCMessageEnqueueRundown

	// wake up waiter

	auto conid
	msg@ IPCKernelMessage_Header + OSMessageHeader_ConversationID + @ conid!

	auto msgtype
	msg@ IPCKernelMessage_Header + OSMessageHeader_TypeB + gb msgtype!

	auto waiter
	portobject@ IPCPort_WaiterListHead + @ waiter!

	while (waiter@)
		auto wake
		0 wake!

		if (msgtype@ OSPORT_MESSAGE_REPLY ==)
			if (waiter@ IPCThreadBlock_WaitingConversationID + @ conid@ ==)
				if (waiter@ IPCThreadBlock_WaitingClientID + @ msg@ IPCKernelMessage_Header + OSMessageHeader_ClientID + @ ==)
					1 wake!
				end
			end
		end elseif (waiter@ IPCThreadBlock_WaitingConversationID + @ OSPORT_CONID_ANY ==)
			1 wake!
		end

		if (wake@)
			msg@ // rxmsg
			waiter@ // waiter
			portobject@ // portobject
			IPCPortWakeWaiter

			return
		end

		waiter@ IPCThreadBlock_WaiterNext + @ waiter!
	end

	// add message to message queue

	if (portobject@ IPCPort_QueueLength + @ portobject@ IPCPort_MaximumQueueLength + @ >=)
		// full. just ditch the message.

		msg@ IPCMessageDequeueRundown
		msg@ IPCMessageFree

		STATUS_PORT_QUEUE_FULL ok!

		return
	end

	1 portobject@ IPCPort_QueueLength + +=

	auto t
	portobject@ IPCPort_MessageListTail + @ t!

	t@ msg@ IPCKernelMessage_QueuePrev + !

	if (t@ ~~)
		msg@ portobject@ IPCPort_MessageListHead + !
	end else
		msg@ t@ IPCKernelMessage_QueueNext + !
	end

	msg@ portobject@ IPCPort_MessageListTail + !

	portobject@ msg@ IPCKernelMessage_EnqueuedTo + !
end

fn IPCPortReceiveMessage { ipl umsg mode clientid conid timeout portobject -- ok }
	fnsection "PAGE$text"

	// entered with port queue mutex held, and global rwlock held shared.

	0 ok!

	auto msg
	portobject@ IPCPort_MessageListHead + @ msg!

	while (msg@)
		auto found
		0 found!

		if (conid@ OSPORT_CONID_ANY ==)
			if (msg@ IPCKernelMessage_Header + OSMessageHeader_TypeB + gb OSPORT_MESSAGE_REPLY ~=)
				1 found!
			end
		end elseif (msg@ IPCKernelMessage_Header + OSMessageHeader_TypeB + gb OSPORT_MESSAGE_REPLY ==)
			if (msg@ IPCKernelMessage_Header + OSMessageHeader_ConversationID + @ conid@ ==)
				if (msg@ IPCKernelMessage_Header + OSMessageHeader_ClientID + @ clientid@ ==)
					1 found!
				end
			end
		end

		if (found@)
			// dequeue message

			msg@ IPCMessageDequeue

			break
		end

		msg@ IPCKernelMessage_QueueNext + @ msg!
	end

	if (msg@ ~~)
		// no matching message

		if (timeout@ ~~)
			// nonblocking

			STATUS_NO_MESSAGE ok!

			return
		end

		// build & enqueue a waiter block

		auto waiter
		KeThreadCurrent@ PsThread_IPCBlock + @ waiter!

		if (DEBUGCHECKS)
			if (waiter@ ~~)
				"IPCPortReceiveMessage: no ipcblock\n" KeCrash
			end
		end

		conid@ waiter@ IPCThreadBlock_WaitingConversationID + !
		clientid@ waiter@ IPCThreadBlock_WaitingClientID + !
		0 waiter@ IPCThreadBlock_RXMessage + !

		0 waiter@ IPCThreadBlock_WaiterNext + !

		waiter@ // waiter
		portobject@ // portobject
		IPCPortWaiterEnqueue

		// NOTE: event should already be initialized and cleared

		ipl@ IPCGlobalUnlock

		mode@ // waitmode
		1 // alertable
		timeout@ // timeout
		waiter@ IPCThreadBlock_Event + // object
		KeThreadWaitForObject ok!

		0 IPCGlobalLock drop ipl!

		waiter@ IPCThreadBlock_RXMessage + @ msg!

		if (msg@ ~~)
			// we were awoken before the message could be received.
			// our waiter block is still enqueued so remove it.

			waiter@ // waiter
			portobject@ // portobject
			IPCPortWaiterDequeue

			return
		end elseif (msg@ -1 ==)
			// the other port disconnected. our waiter block is not enqueued,
			// do not remove it.

			STATUS_PORT_DISCONNECTED ok!

			return
		end

		// the message was received successfully.
		// ignore any status code we got from waiting on the event.

		0 ok!
	end

	// remove this message from rundown list since its in our custody now

	msg@ IPCMessageDequeueRundown

	auto msgport
	msg@ IPCKernelMessage_OriginatingPort + @ msgport!

	// reference any passed object

	auto object
	msg@ IPCKernelMessage_Object + @ object!

	if (object@)
		msg@ IPCKernelMessage_Object + @ ObObjectReferenceByPointer drop
		0 msg@ IPCKernelMessage_Object + !
	end elseif (msg@ IPCKernelMessage_Header + OSMessageHeader_TypeB + gb OSPORT_MESSAGE_IOCOMPLETE ~=)
		OSNONE msg@ IPCKernelMessage_Header + OSMessageHeader_Handle + !
	end

	if (object@)
		// open object in our handle table and save the handle in the message

		auto handle
		1 // nocheck
		msg@ IPCKernelMessage_Header + OSMessageHeader_Access + @ // access
		object@ // object
		KeProcessCurrent // process
		ObObjectOpenProcess ok! handle!

		handle@ msg@ IPCKernelMessage_Header + OSMessageHeader_Handle + !

		if (ok@)
			// failed to open the object
			object@ ObObjectDereferenceByPointer drop
		end
	end

	if (ok@ ~~)
		// opening the object worked, copy contents

		if (mode@ USERMODE ==)
			umsg@ // dest
			msg@ IPCKernelMessage_Header + // src
			msg@ IPCKernelMessage_Header + OSMessageHeader_LengthI + gi OSMessageHeader_SIZEOF + // sz
			KeSafeCopyOut ok!

			if (ok@)
				if (object@)
					// failed to copy, close the object
					handle@ ObObjectClose drop
				end
			end
		end else
			umsg@ // dest
			msg@ IPCKernelMessage_Header + // src
			msg@ IPCKernelMessage_Header + OSMessageHeader_LengthI + gi OSMessageHeader_SIZEOF + // sz
			memcpy
		end
	end

	if (object@ ~~)
		// free to message zone. don't free if there's a passed object because
		// the synchronous IPC call will free the message instead.

		msg@ IPCMessageFree
	end
end

fn IPCPortWaiterEnqueue { waiter portobject -- }
	fnsection "PAGE$text"

	// protected by queue lock.

	auto t
	portobject@ IPCPort_WaiterListTail + @ t!

	t@ waiter@ IPCThreadBlock_WaiterPrev + !

	if (t@ ~~)
		waiter@ portobject@ IPCPort_WaiterListHead + !
	end else
		waiter@ t@ IPCThreadBlock_WaiterNext + !
	end

	waiter@ portobject@ IPCPort_WaiterListTail + !
end

fn IPCPortWaiterDequeue { waiter portobject -- }
	fnsection "PAGE$text"

	// protected by queue lock.

	auto ls
	auto ns

	waiter@ IPCThreadBlock_WaiterPrev + @ ls!
	waiter@ IPCThreadBlock_WaiterNext + @ ns!

	if (ls@)
		ns@ ls@ IPCThreadBlock_WaiterNext + !
	end else
		ns@ portobject@ IPCPort_WaiterListHead + !
	end

	if (ns@)
		ls@ ns@ IPCThreadBlock_WaiterPrev + !
	end else
		ls@ portobject@ IPCPort_WaiterListTail + !
	end
end

fn IPCThreadBlockCreate { -- ok }
	fnsection "PAGE$text"

	if (KeThreadCurrent@ PsThread_IPCBlock + @)
		0 ok!

		return
	end

	IPCThreadBlock_SIZEOF MmChargeBytesGet // charge
	KeThreadCurrent@ KeThread_Process + @ PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ // quotablock
	MmQuotaBlockCharge ok!

	if (ok@)
		return
	end

	auto ipcblock
	IPCThreadBlock_SIZEOF // bytes
	'IPCt' // tag
	CANBLOCK // flags
	MmAllocWithTag ok! ipcblock!

	if (ok@)
		IPCThreadBlock_SIZEOF MmChargeBytesGet // charge
		KeThreadCurrent@ KeThread_Process + @ PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ // quotablock
		MmQuotaBlockUncharge

		return
	end

	0 ipcblock@ IPCThreadBlock_WaiterNext + !
	0 ipcblock@ IPCThreadBlock_WaiterPrev + !

	0 ipcblock@ IPCThreadBlock_WaitingConversationID + !
	0 ipcblock@ IPCThreadBlock_WaitingClientID + !

	0 ipcblock@ IPCThreadBlock_RXMessage + !

	0 // signaled
	OSEVENT_SYNCH // type
	"IPCWaiterEvent" // name
	ipcblock@ IPCThreadBlock_Event + // event
	KeEventInitialize

	ipcblock@ KeThreadCurrent@ PsThread_IPCBlock + !
end