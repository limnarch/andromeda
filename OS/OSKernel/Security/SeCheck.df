//
// Implements object access, and process permission checking.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Object.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn SePermissionsInitialize { inheritfrom permissions -- }
	fnsection "PAGE$text"

	auto p
	permissions@ SePermissions_PermissionsBitmap + p!

	if (inheritfrom@)
		p@ // dest
		inheritfrom@ // src
		SEPERMISSIONSBITMAPSIZE // size
		memcpy
	end else
		p@ // ptr
		SEPERMISSIONSBITMAPSIZE // size
		0 // word
		memset
	end
end

fn SeProcessGrantPermission { permission process -- ok }
	fnsection "PAGE$text"

	if (permission@ SEMAXPERMISSION >=)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	0 ok!

	auto p
	process@ PsProcess_PagedArea + @ PsProcessPaged_Permissions + SePermissions_PermissionsBitmap + p!

	permission@ 8 / p +=

	p@ gb 1 permission@ 7 & << | p@ sb
end

fn SeProcessCheckPermission { permission process -- ok }
	fnsection "PAGE$text"

	0 ok!

	if (process@ PsProcess_PagedArea + @ PsProcessPaged_UID + @ UID_SYSTEM ==)
		return
	end

	if (permission@ process@ SeProcessCheckPermission1)
		return
	end

	STATUS_PERMISSION_DENIED ok!
end

fn SeProcessCheckPermission1 { permission process -- ok }
	fnsection "PAGE$text"

	auto p
	process@ PsProcess_PagedArea + @ PsProcessPaged_Permissions + SePermissions_PermissionsBitmap + p!

	permission@ 8 / p +=

	p@ gb permission@ 7 & >> 1 & ok!
end

fn SeAmIAdmin { -- admin }
	fnsection "PAGE$text"

	SYSTEMPERMISSION_ADMIN // permission
	KeProcessCurrent // process
	SeProcessCheckPermission admin!
end

fn SeCheckAccess { access permission -- ok }
	fnsection "PAGE$text"

	if (access@ ACCESS_ALL & permission@ & permission@ ==)
		0 ok!
	end else
		STATUS_PERMISSION_DENIED ok!
	end
end

fn SeCheckAccessFilesystemX { access permbits owninguid owninggid process -- ok }
	fnsection "PAGE$text"

	auto pagedarea
	process@ PsProcess_PagedArea + @ pagedarea!

	ACCESS_ALL access &=

	auto shift

	if (owninguid@ pagedarea@ PsProcessPaged_UID + @ ==)
		6 shift! // owner
	end elseif (owninggid@ pagedarea@ PsProcessPaged_GID + @ ==)
		3 shift! // group
	end else
		0 shift! // world
	end

	permbits@ shift@ >> ACCESS_ALL & permbits!

	if (permbits@ access@ | permbits@ ==)
		// access is a subset of the permissions we have.

		0 ok!

		return
	end

	if (pagedarea@ PsProcessPaged_UID + @ UID_SYSTEM ==)
		// access isn't a subset, but we are the system user, so continue
		// anyway.

		0 ok!

		return
	end

	if (owninguid@ UID_SYSTEM ==)
		// access isn't a subset, and we aren't the system user, and the owner
		// of this object is the system user. permission is denied.

		STATUS_PERMISSION_DENIED ok!

		return
	end

	// if we are an admin, we can access all objects except those owned by the
	// system user.

	SYSTEMPERMISSION_ADMIN // permission
	process@ // process
	SeProcessCheckPermission ok!
end

fn SeCheckAccessObjectUserX { access object process -- ok }
	fnsection "PAGE$text"

	if (object@ ObObjectType IOFileTypeObject@ ==)
		if (object@ IOFile_FileControlBlock + @ IOFileControlBlockGetType OSFILETYPE_FILE ==)
			// if we're requesting execute, don't allow if theres no X bits.
			// no matter what.

			if (access@ ACCESS_EXEC &)
				if (object@ ObObjectPagedHeader ObPagedHeader_Permissions + @ ACCESS_ANY_EXEC & ~~)
					STATUS_PERMISSION_DENIED ok!
					return
				end
			end
		end
	end

	auto pheader
	object@ ObCommonHeader_SIZEOF - ObCommonHeader_PagedHeader + @ pheader!

	access@ // access
	pheader@ ObPagedHeader_Permissions + @ // permbits
	pheader@ ObPagedHeader_UID + @ // owninguid
	pheader@ ObPagedHeader_GID + @ // owninggid
	process@ // process
	SeCheckAccessFilesystemX ok!
end

fn SeCheckAccessObjectOwnerX { object process -- ok }
	fnsection "PAGE$text"

	auto pagedarea
	process@ PsProcess_PagedArea + @ pagedarea!

	auto owninguid
	object@ ObObjectPagedHeader ObPagedHeader_UID + @ owninguid!

	if (owninguid@ pagedarea@ PsProcessPaged_UID + @ ==)
		// we are the owner.

		0 ok!

		return
	end

	if (owninguid@ UID_SYSTEM ==)
		// we aren't the owner, and this is owned by the system user.

		STATUS_PERMISSION_DENIED ok!

		return
	end

	// if we are an admin, we can access all objects except those owned by the
	// system user.

	SYSTEMPERMISSION_ADMIN // permission
	process@ // process
	SeProcessCheckPermission ok!
end