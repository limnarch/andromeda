//
// Implements object access, and process permission checking.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Object.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn SePermissionsInitialize { inheritfrom permissions -- }
	auto p
	permissions@ SePermissions_PermissionsBitmap + p!

	if (inheritfrom@)
		p@ // dest
		inheritfrom@ // src
		SEPERMISSIONSBITMAPSIZE // size
		memcpy
	end else
		p@ // ptr
		SEPERMISSIONSBITMAPSIZE // size
		0 // word
		memset
	end
end

fn SeProcessGrantPermission { permission process -- ok }
	if (permission@ SEMAXPERMISSION >=)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	0 ok!

	auto p
	process@ PsProcess_Permissions + SePermissions_PermissionsBitmap + p!

	permission@ 8 / p +=

	p@ gb 1 permission@ 7 & << | p@ sb
end

fn SeProcessCheckPermission { permission process -- ok }
	0 ok!

	if (SYSTEMPERMISSION_SYSTEM process@ SeProcessCheckPermission1)
		return
	end

	if (permission@ process@ SeProcessCheckPermission1)
		return
	end

	STATUS_PERMISSION_DENIED ok!
end

fn SeProcessCheckPermission1 { permission process -- ok }
	auto p
	process@ PsProcess_Permissions + SePermissions_PermissionsBitmap + p!

	permission@ 8 / p +=

	p@ gb permission@ 7 & >> 1 & ok!
end

fn SeAmIAdmin { -- admin }
	SYSTEMPERMISSION_ADMIN // permission
	KeProcessCurrent // process
	SeProcessCheckPermission admin!
end

fn SeCheckAccess { access permission -- ok }
	if (access@ ACCESS_ALL & permission@ & permission@ ==)
		0 ok!
	end else
		STATUS_PERMISSION_DENIED ok!
	end
end

fn SeCheckAccessFilesystemX { access permbits owninguid owninggid process -- ok }
	SYSTEMPERMISSION_ADMIN // permission
	process@ // process
	SeProcessCheckPermission ok!

	if (ok@ ~~)
		return
	end

	ACCESS_ALL access &=

	auto shift

	if (owninguid@ process@ PsProcess_UID + @ ==)
		6 shift! // owner
	end elseif (owninggid@ process@ PsProcess_GID + @ ==)
		3 shift! // group
	end else
		0 shift! // world
	end

	permbits@ shift@ >> ACCESS_ALL & permbits!

	if (permbits@ access@ | permbits@ ==)
		0 ok!
	end
end

fn SeCheckAccessObjectUserX { access object process -- ok }
	auto obh
	object@ ObHeader_SIZEOF - obh!

	if (obh@ ObHeader_TypeObject + @ IOFileTypeObject@ ==)
		// if we're requesting execute, don't allow if theres no X bits.
		// no matter what.

		if (access@ ACCESS_EXEC &)
			if (obh@ ObHeader_Permissions + @ ACCESS_ANY_EXEC & ~~)
				STATUS_PERMISSION_DENIED ok!
				return
			end
		end
	end

	access@ // access
	obh@ ObHeader_Permissions + @ // permbits
	obh@ ObHeader_UID + @ // owninguid
	obh@ ObHeader_GID + @ // owninggid
	process@ // process
	SeCheckAccessFilesystemX ok!
end

fn SeCheckAccessObjectOwnerX { object process -- ok }
	SeAmIAdmin ok!

	if (ok@ ~~)
		return
	end

	if (object@ ObHeader_SIZEOF - ObHeader_UID + @ process@ PsProcess_UID + @ ~=)
		STATUS_PERMISSION_DENIED ok!
		return
	end
end