//
// Implements Interrupt Priority Level (IPL) management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<inc>/HALInterrupt.h"

#include "<ll>/OSDLL/OSStatistics.h"
#include "<ll>/OSDLL/OSContext.h"

#include "KeInternal.h"

externptr KeIPLCurrent

var KiOldIPL 0
public KiOldIPL

var KiDispatchEvents 0
public KiDispatchEvents

var KiClockTicks 0
public KiClockTicks

// KeIPLRaise and KeIPLLower should ONLY be used to manage software interrupt
// levels. This enables them to be very lean and optimized, which is good
// since moving between software levels is by far the most common case.

fn KeIPLRaise { newipl -- oldipl }
	KeIPLCurrent@ oldipl!
	newipl@ KeIPLCurrent!

	if (DEBUGCHECKS)
		if (newipl@ oldipl@ <)
			[newipl@]HALIPLNames@ [oldipl@]HALIPLNames@ "IPL not greater or equal (old=%s new=%s)\n" KeCrash
		end

		if (newipl@ IPLDPC >)
			newipl@ "KeIPLRaise: hardware newipl %d\n" KeCrash
		end
	end
end

fn KeIPLLower { newipl -- }
	if (newipl@ KeIPLCurrent@ ==)
		return
	end

	if (DEBUGCHECKS)
		if (newipl@ KeIPLCurrent@ >)
			[newipl@]HALIPLNames@ [KeIPLCurrent@]HALIPLNames@ "IPL not less or equal (old=%s new=%s)\n" KeCrash
		end

		if (KeIPLCurrent@ IPLDPC >)
			KeIPLCurrent@ "KeIPLLower: hardware oldipl %d\n" KeCrash
		end
	end

	newipl@ KeIPLCurrent!

	// Since we already ruled out the newipl==oldipl case, this must be a
	// lowering of the IPL. Since this routine is only used for software IPLs,
	// we must be below IPLDPC, and can therefore take software interrupts.
	// We don't need interrupts disabled during the window between setting the
	// IPL and checking/dispatching software interrupts, since any interrupt
	// taken in the meantime will harmlessly dispatch the software interrupts
	// for us.

	if (KiPendingSoftwareInterrupts@)
		KiDispatchSoftwareInterrupts
	end
end

fn KiDispatchSoftwareInterrupts { -- }
	auto ipl
	KeIPLCurrent@ ipl!

	auto rs
	HALCPUInterruptDisable rs!

	auto p
	KiPendingSoftwareInterrupts@ [ipl@]KiPendingSoftwareInterruptMask@ & p!

	while (p@)
		[p@]KiPendingSoftwareInterruptFirst@ KiSoftwareInterruptHandlerF

		KiPendingSoftwareInterrupts@ [ipl@]KiPendingSoftwareInterruptMask@ & p!
	end

	// The software interrupt handlers don't restore the IPL, so we could be
	// anywhere between the old IPL and the IPL of the highest priority
	// software interrupt we took. We have to restore the correct IPL with
	// interrupts disabled, or else we could miss software interrupts due to
	// our temporarily elevated IPL being lowered without proper dispatch.

	ipl@ KeIPLCurrent!

	rs@ HALCPUInterruptRestore
end

var KiPendingSoftwareInterrupts 0
public KiPendingSoftwareInterrupts

table KiPendingSoftwareInterruptMask
	6 // IPLLOW (none masked)
	4 // IPLAPC (APCs masked)
	0 // IPLDPC (APCs and DPCs masked)
endtable
public KiPendingSoftwareInterruptMask

table KiPendingSoftwareInterruptFirst // which to service first based on the mask
	0                                // 0
	0                                // 1
	pointerof KiSoftwareInterruptAPC // 2
	pointerof KiSoftwareInterruptAPC // 3
	pointerof KiSoftwareInterruptDPC // 4
	pointerof KiSoftwareInterruptDPC // 5
	pointerof KiSoftwareInterruptDPC // 6
	pointerof KiSoftwareInterruptDPC // 7
endtable
public KiPendingSoftwareInterruptFirst

fn (KiSoftwareInterruptHandlerF) KiSoftwareInterruptAPC { -- }
	1 IPLAPC << ~ KiPendingSoftwareInterrupts &=

	if (KeThreadCurrent@ KeThread_APCListHead + @)
		IPLAPC KeIPLCurrent!

		HALCPUInterruptEnable

		KiAPCDispatchQueue

		HALCPUInterruptDisable drop
	end
end

fn (KiSoftwareInterruptHandlerF) KiSoftwareInterruptDPC { -- }
	1 IPLDPC << ~ KiPendingSoftwareInterrupts &=

	auto events
	KiDispatchEvents@ events!
	0 KiDispatchEvents!

	IPLDPC KeIPLCurrent!

	HALCPUInterruptEnable

	if (events@ KIDISPATCHIRQ_DPC &)
		KiDPCDispatchQueue
	end

	if (events@ KIDISPATCHIRQ_TIMER &)
		KiTimerExpiration
	end

	if (events@ KIDISPATCHIRQ_QUANTUMEND &)
		KiThreadQuantumEnd
	end

	if (KiThreadNext@)
		KiThreadNextSwitch
	end

	HALCPUInterruptDisable drop
end

fn KiSoftwareInterruptRequest { ipl -- }
	auto rs
	HALCPUInterruptDisable rs!

	1 ipl@ << KiPendingSoftwareInterrupts |=

	rs@ HALCPUInterruptRestore
end

fn KeClockTick { interval trapframe -- }
	auto cth
	auto stats
	auto ticks

	// called from interrupt context by the system driver.
	// responsible for noticing when the earliest timer has expired, and
	// enqueuing the expiration DPC to process them. also triggers the
	// scheduler when the current thread's quantum expires.

	KeStatistics stats!

	// update the number of clock ticks.

	1 stats@ OSStatistics_ClockTicks + +=

	KiClockTicks@ 1 + ticks!
	ticks@ KiClockTicks!

	// update the amount of time spent at the previous IPL.

	interval@ stats@ OSStatistics_IPLTimes + KiOldIPL@ 2 << + +=

	// check if the earliest timer in the current calendar queue entry has
	// expired.

	if (KiTimerExpirationTicks@ ~~)
		[ticks@ TIMERTABLESIZE 1 - & 1 << 1 +]KiTimerTable@ cth!

		if (cth@ ticks@ <=)
			cth@ KiTimerExpirationTicks!
			KIDISPATCHIRQ_TIMER KiDispatchEvents |=
			1 IPLDPC << KiPendingSoftwareInterrupts |=
		end
	end

	if (KeDPCActive@)
		interval@ stats@ OSStatistics_DPCTimeMs + +=
	end

	KeThreadCurrent@ cth!

	if (cth@ ~~)
		return
	end

	auto process
	cth@ KeThread_Process + @ process!

#ifdef XR17032
	if (trapframe@ OSContext_ers + @ XR17032_ERS_USER &)
#endif
#ifdef FOX32
	if (trapframe@ OSContext_eflagsB + gb FOX32_RS_USER &)
#endif
		interval@ cth@ KeThread_UserTimeMs + +=
		interval@ process@ KeProcess_UserTimeMs + +=
	end elseif (KiOldIPL@ IPLDPC ==)
		interval@ cth@ KeThread_DPCTimeMs + +=
		interval@ process@ KeProcess_DPCTimeMs + +=
	end else
		interval@ cth@ KeThread_SystemTimeMs + +=
		interval@ process@ KeProcess_SystemTimeMs + +=
	end

	auto qt
	cth@ KeThread_QuantumB + gb qt!

	QUANTUMUNITSPERTICK qt -=

	if (qt@ z<)
		0 qt!
	end

	if (qt@ ~~)
		KIDISPATCHIRQ_QUANTUMEND KiDispatchEvents |=
		1 IPLDPC << KiPendingSoftwareInterrupts |=
	end

	qt@ cth@ KeThread_QuantumB + sb
end