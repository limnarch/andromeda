//
// Implements the kernel process object.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALRTC.h"

#include "<inc>/Kernel.h"

#include "<ll>/OSDLL/OS.h"

var KeProcessListHead 0
public KeProcessListHead

var KeProcessSwapInListHead 0
public KeProcessSwapInListHead

fn KeProcessInitialize { name asid parentprocess process -- }
	fnsection "PAGE$text"

	process@ KeProcess_Name + name@ KEPROCESSNAMELEN 1 - strncpy

	0 process@ KeProcess_ThreadCountI + si
	0 process@ KeProcess_ThreadListHead + !

	THREADDEFAULTQUANTUMUNITS process@ KeProcess_BaseQuantumB + sb
	PRIORITY_DEFAULT process@ KeProcess_BasePriorityB + sb

	0 process@ KeProcess_SignalThread + !

	0 process@ KeProcess_TerminatedB + sb
	0 process@ KeProcess_KilledStatus + !

	0 process@ KeProcess_PageDirectory + !
	asid@ process@ KeProcess_ASID + !

	0 process@ KeProcess_UserTimeMs + !
	0 process@ KeProcess_SystemTimeMs + !
	0 process@ KeProcess_DPCTimeMs + !

	0 process@ KeProcess_SwapListNext + !
	0 process@ KeProcess_ResidentStackCountI + si
	0 process@ KeProcess_DeferredThreadListHead + !
	PROCESSSTATE_RESIDENT process@ KeProcess_MemoryStateB + sb

	asid@ HALCPUASIDRegister
end

fn KeProcessUninitialize { process -- }
	process@ KeProcess_ASID + @ HALCPUASIDUnregister
end

fn KeProcessCurrent { -- current }
	KeThreadCurrent@ KeThread_Process + @ current!
end

fn KeProcessSignal { signal process -- ok }
	if (signal@ ~~)
		STATUS_INVALID_ARGUMENT ok!
		return
	end

	if (signal@ 32 >=)
		STATUS_INVALID_ARGUMENT ok!
		return
	end

	0 ok!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (process@ KeProcess_SignalThread + @ ~~)
		ipl@ KeIPLLower
		return
	end

	if (signal@ OSSIGNAL_KILL ==)
		auto thread
		process@ KeProcess_ThreadListHead + @ thread!

		while (thread@)
			OSSIGNAL_KILL // signal
			thread@ // thread
			KeThreadSignal drop

			thread@ KeThread_ProcessNext + @ thread!
		end

		1 process@ KeProcess_TerminatedB + sb
	end else
		signal@ // signal
		process@ KeProcess_SignalThread + @ // thread
		KeThreadSignal drop
	end

	ipl@ KeIPLLower
end

fn KeProcessBasePrioritySet { priority process -- }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	priority@ process@ KeProcessBasePrioritySetDPCLevel

	ipl@ KeIPLLower
end

fn KeProcessBasePrioritySetDPCLevel { priority process -- }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"KeProcessBasePrioritySetDPCLevel: ipl != IPLDPC\n" KeCrash
		end
	end

	if (process@ KeProcess_BasePriorityB + gb priority@ ==)
		return
	end

	// iterate the list of threads for this process and increase their base
	// priority if needed.

	auto thread
	process@ KeProcess_ThreadListHead + @ thread!

	while (thread@)
		if (priority@ thread@ KeThread_BasePriorityB + gb >)
			priority@ // priority
			thread@ // thread
			KeThreadBasePrioritySet
		end

		thread@ KeThread_ProcessNext + @ thread!
	end

	priority@ process@ KeProcess_BasePriorityB + sb
end

externptr MmSwapEvent
externptr MmProcessSwapOutListHead

fn KeProcessAttach { try process -- ipl ok }
	// switch the current thread to the address space of the provided process.
	// if the process is swapped out, then swap it back in, unless try is
	// nonzero, in which case return with a nonzero status.

	auto current
	KeThreadCurrent@ current!

	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC >=)
			"KeProcessAttach: ipl >= IPLDPC\n" KeCrash
		end

		if (current@ KeThread_Process + @ current@ KeThread_ActualProcess + @ ~=)
			"KeProcessAttach: nested attachment\n" KeCrash
		end
	end

	0 ok!

	if (process@ current@ KeThread_Process + @ ==)
		return
	end

	IPLDPC KeIPLRaise ipl!

	if (process@ KeProcess_MemoryStateB + gb PROCESSSTATE_RESIDENT ~=)
		if (try@)
			ipl@ KeIPLLower

			-1 ok!

			return
		end
	end

	process@ current@ KeThread_Process + !

	process@ KeProcess_ResidentStackCountI + gi 1 +
	process@ KeProcess_ResidentStackCountI + si

	if (process@ KeProcess_MemoryStateB + gb PROCESSSTATE_RESIDENT ==)
		// immediately switch to new process.

		process@ KeProcess_ASID + @ // asid
		process@ KeProcess_PageDirectory + @ // addrinfo
		HALCPUAddressSpaceSwitch
	end else
		// enqueue thread on process ready list and wake swap thread, then
		// yield until it processes us.

		THREADSTATUS_READY current@ KeThread_StatusB + sb

		process@ KeProcess_DeferredThreadListHead + @ current@ KeThread_SwapListNext + !
		current@ process@ KeProcess_DeferredThreadListHead + !

		if (process@ KeProcess_MemoryStateB + gb PROCESSSTATE_OUTSWAPPED ==)
			// enqueue process to be swapped in

			PROCESSSTATE_TRANSITION process@ KeProcess_MemoryStateB + sb

			KeProcessSwapInListHead@ process@ KeProcess_SwapListNext + !
			process@ KeProcessSwapInListHead!
		end

		0 // priboost
		MmSwapEvent // event
		KeEventSignal

		IPLAPC current@ KeThread_WaitIPLB + sb

		0 KeThreadNextReason!
		0 KeThreadNext!

		KeThreadNextPick KeThreadSwitch
	end

	IPLAPC KeIPLLower
end

fn KeProcessDetach { ipl -- }
	auto current
	KeThreadCurrent@ current!

	auto process
	current@ KeThread_Process + @ process!

	auto actualprocess
	current@ KeThread_ActualProcess + @ actualprocess!

	if (process@ actualprocess@ ==)
		return
	end

	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLAPC ~=)
			"KeProcessDetach: ipl != IPLAPC\n" KeCrash
		end
	end

	IPLDPC KeIPLRaise drop

	process@ KeProcess_ResidentStackCountI + gi 1 -
	process@ KeProcess_ResidentStackCountI + si

	if (process@ KeProcess_ThreadCountI + gi)
		if (process@ KeProcess_ResidentStackCountI + gi ~~)
			PROCESSSTATE_TRANSITION process@ KeProcess_MemoryStateB + sb

			MmProcessSwapOutListHead@ process@ KeProcess_SwapListNext + !
			process@ MmProcessSwapOutListHead!

			0 // priboost
			MmSwapEvent // event
			KeEventSignal
		end
	end

	actualprocess@ current@ KeThread_Process + !

	actualprocess@ KeProcess_ASID + @ // asid
	actualprocess@ KeProcess_PageDirectory + @ // addrinfo
	HALCPUAddressSpaceSwitch

	ipl@ KeIPLLower
end