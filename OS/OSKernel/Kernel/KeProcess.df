//
// Implements the kernel process object.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALRTC.h"

#include "<inc>/Kernel.h"

#include "<ll>/OSDLL/OS.h"

var KeProcessListHead 0
public KeProcessListHead

var KeProcessSwapInListHead 0
public KeProcessSwapInListHead

fn KeProcessInitialize { name asid parentprocess process -- }
	fnsection "PAGE$text"

	process@ KeProcess_Name + name@ KEPROCESSNAMELEN 1 - strncpy

	0 process@ KeProcess_ThreadCountI + si
	0 process@ KeProcess_ThreadListHead + !

	THREADDEFAULTQUANTUMUNITS process@ KeProcess_BaseQuantumB + sb
	PRIORITY_DEFAULT process@ KeProcess_BasePriorityB + sb

	0 process@ KeProcess_SignalThread + !

	0 process@ KeProcess_TerminatedB + sb
	0 process@ KeProcess_KilledStatus + !

	0 process@ KeProcess_PageDirectory + !
	asid@ process@ KeProcess_ASID + !

	0 process@ KeProcess_UserTimeMs + !
	0 process@ KeProcess_SystemTimeMs + !
	0 process@ KeProcess_DPCTimeMs + !

	0 process@ KeProcess_SwapListNext + !
	0 process@ KeProcess_ResidentStackCountI + si
	0 process@ KeProcess_DeferredThreadListHead + !
	PROCESSSTATE_RESIDENT process@ KeProcess_MemoryStateB + sb

	asid@ HALCPUASIDRegister
end

fn KeProcessUninitialize { process -- }
	process@ KeProcess_ASID + @ HALCPUASIDUnregister
end

fn KeProcessCurrent { -- current }
	KeThreadCurrent@ KeThread_Process + @ current!
end

fn KeProcessSignal { signal process -- ok }
	if (signal@ ~~)
		STATUS_INVALID_ARGUMENT ok!
		return
	end

	if (signal@ 32 >=)
		STATUS_INVALID_ARGUMENT ok!
		return
	end

	0 ok!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (process@ KeProcess_SignalThread + @ ~~)
		ipl@ KeIPLLower
		return
	end

	if (signal@ OSSIGNAL_KILL ==)
		auto thread
		process@ KeProcess_ThreadListHead + @ thread!

		while (thread@)
			OSSIGNAL_KILL // signal
			thread@ // thread
			KeThreadSignal drop

			thread@ KeThread_ProcessNext + @ thread!
		end

		1 process@ KeProcess_TerminatedB + sb
	end else
		signal@ // signal
		process@ KeProcess_SignalThread + @ // thread
		KeThreadSignal drop
	end

	ipl@ KeIPLLower
end

fn KeProcessBasePrioritySet { priority process -- }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"KeProcessBasePrioritySet: ipl != IPLDPC\n" KeCrash
		end
	end

	if (process@ KeProcess_BasePriorityB + gb priority@ ==)
		return
	end

	// iterate the list of threads for this process and increase their base
	// priority if needed.

	auto thread
	process@ KeProcess_ThreadListHead + @ thread!

	while (thread@)
		if (priority@ thread@ KeThread_BasePriorityB + gb >)
			priority@ // priority
			thread@ // thread
			KeThreadBasePrioritySet
		end

		thread@ KeThread_ProcessNext + @ thread!
	end

	priority@ process@ KeProcess_BasePriorityB + sb
end