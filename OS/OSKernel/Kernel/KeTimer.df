//
// Implements the kernel timer object and timer expiration DPC.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALCPU.h"

#include "<inc>/Kernel.h"

#include "<ll>/OSDLL/OSStatus.h"

#include "KeInternal.h"

var KiTimerListHead 0
public KiTimerListHead

var KiTimerListTail 0
public KiTimerListTail

buffer KiTimerExpirationEarliest KeTime_SIZEOF
public KiTimerExpirationEarliest

buffer KiTimerExpirationDPC KeDPC_SIZEOF
public KiTimerExpirationDPC

fn KeTimeCompare { time1 time2 -- result }
	auto s1
	auto s2

	time1@ KeTime_SecPart + @ s1!
	time2@ KeTime_SecPart + @ s2!

	if (s1@ s2@ >)
		TIMELATER result!
		return
	end elseif (s1@ s2@ <)
		TIMEEARLIER result!
		return
	end else
		time1@ KeTime_MsPart + @ s1!
		time2@ KeTime_MsPart + @ s2!

		if (s1@ s2@ >)
			TIMELATER result!
			return
		end elseif (s1@ s2@ <)
			TIMEEARLIER result!
			return
		end

		TIMEEQUALTO result!
		return
	end
end

fn KeTimeAddMs { ms time -- }
	time@ KeTime_MsPart + @ ms +=

	auto sd
	ms@ 1000 / sd!

	1000 ms %=

	ms@ time@ KeTime_MsPart + !
	sd@ time@ KeTime_SecPart + +=
end

fn KeTimeSubMs { ms time -- }
	auto diff
	time@ KeTime_MsPart + @ ms@ - diff!

	if (diff@ z<)
		// underflow into seconds part

		1000 diff@ abs - time@ KeTime_MsPart + !
		time@ KeTime_SecPart + @ 1 - time@ KeTime_SecPart + !
	end else
		diff@ time@ KeTime_MsPart + !
	end
end

// timedest = time1 + time2
fn KeTimeAdd { time1 time2 timedest -- }
	auto ms
	time1@ KeTime_MsPart + @ time2@ KeTime_MsPart + @ + ms!

	auto sec
	time1@ KeTime_SecPart + @ time2@ KeTime_SecPart + @ + sec!

	if (ms@ 1000 >)
		ms@ 1000 - ms!
		1 sec +=
	end

	ms@ timedest@ KeTime_MsPart + !
	sec@ timedest@ KeTime_SecPart + !
end

// timedest = time1 - time2
fn KeTimeSub { time1 time2 timedest -- }
	auto ms
	time1@ KeTime_MsPart + @ time2@ KeTime_MsPart + @ - ms!

	auto sec
	time1@ KeTime_SecPart + @ time2@ KeTime_SecPart + @ - sec!

	if (ms@ z<)
		// underflow into seconds part

		1000 ms@ abs - timedest@ KeTime_MsPart + !
		1 sec -=
	end else
		ms@ timedest@ KeTime_MsPart + !
	end

	if (DEBUGCHECKS)
		if (sec@ z<)
			"KeTimeSub: negative seconds part\n" KeCrash
		end
	end

	sec@ timedest@ KeTime_SecPart + !
end

fn KeTimerInitialize { name function timer -- }
	name@ DISPATCHOBJECT_TIMER timer@ KiDispatchInitialize

	0 timer@ KeTimer_Next + !
	0 timer@ KeTimer_Prev + !

	0 timer@ KeTimer_Enqueued + !

	function@ timer@ KeTimer_DPC + KeDPCInitialize
end

fn KeTimerDequeue { timer -- ok }
	auto rs
	HALCPUInterruptDisable rs!

	if (timer@ KeTimer_Enqueued + @ ~~)
		rs@ HALCPUInterruptRestore

		STATUS_NOT_ENQUEUED ok!

		return
	end

	0 ok!

	0 timer@ KeTimer_Enqueued + !

	auto n
	timer@ KeTimer_Next + @ n!

	if (n@)
		timer@ KeTimer_Prev + @ n@ KeTimer_Prev + !
	end else // no next means we were the tail
		timer@ KeTimer_Prev + @ KiTimerListTail!
	end

	auto p
	timer@ KeTimer_Prev + @ p!

	if (p@)
		timer@ KeTimer_Next + @ p@ KeTimer_Next + !
	end else // no prev means we were the head
		timer@ KeTimer_Next + @ KiTimerListHead!
	end

	0 timer@ KeTimer_Next + !
	0 timer@ KeTimer_Prev + !

	rs@ HALCPUInterruptRestore
end

fn KeTimerEnqueue { context1 context2 interval timer -- ok }
	if (DEBUGCHECKS)
		if (interval@ 0 ==)
			"KeTimerEnqueue: attempt to queue a timer with 0ms interval\n" KeCrash
		end
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (timer@ KeTimer_Enqueued + @)
		ipl@ KeIPLLower

		STATUS_ALREADY_ENQUEUED ok!

		return
	end

	auto time
	KeTime_SIZEOF alloc time!

	time@ HALUptimeQuery

	auto expirytime
	timer@ KeTimer_ExpiryTime + expirytime!

	expirytime@ HALUptimeQuery

	interval@ expirytime@ KeTimeAddMs

	0 ok!

	1 timer@ KeTimer_Enqueued + !

	context1@ timer@ KeTimer_DPC + KeDPC_Context1 + !
	context2@ timer@ KeTimer_DPC + KeDPC_Context2 + !

	auto t
	KiTimerListHead@ t!

	if (t@ ~~)
		timer@ KiTimerListHead!
		timer@ KiTimerListTail!

		expirytime@ KiTimerEarliestSet

		ipl@ KeIPLLower

		return
	end

	auto p
	auto n

	while (t@)
		t@ KeTimer_ExpiryTime + time!

		auto res
		time@ expirytime@ KeTimeCompare res!

		if (res@ TIMELATER ==)
			// this timer expires later than we do, therefore we will insert
			// ourselves before it on the list

			t@ KeTimer_Prev + @ p!
			
			if (p@)
				timer@ p@ KeTimer_Next + !
			end else
				timer@ KiTimerListHead!
			end

			p@ timer@ KeTimer_Prev + !

			t@ timer@ KeTimer_Next + !
			timer@ t@ KeTimer_Prev + !

			expirytime@ KiTimerEarliestSet

			ipl@ KeIPLLower

			return
		end

		t@ KeTimer_Next + @ t!
	end

	// there were no timers on the list that expired later than us, so we go
	// at the tail

	KiTimerListTail@ t!

	t@ timer@ KeTimer_Prev + !
	timer@ t@ KeTimer_Next + !

	timer@ KiTimerListTail!

	expirytime@ KiTimerEarliestSet

	ipl@ KeIPLLower
end

fn KeTimerReset { timer -- signaled }
	auto rs
	HALCPUInterruptDisable rs!

	timer@ KeDispatchHeader_Signaled + @ signaled!
	0 timer@ KeDispatchHeader_Signaled + !

	rs@ HALCPUInterruptRestore
end

fn (DPCFunction) KiTimerExpiration { context1 context2 -- }
	auto timeatexpiry
	KeTime_SIZEOF alloc timeatexpiry!

	timeatexpiry@ HALUptimeQuery

	auto earliest
	KiTimerExpirationEarliest earliest!

	while (1)
		auto timer
		KiTimerListHead@ timer!

		if (timer@ ~~)
			break
		end

		if (DEBUGCHECKS)
			if (timer@ KeTimer_Enqueued + @ ~~)
				timer@ KeTimer_DispatchHeader + KeDispatchHeader_Name + @
				"KiTimerExpiration: timer '%s' not enqueued\n" KeCrash
			end
		end

		auto time
		timer@ KeTimer_ExpiryTime + time!

		if (time@ timeatexpiry@ KeTimeCompare TIMELATER ==)
			time@ KeTime_SecPart + @ earliest@ KeTime_SecPart + !
			time@ KeTime_MsPart + @ earliest@ KeTime_MsPart + !

			return
		end

		if (timer@ KeTimer_DPC + KeDPC_Function + @)
			timer@ KeTimer_DPC + KeDPC_Context1 + @ // context1
			timer@ KeTimer_DPC + KeDPC_Context1 + @ // context2
			DPCLOWIMPORTANCE // importance
			timer@ KeTimer_DPC + // dpc
			KeDPCEnqueue drop
		end

		0 timer@ KeTimer_Enqueued + !

		auto ok
		STATUS_WAIT_TIMEOUT // waitstatus
		0 // priboost
		timer@ // object
		KiDispatchSatisfyAll drop

		auto n
		timer@ KeTimer_Next + @ n!

		n@ KiTimerListHead!

		if (n@ ~~)
			0 KiTimerListTail!
		end else
			0 n@ KeTimer_Prev + !
		end

		0 timer@ KeTimer_Next + !
		0 timer@ KeTimer_Prev + !
	end

	-1 earliest@ KeTime_SecPart + !
	999 earliest@ KeTime_MsPart + !
end

fn KiTimerInit { -- }
	fnsection "INIT$text"

	pointerof KiTimerExpiration // function
	KiTimerExpirationDPC // dpc
	KeDPCInitialize

	-1 KiTimerExpirationEarliest KeTime_SecPart + !
	999 KiTimerExpirationEarliest KeTime_MsPart + !
end

fn KiTimerEarliestSet { time -- }
	auto earliest
	KiTimerExpirationEarliest earliest!

	auto rs
	HALCPUInterruptDisable rs!

	if (time@ earliest@ KeTimeCompare TIMEEARLIER ==)
		time@ KeTime_SecPart + @ earliest@ KeTime_SecPart + !
		time@ KeTime_MsPart + @ earliest@ KeTime_MsPart + !
	end

	rs@ HALCPUInterruptRestore
end