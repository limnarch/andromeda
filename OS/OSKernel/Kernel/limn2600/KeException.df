#include "<df>/dragonfruit.h"
#include "<inc>/HALCrash.h"

#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALConsole.h"

#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

// if this seems janked up, its because it is, because this all used to be in
// the HAL, and the process of moving it into the kernel was rough.

const ECAUSEINTERRUPT 1
const ECAUSESYS       2
const ECAUSENMI       5
const ECAUSEBRK       6
const ECAUSEINVALID   7
const ECAUSEPRIVVIOL  8
const ECAUSEUNALIGNED 9
const ECAUSEPAGEFAULT 12
const ECAUSEPAGEWRITE 13

externptr HALLIMNstationInterruptHandlers

externptr HALLIMNstationLSICClaimComplete

externptr HALLimn2500SavedEV

externptr KeThreadCurrentStackTop
externptr KeThreadCurrentStackBottom
externptr HALInterruptStackTop

externptr OSCallCount
externptr OSCallTable

externptr KeIPLCurrent

extern HALLimn2500TLBFlushAll { -- }

asm "

KeLimn2600ExceptionVector:
.global KeLimn2600ExceptionVector
	mtcr k0, t0 ; save t0 to free it as scratch
	mtcr k1, t1 ; ditto with t1
	mtcr k2, sp ; save stack pointer
	mtcr k3, sp ; save trace link

	mfcr t0, rs

	andi t1, t0, LIMN2600_ERS_USER
	beq  t1, .waskernel

	mov  sp, long [KeThreadCurrentStackTop] ; load new sp for current thread

	mtcr k3, zero ; this was a usermode sp, zero out the trace link

.waskernel:
	subi sp, sp, OSContext_SIZEOF

	mov  t1, long [HALInterruptNested]
	bne  t1, .skipoverflowcheck

	mov  t1, long [KeThreadCurrentStackBottom]
	sub  t1, sp, t1
	blt  t1, .overflow

.skipoverflowcheck:
	mfcr t1, k2
	mov  long [sp + OSContext_sp],  t1
	mov  long [sp + OSContext_ers], t0 ; ers was still in t0

	mfcr t1, epc
	mov  long [sp + OSContext_epc], t1

	mfcr t1, k0
	mov  long [sp + OSContext_t0],  t1

	mfcr t1, k1
	mov  long [sp + OSContext_t1],  t1

	mov  long [sp + OSContext_t2],  t2
	mov  long [sp + OSContext_t3],  t3
	mov  long [sp + OSContext_t4],  t4
	mov  long [sp + OSContext_t5],  t5
	mov  long [sp + OSContext_a0],  a0
	mov  long [sp + OSContext_a1],  a1
	mov  long [sp + OSContext_a2],  a2
	mov  long [sp + OSContext_a3],  a3
	mov  long [sp + OSContext_s0],  s0
	mov  long [sp + OSContext_s1],  s1
	mov  long [sp + OSContext_s2],  s2
	mov  long [sp + OSContext_s3],  s3
	mov  long [sp + OSContext_s4],  s4
	mov  long [sp + OSContext_s5],  s5
	mov  long [sp + OSContext_s6],  s6
	mov  long [sp + OSContext_s7],  s7
	mov  long [sp + OSContext_s8],  s8
	mov  long [sp + OSContext_s9],  s9
	mov  long [sp + OSContext_s10], s10
	mov  long [sp + OSContext_s11], s11
	mov  long [sp + OSContext_s12], s12
	mov  long [sp + OSContext_s13], s13
	mov  long [sp + OSContext_s14], s14
	mov  long [sp + OSContext_s15], s15
	mov  long [sp + OSContext_s16], s16
	mov  long [sp + OSContext_s17], s17
	mov  long [sp + OSContext_s18], tp
	mov  long [sp + OSContext_lr],  lr

	rshi a1, t0, 28
	andi a1, a1, 15
	mfcr a2, ebadaddr
	mov  a0, sp ; give KeLimn2600Exception our context

	subi sp, sp, 8
	mfcr t0, epc
	mov  long [sp + 4], t0
	mfcr t0, k3
	mov  long [sp], t0

	jal  KeLimn2600Exception ; call KeLimn2600Exception, to handle the exception

	addi sp, sp, 8

	mov  t0, long [sp + OSContext_ers]
	mtcr rs, t0

	mov  t0, long [sp + OSContext_epc]
	mtcr epc, t0

	mov  t0,  long [sp + OSContext_t0]
	mov  t1,  long [sp + OSContext_t1]
	mov  t2,  long [sp + OSContext_t2]
	mov  t3,  long [sp + OSContext_t3]
	mov  t4,  long [sp + OSContext_t4]
	mov  t5,  long [sp + OSContext_t5]
	mov  a0,  long [sp + OSContext_a0]
	mov  a1,  long [sp + OSContext_a1]
	mov  a2,  long [sp + OSContext_a2]
	mov  a3,  long [sp + OSContext_a3]
	mov  s0,  long [sp + OSContext_s0]
	mov  s1,  long [sp + OSContext_s1]
	mov  s2,  long [sp + OSContext_s2]
	mov  s3,  long [sp + OSContext_s3]
	mov  s4,  long [sp + OSContext_s4]
	mov  s5,  long [sp + OSContext_s5]
	mov  s6,  long [sp + OSContext_s6]
	mov  s7,  long [sp + OSContext_s7]
	mov  s8,  long [sp + OSContext_s8]
	mov  s9,  long [sp + OSContext_s9]
	mov  s10, long [sp + OSContext_s10]
	mov  s11, long [sp + OSContext_s11]
	mov  s12, long [sp + OSContext_s12]
	mov  s13, long [sp + OSContext_s13]
	mov  s14, long [sp + OSContext_s14]
	mov  s15, long [sp + OSContext_s15]
	mov  s16, long [sp + OSContext_s16]
	mov  s17, long [sp + OSContext_s17]
	mov  tp,  long [sp + OSContext_s18]

	mov  lr, long [sp + OSContext_lr]
	mov  sp, long [sp + OSContext_sp]

	rfe

.overflow:
	mov  sp, long [HALInterruptStackTop]

	subi sp, sp, 8
	mfcr t0, epc
	mov  long [sp + 4], t0
	mfcr t0, k3
	mov  long [sp], t0

	mfcr a0, rs
	jal  KeStackOverflow

.hang:
	b    .hang

LoadInitialContext:
.global LoadInitialContext
	mov  t0, long [sp + OSContext_ers]
	mtcr rs, t0

	mov  t0, long [sp + OSContext_epc]
	mtcr epc, t0

	mov  t0,  long [sp + OSContext_t0]
	mov  t1,  long [sp + OSContext_t1]
	mov  t2,  long [sp + OSContext_t2]
	mov  t3,  long [sp + OSContext_t3]
	mov  t4,  long [sp + OSContext_t4]
	mov  t5,  long [sp + OSContext_t5]
	mov  a0,  long [sp + OSContext_a0]
	mov  a1,  long [sp + OSContext_a1]
	mov  a2,  long [sp + OSContext_a2]
	mov  a3,  long [sp + OSContext_a3]
	mov  s0,  long [sp + OSContext_s0]
	mov  s1,  long [sp + OSContext_s1]
	mov  s2,  long [sp + OSContext_s2]
	mov  s3,  long [sp + OSContext_s3]
	mov  s4,  long [sp + OSContext_s4]
	mov  s5,  long [sp + OSContext_s5]
	mov  s6,  long [sp + OSContext_s6]
	mov  s7,  long [sp + OSContext_s7]
	mov  s8,  long [sp + OSContext_s8]
	mov  s9,  long [sp + OSContext_s9]
	mov  s10, long [sp + OSContext_s10]
	mov  s11, long [sp + OSContext_s11]
	mov  s12, long [sp + OSContext_s12]
	mov  s13, long [sp + OSContext_s13]
	mov  s14, long [sp + OSContext_s14]
	mov  s15, long [sp + OSContext_s15]
	mov  s16, long [sp + OSContext_s16]
	mov  s17, long [sp + OSContext_s17]
	mov  tp,  long [sp + OSContext_s18]

	mov  lr, long [sp + OSContext_lr]
	mov  sp, long [sp + OSContext_sp]

	rfe

; a0 - tf
KeLimn2600Syscall:
.global KeLimn2600Syscall
	subi sp, sp, 20
	mov  long [sp], zero
	mov  long [sp + 4], s0
	mov  long [sp + 8], s1
	mov  long [sp + 12], s17
	mov  long [sp + 16], lr

	mov  s17, a0 ;trampolines expect trapframe in s17

	mov  t1, long [a0 + OSContext_t0]
	beq  t1, .sysout

	mfcr s0, rs
	ori  s1, s0, LIMN2600_RS_INT
	mtcr rs, s1

	mov  t0, long [OSCallCount]
	slt  t0, t0, t1
	bne  t0, .sysoutrs

	la   t0, OSCallTable
	mov  t0, long [t0 + t1 LSH 2]

	jalr lr, t0, 0

.sysoutrs:
	mtcr rs, s0

.sysout:
	mov  lr, long [sp + 16]
	mov  s17, long [sp + 12]
	mov  s1, long [sp + 8]
	mov  s0, long [sp + 4]
	addi sp, sp, 20

	ret

.section INIT$text

KeCPUInit:
.global KeCPUInit
	mfcr t1, evec
	mov  long [HALLimn2500SavedEV], t1, tmp=t0

	la   t0, KeLimn2600ExceptionVector
	mtcr evec, t0

	mtcr ebadaddr, zero

	j    HALLimn2500TLBFlushAll

.section text

KeIPLCurrentGet:
.global KeIPLCurrentGet
	mov  a0, long [KeIPLCurrent]
	ret

"

extern KeLimn2600Syscall { tf -- }

const EXCNAMESMAX 15

table ExceptionNames
	"EXC0"
	"INTERRUPT"
	"SYSCALL"
	"FWCALL"
	"BUSERROR"
	"EXC5"
	"BREAKPOINT"
	"INVALIDINSTRUCTION"
	"PRIVILEGEVIOLATION"
	"UNALIGNEDADDR"
	"EXC10"
	"EXC11"
	"PAGEFAULT(READ)"
	"PAGEFAULT(WRITE)"
	"EXC14"
	"EXC15"
endtable

extern PsPrepareUsermode { trapframe -- }

fn KeStackOverflow { rs -- }
	auto current
	KeThreadCurrent@ current!

	if (current@)
		current@ KeThread_Name +
		current@ KeThread_Process + @ KeProcess_Name +
		"process '%s' thread '%s' kernel stack overflow\n" KeCrash
	end

	rs@ "Kernel stack overflow %x\n" KeCrash
end

fn KeCopySignalFrame { signum dispatchfunc thread trapframe -- recheck }
	0 recheck!

	auto usp
	trapframe@ OSContext_sp + @ usp!

	if (DEBUGCHECKS)
		if (trapframe@ OSContext_ers + @ LIMN2600_ERS_USER & ~~)
			trapframe@ "KeCopySignalFrame: not usermode trapframe %x\n" KeCrash
		end
	end

	OSContext_SIZEOF usp -=

	auto ok
	usp@ // dest
	trapframe@ // src
	OSContext_SIZEOF // sz
	KeSafeCopyOut ok!

	if (ok@)
		// failed to copy out signal frame, this is fatal to the entire
		// process.
		// XXX should it be???

		128 OSSIGNAL_KILL + thread@ KeThread_Process + @ KeProcess_KilledStatus + !

		OSSIGNAL_KILL // signal
		thread@ KeThread_Process + @ // process
		KeProcessSignal drop

		1 recheck!

		return
	end

	usp@ trapframe@ OSContext_sp + !
	dispatchfunc@ trapframe@ OSContext_epc + !
	signum@ trapframe@ OSContext_a0 + !
	usp@ trapframe@ OSContext_a1 + !

	auto process
	thread@ KeThread_Process + @ process!

	auto rs
	HALCPUInterruptDisable rs!

	1 signum@ << ~ thread@ KeThread_Signals + &=
	1 signum@ << ~ thread@ KeThread_SignalAcceptMask + &=

	rs@ HALCPUInterruptRestore
end

fn KeThreadContinue { signum context thread -- ok }
	if (signum@ -1 ~=)
		if (signum@ ~~)
			STATUS_INVALID_ARGUMENT ok!
			return
		end

		if (signum@ 32 >=)
			STATUS_INVALID_ARGUMENT ok!
			return
		end
	end

	0 ok!

	auto tf
	thread@ KeThread_TrapFrame + @ tf!

	auto ers
	tf@ OSContext_ers + @ ers!

	if (DEBUGCHECKS)
		if (ers@ LIMN2600_ERS_USER & ~~)
			tf@ "KeThreadContinue: not usermode trapframe %x\n" KeCrash
		end
	end

	tf@ // dest
	context@ // src
	OSContext_SIZEOF // size
	memcpy

	// don't modify ers lest we allow our user programs to get kernelmode...
	ers@ tf@ OSContext_ers + !

	if (signum@ -1 ~=)
		auto rs
		HALCPUInterruptDisable rs!

		1 signum@ << thread@ KeThread_SignalAcceptMask + |=

		rs@ HALCPUInterruptRestore
	end
end

fn KeLimn2600Exception { badaddr ecause tf -- }
	auto handled
	1 handled!
	
	auto signal
	0 signal!

	badaddr@ tf@ OSContext_badaddr + !
	KeIPLCurrent@ tf@ OSContext_IPL + !

	if (tf@ OSContext_ers + @ LIMN2600_ERS_USER &)
		tf@ KeThreadCurrent@ KeThread_TrapFrame + !
	end

	if (tf@ OSContext_ers + @ LIMN2600_ERS_INT & ~~)
		0 handled!
	end

	if (handled@)
		0 handled!

		if (ecause@ ECAUSEINTERRUPT ==)
			1 KeStatistics OSStatistics_Interrupts + +=

			tf@ // trapframe
			HALInterrupt

			// this is an inlined version of what KeIPLLower also does

			auto ipl
			KeIPLCurrent@ ipl!

			if (ipl@ IPLDPC <)
				if (KePendingSoftwareInterrupts@)
					auto p
					KePendingSoftwareInterrupts@ [ipl@]KePendingSoftwareInterruptMask@ & p!

					while (p@)
						[p@]KePendingSoftwareInterruptFirst@ KeSoftwareInterruptHandlerF

						KePendingSoftwareInterrupts@ [ipl@]KePendingSoftwareInterruptMask@ & p!
					end
				end

				ipl@ KeIPLCurrent!
			end

			0 signal!
			1 handled!
		end elseif (ecause@ ECAUSESYS ==)
			1 KeStatistics OSStatistics_SystemCalls + +=

			tf@ KeLimn2600Syscall
			1 handled!
		end elseif (ecause@ ECAUSEPAGEFAULT ==)
			HALCPUInterruptEnable

			0 // writing
			badaddr@ // badaddr
			tf@ // trapframe
			MmPageFault handled!

			HALCPUInterruptDisable drop
		end elseif (ecause@ ECAUSEPAGEWRITE ==)
			HALCPUInterruptEnable

			1 // writing
			badaddr@ // badaddr
			tf@ // trapframe
			MmPageFault handled!

			HALCPUInterruptDisable drop
		end elseif (ecause@ ECAUSEINVALID ==)
			OSSIGNAL_ILL signal!
		end elseif (ecause@ ECAUSEPRIVVIOL ==)
			OSSIGNAL_ILL signal!
		end elseif (ecause@ ECAUSEUNALIGNED ==)
			OSSIGNAL_BUS signal!
		end elseif (ecause@ ECAUSEBRK ==)
			1 handled!
			// TODO debugging stuff
		end

		if (signal@)
			if (tf@ OSContext_ers + @ LIMN2600_ERS_USER &)
				signal@ // signal
				KeThreadCurrent@ // thread
				KeThreadSignal drop

				1 handled!
			end elseif (ecause@ ECAUSEUNALIGNED ==)
				auto abort
				KeThreadCurrent@ KeThread_SafeAccessAbort + @ abort!

				if (abort@)
					// thought this might happen.
					abort@ tf@ HALCPUTrapFrameAbort

					1 handled!
				end
			end
		end
	end

	if (handled@ ~~)
		auto excname

		if (ecause@ EXCNAMESMAX >)
			"UNKNOWN" excname!
		end else
			[ecause@]ExceptionNames@ excname!
		end

		if (ecause@ ECAUSENMI ==)
			if (HALDebug)
				return
			end

			return
		end

		excname@
		badaddr@
		tf@ OSContext_epc + @
		tf@ OSContext_ers + @
		KeIPLCurrent@
		"Fault: IPL=%d ERS=%08x EPC=%08x BADADDR=%08x ECAUSE=%s\n" KeCrash
	end

	if (tf@ OSContext_ers + @ LIMN2600_ERS_USER &)
		// we interrupted usermode code

		tf@ PsPrepareUsermode
	end

	// while (1) end
end

fn HALCPUIsUserTrapFrame { tf -- user }
	tf@ OSContext_ers + @ LIMN2600_ERS_USER & user!
end

fn HALCPUTrapFrameAbort { abort tf -- }
	abort@ tf@ OSContext_epc + !
end

fn HALCPUContextInit { context1 context2 startfunc kstack process -- ctx }
	8 kstack -=

	0 kstack@!
	startfunc@ kstack@ 4 + !

	kstack@ OSContext_SIZEOF - ctx!

	ctx@ OSContext_SIZEOF 0 memset

	context1@ ctx@ OSContext_a1 + !
	context2@ ctx@ OSContext_a0 + !

	// enable interrupts and paging in the thread's context
	LIMN2600_ERS_KTHREAD LIMN2600_RS_MMU | ctx@ OSContext_ers + !

	startfunc@ ctx@ OSContext_epc + !

	kstack@ ctx@ OSContext_sp + !

	OSContext_SIZEOF ctx -=

	LIMN2600_RS_MMU ctx@ OSContext_ers + !

	pointerof LoadInitialContext ctx@ OSContext_lr + !
end