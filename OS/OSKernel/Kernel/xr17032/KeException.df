#include "<df>/dragonfruit.h"
#include "<inc>/HALCrash.h"

#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALConsole.h"

#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "../KeInternal.h"
#include "../../../OSLoader/OSLoaderGlobal.h"

// if this seems janked up, its because it is, because this all used to be in
// the HAL, and the process of moving it into the kernel was rough.

const ECAUSEINTERRUPT 1
const ECAUSESYS       2
const ECAUSENMI       5
const ECAUSEBRK       6
const ECAUSEINVALID   7
const ECAUSEPRIVVIOL  8
const ECAUSEUNALIGNED 9
const ECAUSEPAGEFAULT 12
const ECAUSEPAGEWRITE 13

externptr HALXRstationInterruptHandlers

externptr HALXRstationLSICClaimComplete

externptr HALXr17032SavedEV

externptr KeThreadCurrentStackTop
externptr KeThreadCurrentStackBottom
externptr HALInterruptStackTop

externptr OSCallCount
externptr OSCallTable

externptr KeIPLCurrent

extern HALXr17032TLBFlushAll { -- }

extern KiContinue { tf -- }

asm "

KiXr17032ExceptionVector:
.global KiXr17032ExceptionVector
	mtcr scratch0, t0 ; save t0 to free it as scratch
	mtcr scratch1, t1 ; ditto with t1
	mtcr scratch2, sp ; save stack pointer
	mtcr scratch3, sp ; save trace link

	mfcr t0, rs

	andi t1, t0, XR17032_ERS_USER
	beq  t1, .waskernel

	mov  sp, long [KeThreadCurrentStackTop] ; load new sp for current thread

	mtcr scratch3, zero ; this was a usermode sp, zero out the trace link

.waskernel:
	subi sp, sp, OSContext_SIZEOF

	mov  t1, long [HALInterruptNested]
	bne  t1, .skipoverflowcheck

	mov  t1, long [KeThreadCurrentStackBottom]
	sub  t1, sp, t1
	blt  t1, .overflow

.skipoverflowcheck:
	mfcr t1, scratch2
	mov  long [sp + OSContext_sp],  t1
	mov  long [sp + OSContext_ers], t0 ; ers was still in t0

	mfcr t1, epc
	mov  long [sp + OSContext_epc], t1

	mfcr t1, scratch0
	mov  long [sp + OSContext_t0],  t1

	mfcr t1, scratch1
	mov  long [sp + OSContext_t1],  t1

	mov  long [sp + OSContext_t2],  t2
	mov  long [sp + OSContext_t3],  t3
	mov  long [sp + OSContext_t4],  t4
	mov  long [sp + OSContext_t5],  t5
	mov  long [sp + OSContext_a0],  a0
	mov  long [sp + OSContext_a1],  a1
	mov  long [sp + OSContext_a2],  a2
	mov  long [sp + OSContext_a3],  a3
	mov  long [sp + OSContext_s0],  s0
	mov  long [sp + OSContext_s1],  s1
	mov  long [sp + OSContext_s2],  s2
	mov  long [sp + OSContext_s3],  s3
	mov  long [sp + OSContext_s4],  s4
	mov  long [sp + OSContext_s5],  s5
	mov  long [sp + OSContext_s6],  s6
	mov  long [sp + OSContext_s7],  s7
	mov  long [sp + OSContext_s8],  s8
	mov  long [sp + OSContext_s9],  s9
	mov  long [sp + OSContext_s10], s10
	mov  long [sp + OSContext_s11], s11
	mov  long [sp + OSContext_s12], s12
	mov  long [sp + OSContext_s13], s13
	mov  long [sp + OSContext_s14], s14
	mov  long [sp + OSContext_s15], s15
	mov  long [sp + OSContext_s16], s16
	mov  long [sp + OSContext_s17], s17
	mov  long [sp + OSContext_s18], tp
	mov  long [sp + OSContext_lr],  lr

	rshi a1, t0, 28
	andi a1, a1, 15
	mfcr a2, ebadaddr
	mov  a0, sp ; give KiXr17032Exception our context

	subi sp, sp, 12
	mov  long [sp + 8], lr
	mfcr t0, epc
	mov  long [sp + 4], t0
	mfcr t0, scratch3
	mov  long [sp], t0

	jal  KiXr17032Exception ; call KiXr17032Exception, to handle the exception

	addi sp, sp, 12

	mov  t0, long [sp + OSContext_ers]
	mtcr rs, t0

	mov  t0, long [sp + OSContext_epc]
	mtcr epc, t0

	mov  t0,  long [sp + OSContext_t0]
	mov  t1,  long [sp + OSContext_t1]
	mov  t2,  long [sp + OSContext_t2]
	mov  t3,  long [sp + OSContext_t3]
	mov  t4,  long [sp + OSContext_t4]
	mov  t5,  long [sp + OSContext_t5]
	mov  a0,  long [sp + OSContext_a0]
	mov  a1,  long [sp + OSContext_a1]
	mov  a2,  long [sp + OSContext_a2]
	mov  a3,  long [sp + OSContext_a3]
	mov  s0,  long [sp + OSContext_s0]
	mov  s1,  long [sp + OSContext_s1]
	mov  s2,  long [sp + OSContext_s2]
	mov  s3,  long [sp + OSContext_s3]
	mov  s4,  long [sp + OSContext_s4]
	mov  s5,  long [sp + OSContext_s5]
	mov  s6,  long [sp + OSContext_s6]
	mov  s7,  long [sp + OSContext_s7]
	mov  s8,  long [sp + OSContext_s8]
	mov  s9,  long [sp + OSContext_s9]
	mov  s10, long [sp + OSContext_s10]
	mov  s11, long [sp + OSContext_s11]
	mov  s12, long [sp + OSContext_s12]
	mov  s13, long [sp + OSContext_s13]
	mov  s14, long [sp + OSContext_s14]
	mov  s15, long [sp + OSContext_s15]
	mov  s16, long [sp + OSContext_s16]
	mov  s17, long [sp + OSContext_s17]
	mov  tp,  long [sp + OSContext_s18]

	mov  lr, long [sp + OSContext_lr]
	mov  sp, long [sp + OSContext_sp]

	rfe

.overflow:
	mov  a1, sp
	mov  sp, long [HALInterruptStackTop]

	subi sp, sp, 8
	mfcr t0, epc
	mov  long [sp + 4], t0
	mfcr t0, scratch3
	mov  long [sp], t0

	mfcr a0, rs
	jal  KiStackOverflow

.hang:
	b    .hang

KiLoadInitialContext:
.global KiLoadInitialContext
	mov  t0, long [sp + OSContext_ers]
	mtcr rs, t0

	mov  t0, long [sp + OSContext_epc]
	mtcr epc, t0

	mov  t0,  long [sp + OSContext_t0]
	mov  t1,  long [sp + OSContext_t1]
	mov  t2,  long [sp + OSContext_t2]
	mov  t3,  long [sp + OSContext_t3]
	mov  t4,  long [sp + OSContext_t4]
	mov  t5,  long [sp + OSContext_t5]
	mov  a0,  long [sp + OSContext_a0]
	mov  a1,  long [sp + OSContext_a1]
	mov  a2,  long [sp + OSContext_a2]
	mov  a3,  long [sp + OSContext_a3]
	mov  s0,  long [sp + OSContext_s0]
	mov  s1,  long [sp + OSContext_s1]
	mov  s2,  long [sp + OSContext_s2]
	mov  s3,  long [sp + OSContext_s3]
	mov  s4,  long [sp + OSContext_s4]
	mov  s5,  long [sp + OSContext_s5]
	mov  s6,  long [sp + OSContext_s6]
	mov  s7,  long [sp + OSContext_s7]
	mov  s8,  long [sp + OSContext_s8]
	mov  s9,  long [sp + OSContext_s9]
	mov  s10, long [sp + OSContext_s10]
	mov  s11, long [sp + OSContext_s11]
	mov  s12, long [sp + OSContext_s12]
	mov  s13, long [sp + OSContext_s13]
	mov  s14, long [sp + OSContext_s14]
	mov  s15, long [sp + OSContext_s15]
	mov  s16, long [sp + OSContext_s16]
	mov  s17, long [sp + OSContext_s17]
	mov  tp,  long [sp + OSContext_s18]

	mov  lr, long [sp + OSContext_lr]
	mov  sp, long [sp + OSContext_sp]

	rfe

KiThreadTrampoline:
	mov  s0, a0
	mov  s1, a1
	mov  s2, a2

	li   a0, IPLLOW
	jal  KeIPLLower

	mov  a0, s0
	mov  a1, s1

	jr   s2

; a0 - tf
KiContinue:
	mov  sp, a0
	j    KiLoadInitialContext

; a0 - tf
KiXr17032Syscall:
.global KiXr17032Syscall
	subi sp, sp, 20
	mov  long [sp], zero
	mov  long [sp + 4], s0
	mov  long [sp + 8], s1
	mov  long [sp + 12], s17
	mov  long [sp + 16], lr

	mov  s17, a0 ;trampolines expect trapframe in s17

	mov  t1, long [a0 + OSContext_t0]
	beq  t1, .sysout

	mov  t0, long [OSCallCount]
	slt  t0, t0, t1
	bne  t0, .sysout

	la   t0, OSCallTable
	mov  t0, long [t0 + t1 LSH 2]

	jalr lr, t0, 0

.sysout:
	mov  lr, long [sp + 16]
	mov  s17, long [sp + 12]
	mov  s1, long [sp + 8]
	mov  s0, long [sp + 4]
	addi sp, sp, 20

	ret

.section INIT$text

KiXr17032Init:
.global KiXr17032Init
	mfcr t1, eb
	mov  long [HALXr17032SavedEV], t1, tmp=t0

	mtcr eb, a0

	mtcr ebadaddr, zero

	j    HALXr17032TLBFlushAll

.section text

KeIPLCurrentGet:
.global KeIPLCurrentGet
	mov  a0, long [KeIPLCurrent]
	ret

; don't let HALXr17032MapSwitch cross a page boundary or bad things might
; happen if there's a TLB miss in the middle

.align 128

; MUST BE CALLED WITH INTERRUPTS DISABLED
; asid pgtb --
HALXr17032MapSwitch:
.global HALXr17032MapSwitch
	; set the new page directory in TLB entry 0

	mfcr t1, itbindex
	mfcr t2, dtbindex

	mtcr itbindex, zero
	mtcr dtbindex, zero

	la   t0, PAGEDIRECTORY
	rshi t0, t0, 12
	mtcr itbtag, t0
	mtcr dtbtag, t0

	mov  t0, a0
	rshi t0, t0, 12
	lshi t0, t0, 5
	ori  t0, t0, 0x17
	mtcr itbpte, t0
	mtcr dtbpte, t0

	mtcr itbindex, t1
	mtcr dtbindex, t2

	; set the asid

	lshi a1, a1, 20
	mtcr itbtag, a1
	mtcr dtbtag, a1

	ret

.section text

"

externptr HALLoaderInfo

extern KiXr17032Init { eb -- }

fn KiCPUInit { -- }
	auto ptr
	HALLoaderInfo@ LdrInfo_ExceptionBlockBase + @ ptr!

	// Construct a jump instruction that just jumps to our exception handler,
	// and then copy it to the first instruction of each entry of the exception
	// block, except for the TLB miss handler, which has already been set up by
	// OSLoader.

	auto jmpinstruction
	6 jmpinstruction!

	pointerof KiXr17032ExceptionVector 2 >> 3 << jmpinstruction |=

	auto i
	0 i!

	while (i@ 14 <)
		jmpinstruction@ ptr@!

		1 i +=
		256 ptr +=
	end

	HALLoaderInfo@ LdrInfo_ExceptionBlockBase + @ KiXr17032Init
end

extern KiThreadTrampoline { -- }

extern KiXr17032Syscall { tf -- }

const EXCNAMESMAX 15

table ExceptionNames
	"EXC0"
	"INTERRUPT"
	"SYSCALL"
	"FWCALL"
	"BUSERROR"
	"EXC5"
	"BREAKPOINT"
	"INVALIDINSTRUCTION"
	"PRIVILEGEVIOLATION"
	"UNALIGNEDADDR"
	"EXC10"
	"EXC11"
	"PAGEFAULT(READ)"
	"PAGEFAULT(WRITE)"
	"EXC14"
	"EXC15"
endtable

extern PsDispatchUsermodeInterrupts { trapframe -- }

fn KiStackOverflow { sp rs -- }
	auto current
	KeThreadCurrent@ current!

	if (current@)
		KeThreadCurrentStackBottom@
		sp@
		current@ KeThread_Name +
		current@ KeThread_Process + @ KeProcess_Name +
		"process '%s' thread '%s' kernel stack overflow (sp=%x bottom=%x)\n" KeCrash
	end

	rs@ "Kernel stack overflow %x\n" KeCrash
end

fn KiInterruptUsermode { context userfunc dispatchfunc trapframe -- }
	// Cause a usermode interrupt of the current thread by saving the context
	// on the user stack and redirecting the trapframe to the usermode
	// interrupt handler. This is used to implement signal and APC dispatch.

	auto usp
	trapframe@ OSContext_sp + @ usp!

	if (DEBUGCHECKS)
		if (trapframe@ OSContext_ers + @ XR17032_ERS_USER & ~~)
			trapframe@ "KiInterruptUsermode: not usermode trapframe %x\n" KeCrash
		end
	end

	OSContext_SIZEOF usp -=

	auto ok
	usp@ // dest
	trapframe@ // src
	OSContext_SIZEOF // sz
	KeSafeCopyOut ok!

	if (ok@)
		// Failed to copy out context frame, this is fatal to the entire
		// process.

		// TODO automatically switch to an overflow stack?

		OSSIGNAL_KILL // signal
		KeThreadCurrent@ KeThread_Process + @ // process
		KeProcessSignal drop

		return
	end

	// Redirect the trapframe to the usermode interrupt handler.

	usp@ trapframe@ OSContext_sp + !
	dispatchfunc@ trapframe@ OSContext_epc + !
	context@ trapframe@ OSContext_a0 + !
	usp@ trapframe@ OSContext_a1 + !
	userfunc@ trapframe@ OSContext_a2 + !
end

fn KeThreadContinue { alertable signum context thread -- ok }
	// Restore context and continue out of a usermode interrupt handler.

	if (signum@ -1 ~=)
		if (signum@ ~~)
			STATUS_INVALID_ARGUMENT ok!

			return
		end

		if (signum@ 32 >=)
			STATUS_INVALID_ARGUMENT ok!

			return
		end
	end

	0 ok!

	auto tf
	thread@ KeThread_TrapFrame + @ tf!

	auto ers
	tf@ OSContext_ers + @ ers!

	if (DEBUGCHECKS)
		if (ers@ XR17032_ERS_USER & ~~)
			tf@ "KeThreadContinue: not usermode trapframe %x\n" KeCrash
		end
	end

	tf@ // dest
	context@ // src
	OSContext_SIZEOF // size
	memcpy

	// don't modify ers lest we allow our user programs to get kernelmode...
	ers@ tf@ OSContext_ers + !

	auto rs
	HALCPUInterruptDisable rs!

	if (signum@ -1 ~=)
		// atomically unmask the signal.

		1 signum@ << thread@ KeThread_SignalAcceptMask + |=

		if (thread@ KeThread_SignalAcceptMask + @
			thread@ KeThread_SignalDeliverOnWaitMask + @ ~ &
			thread@ KeThread_Signals + @ &)

			1 thread@ KeThread_UserInterruptB + sb
		end
	end

	if (alertable@)
		// check for another user APC to deliver, so that they "chain"
		// properly.

		if (thread@ KeThread_UserAPCListHead + @)
			1 thread@ KeThread_UserAPCTriggeredB + sb
			1 thread@ KeThread_UserInterruptB + sb
		end
	end

	// Perform a direct return to avoid corrupting the newly-built trapframe
	// on our way out from the syscall handler, and to make sure we can't
	// miss any user APCs that get enqueued after we return.

	if (thread@ KeThread_UserInterruptB + gb)
		tf@ PsDispatchUsermodeInterrupts
	end

	tf@ KiContinue
end

fn KiXr17032Exception { badaddr ecause tf -- }
	auto handled
	1 handled!
	
	auto signal
	0 signal!

	badaddr@ tf@ OSContext_badaddr + !
	KeIPLCurrent@ KiOldIPL!

	if (tf@ OSContext_ers + @ XR17032_ERS_USER &)
		tf@ KeThreadCurrent@ KeThread_TrapFrame + !
	end

	0 handled!

	if (ecause@ ECAUSEINTERRUPT ==)
		1 KeStatistics OSStatistics_Interrupts + +=

		tf@ HALInterrupt

		if (KeIPLCurrent@ IPLDPC <)
			if (KiPendingSoftwareInterrupts@)
				KiDispatchSoftwareInterrupts
			end
		end

		0 signal!
		1 handled!
	end else
		HALCPUInterruptEnable

		if (ecause@ ECAUSESYS ==)
			1 KeStatistics OSStatistics_SystemCalls + +=

			tf@ KiXr17032Syscall

			1 handled!
		end elseif (ecause@ ECAUSEPAGEFAULT ==)
			0 // writing
			badaddr@ // badaddr
			tf@ // trapframe
			MmPageFault handled!
		end elseif (ecause@ ECAUSEPAGEWRITE ==)
			1 // writing
			badaddr@ // badaddr
			tf@ // trapframe
			MmPageFault handled!
		end elseif (ecause@ ECAUSEINVALID ==)
			OSSIGNAL_ILL signal!
		end elseif (ecause@ ECAUSEPRIVVIOL ==)
			OSSIGNAL_ILL signal!
		end elseif (ecause@ ECAUSEUNALIGNED ==)
			OSSIGNAL_BUS signal!
		end elseif (ecause@ ECAUSEBRK ==)
			1 handled!
			// TODO debugging stuff
		end

		if (signal@)
			if (tf@ OSContext_ers + @ XR17032_ERS_USER &)
				signal@ // signal
				KeThreadCurrent@ // thread
				KeThreadSignal drop

				1 handled!
			end elseif (ecause@ ECAUSEUNALIGNED ==)
				auto abort
				KeThreadCurrent@ KeThread_SafeAccessAbort + @ abort!

				if (abort@)
					// thought this might happen.

					STATUS_FAULT abort@ tf@ HALCPUTrapFrameAbort

					1 handled!
				end
			end
		end

		HALCPUInterruptDisable drop
	end

	if (handled@ ~~)
		auto excname

		if (ecause@ EXCNAMESMAX >)
			"UNKNOWN" excname!
		end else
			[ecause@]ExceptionNames@ excname!
		end

		if (ecause@ ECAUSENMI ==)
			if (HALDebug)
				return
			end

			return
		end

		excname@
		badaddr@
		tf@ OSContext_epc + @
		tf@ OSContext_ers + @
		KeIPLCurrent@
		"Fault: IPL=%d ERS=%08x EPC=%08x BADADDR=%08x ECAUSE=%s\n" KeCrash
	end

	if (tf@ OSContext_ers + @ XR17032_ERS_USER &)
		if (KeThreadCurrent@ KeThread_UserInterruptB + gb)
			tf@ PsDispatchUsermodeInterrupts
		end
	end
end

fn KeEnterUserMode { teb exitfunc context ustack entryfunc -- }
	// make a fake trap frame to return to

	auto tf
	OSContext_SIZEOF alloc tf!

	tf@ // ptr
	OSContext_SIZEOF // sz
	0 // word
	memset

	teb@ tf@ OSContext_s18 + !

	XR17032_ERS_UTHREAD XR17032_RS_MMU | tf@ OSContext_ers + !

	entryfunc@ tf@ OSContext_epc + !
	exitfunc@ tf@ OSContext_lr + !

	context@ tf@ OSContext_a0 + !

	ustack@ tf@ OSContext_sp + !

	HALCPUInterruptDisable drop

	if (KeThreadCurrent@ KeThread_UserInterruptB + gb)
		tf@ PsDispatchUsermodeInterrupts
	end

	tf@ KiContinue
end

const MAX_ASID 4096

var KiASIDNext 1

var KiASIDSequenceNumber 0
public KiASIDSequenceNumber

extern HALXr17032MapSwitch { asid pgtb -- }

fn KeAddressSpaceSwitch { process -- }
	auto asid
	process@ KeProcess_ASID + @ asid!

	auto rs
	HALCPUInterruptDisable rs!

	if (process@ KeProcess_PageDirectory + @ HALPlatformKernelPageDirectory@ ==)
		0 // asid
		HALPlatformKernelPageDirectory@ // pgtb
		HALXr17032MapSwitch
	end else
		if (process@ KeProcess_ASIDSequenceNumber + @
			KiASIDSequenceNumber@ ~=)

			// the ASIDs rolled over at some point, so we have to give this
			// process a new one.

			KiASIDNext@ asid!
			asid@ 1 + KiASIDNext!

			if (asid@ MAX_ASID >=)
				// roll over! flush TLB and increment sequence number.

				1 asid!
				2 KiASIDNext!
				1 KiASIDSequenceNumber +=

				HALXr17032TLBFlushAll
			end

			asid@ process@ KeProcess_ASID + !
			KiASIDSequenceNumber@ process@ KeProcess_ASIDSequenceNumber + !
		end

		asid@ // asid
		process@ KeProcess_PageDirectory + @ 5 >> 12 << // pgtb
		HALXr17032MapSwitch
	end

	rs@ HALCPUInterruptRestore
end

fn HALCPUIsUserTrapFrame { tf -- user }
	tf@ OSContext_ers + @ XR17032_ERS_USER & user!
end

fn HALCPUTrapFrameAbort { ok abort tf -- }
	ok@ tf@ OSContext_a0 + !
	abort@ tf@ OSContext_epc + !
end

fn HALCPUContextInit { context1 context2 startfunc kstack process -- ctx }
	8 kstack -=

	0 kstack@!
	startfunc@ kstack@ 4 + !

	kstack@ OSContext_SIZEOF - ctx!

	ctx@ OSContext_SIZEOF 0 memset

	startfunc@ ctx@ OSContext_a2 + !
	context1@ ctx@ OSContext_a1 + !
	context2@ ctx@ OSContext_a0 + !

	// enable interrupts and paging in the thread's context
	XR17032_ERS_KTHREAD XR17032_RS_MMU | ctx@ OSContext_ers + !

	pointerof KiThreadTrampoline ctx@ OSContext_epc + !

	kstack@ ctx@ OSContext_sp + !

	OSContext_SIZEOF ctx -=

	XR17032_RS_MMU ctx@ OSContext_ers + !

	pointerof KiLoadInitialContext ctx@ OSContext_lr + !
end