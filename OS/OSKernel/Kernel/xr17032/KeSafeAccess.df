#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"

#include "<inc>/Kernel.h"
#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

// XXX has intricate knowledge of the implementation of lots of copy functions
// in terms of being sure that they won't corrupt saved registers.
// in dfrt these are all hand-written in asm so this can be known for sure.

asm "

;a0 - sz
;a1 - src
;a2 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeCopyIn:
.global KeSafeCopyIn
	la   t0, MMHIGHESTUSERADDRESS
	slt  t1, t0, a1
	bne  t1, .failure

	subi sp, sp, 4
	mov  long [sp], lr

	la   t1, KeSafeAccessFailure
	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], t1
	mov  long [t0 + KeThread_SafeAccessSP], sp

	jal  memcpy

	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], zero
	mov  sp, long [t0 + KeThread_SafeAccessSP]

	mov  lr, long [sp]
	addi sp, sp, 4

	li   a0, 0
	ret

.failure:
	la   a0, STATUS_FAULT
	ret

;a0 - sz
;a1 - src
;a2 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeCopyOut:
.global KeSafeCopyOut
	la   t0, MMHIGHESTUSERADDRESS
	slt  t1, t0, a2
	bne  t1, .failure

	subi sp, sp, 4
	mov  long [sp], lr

	la   t1, KeSafeAccessFailure
	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], t1
	mov  long [t0 + KeThread_SafeAccessSP], sp

	jal  memcpy

	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], zero
	mov  sp, long [t0 + KeThread_SafeAccessSP]

	mov  lr, long [sp]
	addi sp, sp, 4

	li   a0, 0
	ret

.failure:
	la   a0, STATUS_FAULT
	ret

;a0 - max
;a1 - src
;a2 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeStringCopyIn:
.global KeSafeStringCopyIn
	la   t0, MMHIGHESTUSERADDRESS
	slt  t1, t0, a1
	bne  t1, .failure

	subi sp, sp, 4
	mov  long [sp], lr

	la   t1, KeSafeAccessFailure
	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], t1
	mov  long [t0 + KeThread_SafeAccessSP], sp

	jal  strncpy

	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], zero
	mov  sp, long [t0 + KeThread_SafeAccessSP]

	mov  lr, long [sp]
	addi sp, sp, 4

	li   a0, 0
	ret

.failure:
	la   a0, STATUS_FAULT
	ret

;a0 - max
;a1 - src
;a2 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeStringCopyOut:
.global KeSafeStringCopyOut
	la   t0, MMHIGHESTUSERADDRESS
	slt  t1, t0, a2
	bne  t1, .failure

	subi sp, sp, 4
	mov  long [sp], lr

	la   t1, KeSafeAccessFailure
	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], t1
	mov  long [t0 + KeThread_SafeAccessSP], sp

	jal  strncpy

	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], zero
	mov  sp, long [t0 + KeThread_SafeAccessSP]

	mov  lr, long [sp]
	addi sp, sp, 4

	li   a0, 0
	ret

.failure:
	la   a0, STATUS_FAULT
	ret

;a0 - word
;a1 - sz
;a2 - ptr
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeMemset:
.global KeSafeMemset
	la   t0, MMHIGHESTUSERADDRESS
	slt  t1, t0, a2
	bne  t1, .failure

	subi sp, sp, 4
	mov  long [sp], lr

	la   t1, KeSafeAccessFailure
	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], t1
	mov  long [t0 + KeThread_SafeAccessSP], sp

	jal  memset

	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], zero
	mov  sp, long [t0 + KeThread_SafeAccessSP]

	mov  lr, long [sp]
	addi sp, sp, 4

	li   a0, 0
	ret

.failure:
	la   a0, STATUS_FAULT
	ret

KeSafeAccessFailure:
	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], zero
	mov  sp, long [t0 + KeThread_SafeAccessSP]

	mov  lr, long [sp]
	addi sp, sp, 4
	
	la   a0, STATUS_FAULT
	ret

;a1 - byte
;a0 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeStoreByte:
.global KeSafeStoreByte
	la   t0, MMHIGHESTUSERADDRESS
	slt  t1, t0, a0
	bne  t1, .failure

	la   t1, KeSafeStoreByteFailure
	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], t1

	mov  byte [a0], a1

	mov  long [t0 + KeThread_SafeAccessAbort], zero
	li   a0, 0
	ret

.failure:
	la   a0, STATUS_FAULT
	ret

KeSafeStoreByteFailure:
	mov  long [t0 + KeThread_SafeAccessAbort], zero
	la   a0, STATUS_FAULT
	ret

;a0 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeProbeWrite:
.global KeSafeProbeWrite
	la   t0, MMHIGHESTUSERADDRESS
	slt  t1, t0, a0
	bne  t1, .failure

	la   t1, KeSafeStoreByteFailure
	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], t1

	mov  t1, byte [a0]
	mov  byte [a0], t1

	mov  long [t0 + KeThread_SafeAccessAbort], zero
	li   a0, 0
	ret

.failure:
	la   a0, STATUS_FAULT
	ret

;a0 - src
;returns:
;a0 - byte
;a1 - 0 if success, STATUS_FAULT if fault
KeSafeGetByte:
.global KeSafeGetByte
	la   t0, MMHIGHESTUSERADDRESS
	slt  t1, t0, a0
	bne  t1, .failure

	la   t1, KeSafeGetByteFailure
	mov  t0, long [KeThreadCurrent]
	mov  long [t0 + KeThread_SafeAccessAbort], t1

	mov  a0, byte [a0]

	mov  long [t0 + KeThread_SafeAccessAbort], zero
	li   a1, 0
	ret

.failure:
	la   a1, STATUS_FAULT
	ret

KeSafeGetByteFailure:
	mov  long [t0 + KeThread_SafeAccessAbort], zero
	la   a1, STATUS_FAULT
	ret

; inc ptr -- oldcount
KeInterlockedIncrement:
.global KeInterlockedIncrement
.inc:
	mov  t0, locked [a0]
	add  t1, t0, a1
	sc   t1, [a0], t1
	beq  t1, .inc

	mov  a0, t0

	ret

"