//
// Initialization for the dispatcher.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALRTC.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "KeInternal.h"

buffer KeIdleProcess (PsProcess_SIZEOF PsProcessPaged_SIZEOF +)
public KeIdleProcess

buffer KiIdleThread PsThread_SIZEOF
public KiIdleThread

buffer KiIdleThreadStack KETHREADSTACKSIZE

var KiQuantumUnitsDefault 0
public KiQuantumUnitsDefault

rosection "INIT$text"

fn KiDispatcherInit { -- }
	fnsection "INIT$text"

	// initialize idle process

	"IDLE" // name
	0 // asid
	0 // parentprocess
	KeIdleProcess // process
	KeProcessInitialize

	KeIdleProcess PsProcess_SIZEOF +
	KeIdleProcess PsProcess_PagedArea + !

	HALPlatformKernelPageDirectory@ KeIdleProcess KeProcess_PageDirectory + !

	// initialize idle thread

	0 // context1
	0 // context2
	pointerof KiIdleThreadEntry // startfunc
	KeIdleProcess // process
	KiIdleThreadStack // kstack
	"IDLE" // name
	KiIdleThread // thread
	KeThreadInitialize

	PRIORITY_IDLE KiIdleThread KeThread_PriorityB + sb

	// initialize dispatcher variables.

	// find next multiple of system clock for default quantum.

	auto ticks
	0 ticks!

	auto ms
	0 ms!

	while (ms@ QUANTUMDEFAULTMS <)
		HALRTCInterval@ ms +=
		1 ticks +=
	end

	ticks@ QUANTUMUNITSPERTICK * KiQuantumUnitsDefault!

	KiQuantumUnitsDefault@
	ticks@
	ms@
	"quantum=%dms (ticks=%d units=%d)\n"
	"KiDispatcherInit" HALLog
end