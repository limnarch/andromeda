//
// Implements the kernel thread scheduler.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALRTC.h"

#include "<inc>/Kernel.h"

#include "<ll>/OSDLL/OS.h"

#include "KeInternal.h"

var KeThreadCurrent 0
public KeThreadCurrent

var KeThreadCurrentStackBottom 0
public KeThreadCurrentStackBottom

externptr KeThreadCurrentStackTop

var KiThreadNext 0
public KiThreadNext

var KeThreadSwapInListHead 0
public KeThreadSwapInListHead

table KiThreadPriorityQueueHeads[PRIORITIES]
public KiThreadPriorityQueueHeads

table KiThreadPriorityQueueTails[PRIORITIES]

externptr MmSwapEvent

fn KeThreadReady { thread -- }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	thread@ KiThreadReady

	ipl@ KeIPLLower
end

fn KeThreadPrioritySet { priority thread -- }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	priority@ thread@ KiThreadPrioritySet

	ipl@ KeIPLLower
end

fn KeThreadPriorityBoost { boost thread -- }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	boost@ thread@ KiThreadPriorityBoost

	ipl@ KeIPLLower
end

fn KeThreadBlock { status -- }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	status@ KiThreadBlock

	ipl@ KeIPLLower
end

fn KeBoostReadyThreads { -- }
	// scan the ready queues and find threads that have been ready for a long
	// time but aren't being scheduled, and boost them. this helps prevent
	// priority inversion.

	auto uptime
	KeTime_SIZEOF alloc uptime!

	uptime@ HALUptimeQuery

	auto uptimesec
	uptime@ KeTime_SecPart + @ uptimesec!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto pri
	PRIORITY_IDLE 1 + pri!

	while (pri@ PRIORITY_HIGHUSER <)
		auto thread
		[pri@]KiThreadPriorityQueueHeads@ thread!

		while (thread@)
			auto nthread
			thread@ KeThread_QueueNext + @ nthread!

			if (DEBUGCHECKS)
				if (thread@ KeThread_StatusB + gb THREADSTATUS_READY ~=)
					thread@ "KeBoostReadyThreads: %x is not READY but is on queue\n" KeCrash
				end
			end

			if (thread@ KeThread_WaitOrReadyTimeSec + @ uptimesec@ - 3 >=)
				if (thread@ KeThread_InstantDecayB + gb ~~)
					thread@ KeThread_Process + @ KeProcess_BaseQuantumB + gb 2 * thread@ KeThread_QuantumB + sb

					1 thread@ KeThread_InstantDecayB + sb

					PRIORITY_HIGHUSER // priority
					thread@ // thread
					KiThreadPrioritySet
				end
			end

			nthread@ thread!
		end

		1 pri +=
	end

	ipl@ KeIPLLower
end

fn KiThreadReady { thread -- }
	auto anotherthread

	auto waspreempted
	thread@ KeThread_WasPreemptedB + gb waspreempted!
	0 thread@ KeThread_WasPreemptedB + sb

	auto readytime
	KeTime_SIZEOF alloc readytime!

	readytime@ HALUptimeQuery
	readytime@ KeTime_SecPart + @ thread@ KeThread_WaitOrReadyTimeSec + !

	auto process
	thread@ KeThread_Process + @ process!

	if (process@ KeProcess_MemoryStateB + gb PROCESSSTATE_RESIDENT ~=)
		// place on process's list of threads pending swapin

		if (DEBUGCHECKS)
			if (thread@ KeThread_SwapListNext + @
				process@ KeProcess_DeferredThreadListHead + @ thread@ == ||)
				thread@ "KeThreadReady: (1) thread %x enqueued on swaplist twice\n" KeCrash
			end
		end

		THREADSTATUS_READY thread@ KeThread_StatusB + sb

		1 thread@ KeThread_InSwapListB + sb

		process@ KeProcess_DeferredThreadListHead + @ thread@ KeThread_SwapListNext + !
		thread@ process@ KeProcess_DeferredThreadListHead + !

		if (process@ KeProcess_MemoryStateB + gb PROCESSSTATE_OUTSWAPPED ==)
			// enqueue process to be swapped in

			PROCESSSTATE_TRANSITION process@ KeProcess_MemoryStateB + sb

			KeProcessSwapInListHead@ process@ KeProcess_SwapListNext + !
			process@ KeProcessSwapInListHead!
		end

		0 // priboost
		MmSwapEvent // event
		KeEventSignal

		return
	end elseif (thread@ KeThread_KernelStackResidentB + gb ~~)
		// place on global list of threads pending swapin

		if (DEBUGCHECKS)
			if (thread@ KeThread_SwapListNext + @
				KeThreadSwapInListHead@ thread@ == ||)
				thread@ "KeThreadReady: (2) thread %x enqueued on swaplist twice\n" KeCrash
			end
		end

		THREADSTATUS_TRANSITION thread@ KeThread_StatusB + sb

		KeThreadSwapInListHead@ thread@ KeThread_SwapListNext + !
		thread@ KeThreadSwapInListHead!

		process@ KeProcess_ResidentStackCountI + gi 1 +
		process@ KeProcess_ResidentStackCountI + si

		0 // priboost
		MmSwapEvent // event
		KeEventSignal

		return
	end

	KiThreadNext@ anotherthread!

	if (anotherthread@)
		if (thread@ KeThread_PriorityB + gb anotherthread@ KeThread_PriorityB + gb >)
			// there's already a next thread and we have a higher priority, so
			// preempt it.

			1 KeStatistics OSStatistics_Preemptions + +=

			thread@ KiThreadNext!
			THREADSTATUS_STANDBY thread@ KeThread_StatusB + sb

			1 anotherthread@ KeThread_WasPreemptedB + sb

			anotherthread@ KiThreadReady

			return
		end
	end else
		KeThreadCurrent@ anotherthread!

		if (thread@ KeThread_PriorityB + gb anotherthread@ KeThread_PriorityB + gb >)
			// this thread is higher priority than the current thread, so
			// preempt it.

			IPLDPC KiSoftwareInterruptRequest

			1 KeStatistics OSStatistics_Preemptions + +=

			thread@ KiThreadNext!
			THREADSTATUS_STANDBY thread@ KeThread_StatusB + sb

			1 anotherthread@ KeThread_WasPreemptedB + sb

			return
		end
	end

	THREADSTATUS_READY thread@ KeThread_StatusB + sb

	auto t

	if (waspreempted@ thread@ KeThread_PriorityB + gb PRIORITY_LOWREALTIME >= &&)
		// place at head of ready queue

		[thread@ KeThread_PriorityB + gb]KiThreadPriorityQueueHeads@ t!

		if (t@ ~~)
			thread@ [thread@ KeThread_PriorityB + gb]KiThreadPriorityQueueTails!

			0 thread@ KeThread_QueueNext + !
			0 thread@ KeThread_QueuePrev + !
		end else
			t@ thread@ KeThread_QueueNext + !
			thread@ t@ KeThread_QueuePrev + !

			0 thread@ KeThread_QueuePrev + !
		end

		thread@ [thread@ KeThread_PriorityB + gb]KiThreadPriorityQueueHeads!
	end else
		// place at tail of ready queue

		[thread@ KeThread_PriorityB + gb]KiThreadPriorityQueueTails@ t!

		if (t@ ~~)
			thread@ [thread@ KeThread_PriorityB + gb]KiThreadPriorityQueueHeads!

			0 thread@ KeThread_QueueNext + !
			0 thread@ KeThread_QueuePrev + !
		end else
			thread@ t@ KeThread_QueueNext + !
			t@ thread@ KeThread_QueuePrev + !

			0 thread@ KeThread_QueueNext + !
		end

		thread@ [thread@ KeThread_PriorityB + gb]KiThreadPriorityQueueTails!
	end
end

fn KiThreadSelect { thread -- nextthread }
	KiThreadNext@ nextthread!

	if (nextthread@)
		0 KiThreadNext!
	end else
		0 // low
		thread@ KeThread_PriorityB + gb // high
		KiThreadFind nextthread!
	end

	if (DEBUGCHECKS)
		if (nextthread@ ~~)
			"KiThreadSelect: no next thread\n" KeCrash
		end
	end
end

fn KiThreadFind { low high -- thread }
	0 thread!

	while (high@ low@ >=)
		[high@]KiThreadPriorityQueueHeads@ thread!

		if (thread@)
			// remove the thread from the queue and return it

			auto pri
			thread@ KeThread_PriorityB + gb pri!

			auto n
			thread@ KeThread_QueueNext + @ n!

			if (n@)
				thread@ KeThread_QueuePrev + @ n@ KeThread_QueuePrev + !
			end else // no next means we were the tail
				thread@ KeThread_QueuePrev + @ [pri@]KiThreadPriorityQueueTails!
			end

			thread@ KeThread_QueuePrev + @ n!

			if (n@)
				thread@ KeThread_QueueNext + @ n@ KeThread_QueueNext + !
			end else // no prev means we were the head
				thread@ KeThread_QueueNext + @ [pri@]KiThreadPriorityQueueHeads!
			end

			0 thread@ KeThread_QueueNext + !
			0 thread@ KeThread_QueuePrev + !

			return
		end

		if (DEBUGCHECKS)
			if (high@ ~~)
				// shouldn't be able to happen unless the idle thread vanished on us

				"KiThreadFind: no idle thread\n" KeCrash
			end
		end

		1 high -=
	end
end

fn KiThreadYieldQuantum { -- }
	if (DEBUGCHECKS)
		if (KeDPCActive@)
			"KiThreadYieldQuantum: DPC active\n" KeCrash
		end
	end

	if (KiThreadNext@)
		// we already got preempted at some point.
		return
	end

	auto current
	KeThreadCurrent@ current!

	auto next
	current@ KeThread_PriorityB + gb // low
	current@ KeThread_PriorityB + gb // high
	KiThreadFind next!

	if (next@ ~~)
		// there's nobody else on our priority queue to give the CPU to.
		return
	end

	current@ KiThreadReady

	next@ KiThreadSwitch
end

fn KiThreadBlock { status -- }
	if (DEBUGCHECKS)
		if (status@ THREADSTATUS_READY ==)
			"KiThreadBlock: READY specified, use KiThreadYieldQuantum instead\n" KeCrash
		end
	end

	auto current
	KeThreadCurrent@ current!

	0 current@ KeThread_QuantumEndCountB + sb

	status@ current@ KeThread_StatusB + sb

	current@ KiThreadSelect KiThreadSwitch
end

var InitialContext 0

fn KiThreadSwitch { thread -- }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"KiThreadSwitch: ipl ~= IPLDPC\n" KeCrash
		end
	end

	auto current
	KeThreadCurrent@ current!

	if (DEBUGCHECKS)
		if (thread@ current@ ==)
			"KiThreadSwitch: thread == current\n" KeCrash
		end
	end

	THREADSTATUS_RUNNING thread@ KeThread_StatusB + sb

	auto old

	if (current@)
		current@ KeThread_Context + old!

		auto nextproc
		thread@ KeThread_Process + @ nextproc!

		if (current@ KeThread_Process + @ KeProcess_PageDirectory + @
			nextproc@ KeProcess_PageDirectory + @ ~=)

			nextproc@ KeAddressSpaceSwitch
		end
	end else
		if (DEBUGCHECKS)
			if (InitialContext@)
				"KiThreadSwitch: two initial contexts?\n" KeCrash
			end
		end

		InitialContext old!
	end

	auto rs
	HALCPUInterruptDisable rs!

	thread@ KeThreadCurrent!

	thread@ KeThread_KernelStackTop + @ KeThreadCurrentStackTop!
	thread@ KeThread_KernelStackTop + @ KETHREADSTACKSIZE - KeThreadCurrentStackBottom!

	old@ thread@ KeThread_Context + @ HALCPUContextSwitch

	rs@ HALCPUInterruptRestore

	if (current@ KeThread_APCListHead + @)
		IPLAPC KiSoftwareInterruptRequest
	end
end

fn KiThreadQuantumEnd { -- }
	auto current
	KeThreadCurrent@ current!

	if (DEBUGCHECKS)
		if (current@ KeThread_StatusB + gb THREADSTATUS_RUNNING ~=)
			"KiThreadQuantumEnd: current thread isn't RUNNING\n" KeCrash
		end
	end

	auto pri
	current@ KeThread_PriorityB + gb pri!

	if (pri@ PRIORITY_IDLE ==)
		-1 current@ KeThread_QuantumB + sb
		return
	end

	auto basequantum
	current@ KeThread_Process + @ KeProcess_BaseQuantumB + gb basequantum!

	1 KeStatistics OSStatistics_QuantumEnds + +=

	auto qendcount
	current@ KeThread_QuantumEndCountB + gb qendcount!

	qendcount@ 1 + current@ KeThread_QuantumEndCountB + sb

	// reset the thread's quantum.

	if (current@ KeThread_PriorityB + gb PRIORITY_LOWREALTIME >=)
		// real-time, just reset the quantum.

		basequantum@ current@ KeThread_QuantumB + sb
	end else
		// perform a linear reduction of the quantum based on how many
		// consecutive quantum-ends this thread has taken w/o blocking
		// voluntarily.

		if (qendcount@ basequantum@ >=)
			1 current@ KeThread_QuantumB + sb
		end else
			basequantum@ qendcount@ - current@ KeThread_QuantumB + sb
		end
	end

	// decrement the thread's priority in order to decay boosting.

	auto newpri

	if (pri@ PRIORITY_LOWREALTIME <)
		if (current@ KeThread_InstantDecayB + gb)
			current@ KeThread_BasePriorityB + gb newpri!
			0 current@ KeThread_InstantDecayB + sb
		end else
			pri@ 1 - newpri!

			if (newpri@ current@ KeThread_BasePriorityB + gb <)
				current@ KeThread_BasePriorityB + gb newpri!
			end
		end
	end else
		pri@ newpri!
	end

	if (pri@ newpri@ ~=)
		// if priority was penalized, don't penalize quantum again.

		0 current@ KeThread_QuantumEndCountB + sb

		newpri@ // priority
		current@ // thread
		KiThreadPrioritySet
	end elseif (KiThreadNext@)
		0 current@ KeThread_WasPreemptedB + sb
	end else
		auto next
		pri@ // low
		pri@ // high
		KiThreadFind next!

		if (next@)
			THREADSTATUS_STANDBY next@ KeThread_StatusB + sb
			next@ KiThreadNext!
		end else
			// there was nobody else to run anyway, so don't penalize quantum
			// again.

			0 current@ KeThread_QuantumEndCountB + sb
		end
	end
end

fn KiThreadNextSwitch { -- }
	auto next
	KiThreadNext@ next!
	0 KiThreadNext!

	if (DEBUGCHECKS)
		if (next@ ~~)
			"KiThreadNextSwitch\n" KeCrash
		end
	end

	KeThreadCurrent@ KiThreadReady

	next@ KiThreadSwitch
end

fn KiThreadPriorityBoost { boost thread -- }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"KiThreadPriorityBoost: ipl != IPLDPC\n" KeCrash
		end
	end

	auto pri
	thread@ KeThread_PriorityB + gb pri!

	if (pri@ PRIORITY_LOWREALTIME <)
		if (thread@ KeThread_InstantDecayB + gb ~~)
			auto newpri
			thread@ KeThread_BasePriorityB + gb boost@ + newpri!

			if (newpri@ PRIORITY_HIGHUSER >)
				PRIORITY_HIGHUSER newpri!
			end

			if (newpri@ pri@ >)
				thread@ KeThread_Process + @ KeProcess_BaseQuantumB + gb thread@ KeThread_QuantumB + sb

				newpri@ // priority
				thread@ // thread
				KiThreadPrioritySet
			end
		end
	end
end

fn KiThreadBasePrioritySet { priority thread -- }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"KiThreadBasePrioritySet: ipl != IPLDPC\n" KeCrash
		end

		if (priority@ PRIORITY_LOWUSER <)
			"KiThreadBasePrioritySet: priority < PRIORITY_LOWUSER\n" KeCrash
		end

		if (priority@ PRIORITY_HIGHREALTIME >)
			"KiThreadBasePrioritySet: priority > PRIORITY_HIGHREALTIME\n" KeCrash
		end
	end

	auto pri
	thread@ KeThread_BasePriorityB + gb pri!

	if (pri@ priority@ ==)
		return
	end

	if (priority@ thread@ KeThread_PriorityB + gb >)
		priority@ // priority
		thread@ // thread
		KiThreadPrioritySet
	end

	priority@ thread@ KeThread_BasePriorityB + sb
end

fn KiThreadPrioritySet { priority thread -- }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"KiThreadPrioritySet: ipl != IPLDPC\n" KeCrash
		end

		if (priority@ PRIORITY_LOWUSER <)
			"KiThreadPrioritySet: priority < PRIORITY_LOWUSER\n" KeCrash
		end

		if (priority@ PRIORITY_HIGHREALTIME >)
			"KiThreadPrioritySet: priority > PRIORITY_HIGHREALTIME\n" KeCrash
		end
	end

	auto pri
	thread@ KeThread_PriorityB + gb pri!

	if (pri@ priority@ ==)
		return
	end

	auto next

	priority@ thread@ KeThread_PriorityB + sb

	if (thread@ KeThread_StatusB + gb THREADSTATUS_READY ==)
		if (thread@ KeThread_InSwapListB + gb ~~)
			// remove from ready queue and then re-ready

			auto n
			thread@ KeThread_QueueNext + @ n!

			if (n@)
				thread@ KeThread_QueuePrev + @ n@ KeThread_QueuePrev + !
			end else // no next means we were the tail
				thread@ KeThread_QueuePrev + @ [pri@]KiThreadPriorityQueueTails!
			end

			thread@ KeThread_QueuePrev + @ n!

			if (n@)
				thread@ KeThread_QueueNext + @ n@ KeThread_QueueNext + !
			end else // no prev means we were the head
				thread@ KeThread_QueueNext + @ [pri@]KiThreadPriorityQueueHeads!
			end

			0 thread@ KeThread_QueueNext + !
			0 thread@ KeThread_QueuePrev + !

			thread@ KiThreadReady
		end
	end elseif (thread@ KeThread_StatusB + gb THREADSTATUS_STANDBY ==)
		if (priority@ pri@ <)
			priority@ 1 + // low
			pri@ // high
			KiThreadFind next!

			if (next@)
				THREADSTATUS_STANDBY next@ KeThread_StatusB + sb
				next@ KiThreadNext!
				thread@ KiThreadReady
			end
		end
	end elseif (thread@ KeThread_StatusB + gb THREADSTATUS_RUNNING ==)
		if (KiThreadNext@ ~~)
			if (priority@ pri@ <)
				priority@ 1 + // low
				pri@ // high
				KiThreadFind next!

				if (next@)
					THREADSTATUS_STANDBY next@ KeThread_StatusB + sb
					next@ KiThreadNext!
					IPLDPC KiSoftwareInterruptRequest
				end
			end
		end
	end
end

fn KiThreadWakeup { waitstatus priboost thread -- }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"KiThreadWakeup: ipl != IPLDPC\n" KeCrash
		end

		if (thread@ KeThread_StatusB + gb THREADSTATUS_SUSPENDED ~=
			thread@ KeThread_StatusB + gb THREADSTATUS_WAITINGALERTABLE ~= &&
			thread@ KeThread_StatusB + gb THREADSTATUS_WAITINGUNALERTABLE ~= &&)
			"KiThreadWakeup: thread was not asleep\n" KeCrash
		end
	end

	// remove from global wait list

	auto n
	thread@ KeThread_QueueNext + @ n!

	if (n@)
		thread@ KeThread_QueuePrev + @ n@ KeThread_QueuePrev + !
	end

	auto p
	thread@ KeThread_QueuePrev + @ p!

	if (p@)
		thread@ KeThread_QueueNext + @ p@ KeThread_QueueNext + !
	end else // no prev means we were the head
		thread@ KeThread_QueueNext + @ KeThreadWaitListHead!
	end

	0 thread@ KeThread_QueueNext + !
	0 thread@ KeThread_QueuePrev + !

	// wake up thread

	0 // satisfy
	thread@ // thread
	KiThreadWaitBlocksDequeue

	thread@ KeThread_Timer + KeTimerDequeue drop

	// apply priority boost and adjust quantum

	auto process
	thread@ KeThread_Process + @ process!

	if (thread@ KeThread_PriorityB + gb PRIORITY_LOWREALTIME >=)
		// realtime thread, just reset quantum to process default and leave
		// priority alone.

		process@ KeProcess_BaseQuantumB + gb thread@ KeThread_QuantumB + sb
	end else
		auto nm

		if (thread@ KeThread_InstantDecayB + gb ~~)
			thread@ KeThread_BasePriorityB + gb priboost@ + nm!

			if (nm@ PRIORITY_HIGHUSER >)
				PRIORITY_HIGHUSER nm!
			end

			if (nm@ thread@ KeThread_PriorityB + gb >)
				nm@ thread@ KeThread_PriorityB + sb
			end
		end

		// penalize process for the wait and do a partial QuantumEnd if
		// <=zero.

		thread@ KeThread_QuantumB + gb nm!

		1 nm -=

		if (nm@ z<)
			0 nm!
		end

		if (nm@ ~~)
			1 KeStatistics OSStatistics_QuantumEnds + +=

			process@ KeProcess_BaseQuantumB + gb nm!

			if (thread@ KeThread_InstantDecayB + gb)
				thread@ KeThread_BasePriorityB + gb thread@ KeThread_PriorityB + sb
				0 thread@ KeThread_InstantDecayB + sb
			end elseif (thread@ KeThread_PriorityB + gb
				thread@ KeThread_BasePriorityB + gb >)
				
				thread@ KeThread_PriorityB + gb 1 - thread@ KeThread_PriorityB + sb
			end
		end

		nm@ thread@ KeThread_QuantumB + sb
	end

	waitstatus@ thread@ KeThread_WaitStatus + !
	
	thread@ KiThreadReady
end

fn KiThreadWait { waitipl waitmode alertable explicitstatus -- ok }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"KiThreadWait: ipl != IPLDPC\n" KeCrash
		end

		if (waitipl@ IPLDPC >=)
			"KiThreadWait: waitipl >= IPLDPC\n" KeCrash
		end

		if (KeThreadCurrent@ KeThread_PriorityB + gb PRIORITY_IDLE ==)
			"KiThreadWait: idle thread slept!\n" KeCrash
		end
	end

	auto current
	KeThreadCurrent@ current!

	waitipl@ // ipl
	waitmode@ // mode
	alertable@ // alertable
	1 // waiting
	current@ // thread
	KeThreadIsKilled ok!

	if (ok@)
		0 // satisfy
		current@ // thread
		KiThreadWaitBlocksDequeue

		current@ KeThread_Timer + KeTimerDequeue drop

		return
	end

	// insert in global wait list

	auto h
	KeThreadWaitListHead@ h!

	0 current@ KeThread_QueuePrev + !

	if (h@)
		current@ h@ KeThread_QueuePrev + !
	end

	h@ current@ KeThread_QueueNext + !

	current@ KeThreadWaitListHead!

	// go to sleep

	auto waittime
	KeTime_SIZEOF alloc waittime!

	waittime@ HALUptimeQuery
	waittime@ KeTime_SecPart + @ current@ KeThread_WaitOrReadyTimeSec + !

	waitmode@ current@ KeThread_WaitModeB + sb
	waitipl@ current@ KeThread_WaitIPLB + sb
	0 current@ KeThread_WaitStatus + !

	if (explicitstatus@)
		explicitstatus@ KiThreadBlock
	end elseif (alertable@)
		THREADSTATUS_WAITINGALERTABLE KiThreadBlock
	end else
		THREADSTATUS_WAITINGUNALERTABLE KiThreadBlock
	end

	current@ KeThread_WaitStatus + @ ok!
end