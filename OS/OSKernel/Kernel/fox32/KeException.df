#include "<df>/dragonfruit.h"
#include "<inc>/HALCrash.h"

#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALConsole.h"

#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

// if this seems janked up, its because it is, because this all used to be in
// the HAL, and the process of moving it into the kernel was rough.

const ECAUSEINTERRUPT 1
const ECAUSESYS       2
const ECAUSENMI       5
const ECAUSEBRK       6
const ECAUSEINVALID   7
const ECAUSEPRIVVIOL  8
const ECAUSEUNALIGNED 9
const ECAUSEPAGEFAULT 12
const ECAUSEPAGEWRITE 13

externptr HALfox32InterruptHandlers

externptr KeThreadCurrentStackTop
externptr KeThreadCurrentStackBottom
externptr HALInterruptStackTop

externptr OSCallCount
externptr OSCallTable

externptr KeIPLCurrent

externptr HALfox32InterruptsDisabled

extern HALfox32TLBFlushAll { -- }

asm "

KeFox32DismissVector:
.global KeFox32DismissVector
	reti

KeFox32VsyncVector:
.global KeFox32VsyncVector
	push 0 ;badaddr
	push fp
	push r31
	push tp
	push at
	push s17
	push s16
	push s15
	push s14
	push s13
	push s12
	push s11
	push s10
	push s9
	push s8
	push s7
	push s6
	push s5
	push s4
	push s3
	push s2
	push s1
	push s0
	push a3
	push a2
	push a1
	push a0
	push t6
	push t5
	push t4
	push t3
	push t2
	push t1
	push t0

	mov  a0, sp
	mov  a1, 0xFF
	call KeFox32Exception

	pop  t0
	pop  t1
	pop  t2
	pop  t3
	pop  t4
	pop  t5
	pop  t6
	pop  a0
	pop  a1
	pop  a2
	pop  a3
	pop  s0
	pop  s1
	pop  s2
	pop  s3
	pop  s4
	pop  s5
	pop  s6
	pop  s7
	pop  s8
	pop  s9
	pop  s10
	pop  s11
	pop  s12
	pop  s13
	pop  s14
	pop  s15
	pop  s16
	pop  s17
	pop  at
	pop  tp
	pop  r31
	pop  fp
	add  sp, 4
	reti

KeFox32DivideZeroVector:
.global KeFox32DivideZeroVector
	push 0 ;badaddr
	push fp
	push r31
	push tp
	push at
	push s17
	push s16
	push s15
	push s14
	push s13
	push s12
	push s11
	push s10
	push s9
	push s8
	push s7
	push s6
	push s5
	push s4
	push s3
	push s2
	push s1
	push s0
	push a3
	push a2
	push a1
	push a0
	push t6
	push t5
	push t4
	push t3
	push t2
	push t1
	push t0

	mov  a0, sp
	mov  a1, 0x100
	call KeFox32Exception

	pop  t0
	pop  t1
	pop  t2
	pop  t3
	pop  t4
	pop  t5
	pop  t6
	pop  a0
	pop  a1
	pop  a2
	pop  a3
	pop  s0
	pop  s1
	pop  s2
	pop  s3
	pop  s4
	pop  s5
	pop  s6
	pop  s7
	pop  s8
	pop  s9
	pop  s10
	pop  s11
	pop  s12
	pop  s13
	pop  s14
	pop  s15
	pop  s16
	pop  s17
	pop  at
	pop  tp
	pop  r31
	pop  fp
	add  sp, 4
	reti

KeFox32SyscallVector:
.global KeFox32SyscallVector
	push 0 ;badaddr
	push fp
	push r31
	push tp
	push at
	push s17
	push s16
	push s15
	push s14
	push s13
	push s12
	push s11
	push s10
	push s9
	push s8
	push s7
	push s6
	push s5
	push s4
	push s3
	push s2
	push s1
	push s0
	push a3
	push a2
	push a1
	push a0
	push t6
	push t5
	push t4
	push t3
	push t2
	push t1
	push t0

	mov  a0, sp
	mov  a1, 0x30
	call KeFox32Exception

	pop  t0
	pop  t1
	pop  t2
	pop  t3
	pop  t4
	pop  t5
	pop  t6
	pop  a0
	pop  a1
	pop  a2
	pop  a3
	pop  s0
	pop  s1
	pop  s2
	pop  s3
	pop  s4
	pop  s5
	pop  s6
	pop  s7
	pop  s8
	pop  s9
	pop  s10
	pop  s11
	pop  s12
	pop  s13
	pop  s14
	pop  s15
	pop  s16
	pop  s17
	pop  at
	pop  tp
	pop  r31
	pop  fp
	add  sp, 4
	reti

KeFox32InvalidOpcodeVector:
.global KeFox32InvalidOpcodeVector
	push 0 ;badaddr
	push fp
	push r31
	push tp
	push at
	push s17
	push s16
	push s15
	push s14
	push s13
	push s12
	push s11
	push s10
	push s9
	push s8
	push s7
	push s6
	push s5
	push s4
	push s3
	push s2
	push s1
	push s0
	push a3
	push a2
	push a1
	push a0
	push t6
	push t5
	push t4
	push t3
	push t2
	push t1
	push t0

	mov  a0, sp
	mov  a1, 0x101
	call KeFox32Exception

	pop  t0
	pop  t1
	pop  t2
	pop  t3
	pop  t4
	pop  t5
	pop  t6
	pop  a0
	pop  a1
	pop  a2
	pop  a3
	pop  s0
	pop  s1
	pop  s2
	pop  s3
	pop  s4
	pop  s5
	pop  s6
	pop  s7
	pop  s8
	pop  s9
	pop  s10
	pop  s11
	pop  s12
	pop  s13
	pop  s14
	pop  s15
	pop  s16
	pop  s17
	pop  at
	pop  tp
	pop  r31
	pop  fp
	add  sp, 4
	reti

KeFox32PageFaultVector:
.global KeFox32PageFaultVector
	push fp
	push r31
	push tp
	push at
	push s17
	push s16
	push s15
	push s14
	push s13
	push s12
	push s11
	push s10
	push s9
	push s8
	push s7
	push s6
	push s5
	push s4
	push s3
	push s2
	push s1
	push s0
	push a3
	push a2
	push a1
	push a0
	push t6
	push t5
	push t4
	push t3
	push t2
	push t1
	push t0

	mov  a0, sp
	mov  a1, 0x102
	call KeFox32Exception

	pop  t0
	pop  t1
	pop  t2
	pop  t3
	pop  t4
	pop  t5
	pop  t6
	pop  a0
	pop  a1
	pop  a2
	pop  a3
	pop  s0
	pop  s1
	pop  s2
	pop  s3
	pop  s4
	pop  s5
	pop  s6
	pop  s7
	pop  s8
	pop  s9
	pop  s10
	pop  s11
	pop  s12
	pop  s13
	pop  s14
	pop  s15
	pop  s16
	pop  s17
	pop  at
	pop  tp
	pop  r31
	pop  fp
	add  sp, 4
	reti

KeFox32PageFaultWriteVector:
.global KeFox32PageFaultWriteVector
	push fp
	push r31
	push tp
	push at
	push s17
	push s16
	push s15
	push s14
	push s13
	push s12
	push s11
	push s10
	push s9
	push s8
	push s7
	push s6
	push s5
	push s4
	push s3
	push s2
	push s1
	push s0
	push a3
	push a2
	push a1
	push a0
	push t6
	push t5
	push t4
	push t3
	push t2
	push t1
	push t0

	mov  a0, sp
	mov  a1, 0x103
	call KeFox32Exception

	pop  t0
	pop  t1
	pop  t2
	pop  t3
	pop  t4
	pop  t5
	pop  t6
	pop  a0
	pop  a1
	pop  a2
	pop  a3
	pop  s0
	pop  s1
	pop  s2
	pop  s3
	pop  s4
	pop  s5
	pop  s6
	pop  s7
	pop  s8
	pop  s9
	pop  s10
	pop  s11
	pop  s12
	pop  s13
	pop  s14
	pop  s15
	pop  s16
	pop  s17
	pop  at
	pop  tp
	pop  r31
	pop  fp
	add  sp, 4
	reti

; a0 - tf
KeFox32Syscall:
.global KeFox32Syscall
	push fp
	mov  fp, sp

	push s17
	mov  s17, a0 ;trampolines expect trapframe in s17

	mov  t1, a0
	add  t1, OSContext_t0
	mov  t1, [t1]
	ifz  jmp .sysout

	mov  t0, [OSCallCount]
	cmp  t1, t0
	ifgt jmp .sysout

	mov  t0, OSCallTable
	sla  t1, 2
	add  t0, t1
	call [t0]

.sysout:
	pop  s17

	pop  fp
	ret

ThreadTrampoline:
.global ThreadTrampoline
	mov  [HALfox32InterruptsDisabled], 0
	ise
	jmp  a2

KeIPLCurrentGet:
.global KeIPLCurrentGet
	mov  a0, [KeIPLCurrent]
	ret

"

extern ThreadTrampoline { -- }

extern KeFox32Syscall { tf -- }

const EXCNAMESMAX 4

table ExceptionNames
	"DIVZERO"
	"INVINST"
	"PF"
	"PFW"
endtable

extern PsPrepareUsermode { trapframe -- }

fn KeStackOverflow { rs -- }
	auto current
	KeThreadCurrent@ current!

	if (current@)
		current@ KeThread_Name +
		current@ KeThread_Process + @ KeProcess_Name +
		"process '%s' thread '%s' kernel stack overflow\n" KeCrash
	end

	rs@ "Kernel stack overflow %x\n" KeCrash
end

fn KeCopySignalFrame { signum dispatchfunc thread trapframe -- recheck }
	0 recheck!

	auto usp
	trapframe@ OSContext_sp + @ usp!

	if (DEBUGCHECKS)
		if (trapframe@ OSContext_eflagsB + gb FOX32_RS_USER & ~~)
			trapframe@ "KeCopySignalFrame: not usermode trapframe %x\n" KeCrash
		end
	end

	OSContext_SIZEOF usp -=

	auto ok
	usp@ // dest
	trapframe@ // src
	OSContext_SIZEOF // sz
	KeSafeCopyOut ok!

	if (ok@)
		// failed to copy out signal frame, this is fatal to the entire
		// process.
		// XXX should it be???

		128 OSSIGNAL_KILL + thread@ KeThread_Process + @ KeProcess_KilledStatus + !

		OSSIGNAL_KILL // signal
		thread@ KeThread_Process + @ // process
		KeProcessSignal drop

		1 recheck!

		return
	end

	usp@ trapframe@ OSContext_sp + !
	dispatchfunc@ trapframe@ OSContext_epc + !
	signum@ trapframe@ OSContext_a0 + !
	usp@ trapframe@ OSContext_a1 + !

	auto process
	thread@ KeThread_Process + @ process!

	auto rs
	HALCPUInterruptDisable rs!

	1 signum@ << ~ thread@ KeThread_Signals + &=

	rs@ HALCPUInterruptRestore
end

fn KeThreadContinue { context thread -- }
	auto tf
	thread@ KeThread_TrapFrame + @ tf!

	auto ers
	tf@ OSContext_eflagsB + gb ers!

	if (DEBUGCHECKS)
		if (ers@ FOX32_RS_USER & ~~)
			tf@ "KeThreadContinue: not usermode trapframe %x\n" KeCrash
		end
	end

	tf@ // dest
	context@ // src
	OSContext_SIZEOF // size
	memcpy

	// don't modify ers lest we allow our user programs to get kernelmode...
	ers@ tf@ OSContext_eflagsB + sb
end

var KeFox32OldIPL 0
public KeFox32OldIPL

const EXCPAGEFAULT 2
const EXCPAGEFAULTWRITE 3

externptr KeInterlockedDecrementEnd
externptr KeInterlockedIncrementEnd

fn KeFox32Exception { ecause tf -- }
	auto olddis
	HALfox32InterruptsDisabled@ olddis!
	1 HALfox32InterruptsDisabled!

	auto ipl
	KeIPLCurrent@ ipl!
	ipl@ KeFox32OldIPL!

	auto handled
	1 handled!

	if (DEBUGCHECKS)
		if (tf@ OSContext_eflagsB + gb FOX32_RS_INT &)
			if (olddis@)
				olddis@ tf@ OSContext_eflagsB + gb "ef=%x interrupts enabled but id=%d\n" KeCrash
			end elseif (ipl@ IPLDPC >)
				ipl@ tf@ OSContext_eflagsB + gb "ef=%x interrupts enabled but ipl=%d\n" KeCrash
			end
		end else
			if (olddis@ ~~)
				if (ipl@ IPLDPC <=)
					ipl@ olddis@ tf@ OSContext_eflagsB + gb "ef=%x interrupts disabled but id=%d ipl=%d\n" KeCrash
				end
			end
		end
	end

	if (tf@ OSContext_eflagsB + gb FOX32_RS_USER &)
		tf@ KeThreadCurrent@ KeThread_TrapFrame + !

		// check for interlocked operation

		if (tf@ OSContext_epc + @ PsOSDLLInformation PsOSDLLInfo_InterlockedIncStart + @ >=)
			if (tf@ OSContext_epc + @ PsOSDLLInformation PsOSDLLInfo_InterlockedIncEnd + @ <)
				PsOSDLLInformation PsOSDLLInfo_InterlockedIncStart + @ tf@ OSContext_epc + !
			end
		end elseif (tf@ OSContext_epc + @ PsOSDLLInformation PsOSDLLInfo_InterlockedDecStart + @ >=)
			if (tf@ OSContext_epc + @ PsOSDLLInformation PsOSDLLInfo_InterlockedDecEnd + @ <)
				PsOSDLLInformation PsOSDLLInfo_InterlockedDecStart + @ tf@ OSContext_epc + !
			end
		end elseif (tf@ OSContext_epc + @ PsOSDLLInformation PsOSDLLInfo_TryAcquireStart + @ >=)
			if (tf@ OSContext_epc + @ PsOSDLLInformation PsOSDLLInfo_TryAcquireEnd + @ <)
				PsOSDLLInformation PsOSDLLInfo_TryAcquireStart + @ tf@ OSContext_epc + !
			end
		end
	end else
		if (tf@ OSContext_epc + @ pointerof KeInterlockedIncrement >=)
			if (tf@ OSContext_epc + @ KeInterlockedIncrementEnd <)
				pointerof KeInterlockedIncrement tf@ OSContext_epc + !
			end
		end elseif (tf@ OSContext_epc + @ pointerof KeInterlockedDecrement >=)
			if (tf@ OSContext_epc + @ KeInterlockedDecrementEnd <)
				pointerof KeInterlockedDecrement tf@ OSContext_epc + !
			end
		end
	end

	auto excname

	if (handled@)
		0 handled!

		if (ecause@ 0x100 <)
			// interrupt

			1 handled!

			if (ecause@ 0x30 ==)
				HALCPUInterruptEnable

				tf@ KeFox32Syscall

				HALCPUInterruptDisable drop
			end else
				1 KeStatistics OSStatistics_Interrupts + +=

				IPLHIGH KeIPLCurrent!

				tf@ // trapframe
				ecause@ // int
				[ecause@]HALPlatformInterruptHandlers@ HALInterruptHandler

				// this is an inlined version of what KeIPLLower also does

				if (ipl@ IPLDPC <)
					IPLDPC KeIPLCurrent!

					while (KeDPCListHead@ KeThreadNext@ ||)
						if (KeDPCListHead@)
							KeDPCDispatchQueue
						end

						if (KeThreadNext@)
							HALCPUInterruptEnable

							KeThreadNextSwitch

							HALCPUInterruptDisable drop
						end
					end
				end

				ipl@ KeIPLCurrent!
			end
		end else
			if (ecause@ 0x100 - EXCPAGEFAULT ==)
				0 // writing
				tf@ OSContext_badaddr + @ // badaddr
				tf@ // trapframe
				MmPageFault handled!
			end elseif (ecause@ 0x100 - EXCPAGEFAULTWRITE ==)
				1 // writing
				tf@ OSContext_badaddr + @ // badaddr
				tf@ // trapframe
				MmPageFault handled!
			end
		end
	end

	if (handled@ ~~)
		if (ecause@ 0x100 >=)
			// exception
			if (ecause@ 0x100 - EXCNAMESMAX >=)
				"UNKNOWN" excname!
			end else
				[ecause@ 0x100 -]ExceptionNames@ excname!
			end
		end else
			"?" excname!
		end

		excname@
		tf@ OSContext_badaddr + @
		tf@ OSContext_epc + @
		tf@ OSContext_eflagsB + gb
		KeIPLCurrent@
		olddis@
		"I%d,IP%d,EF%02x,PC%08x,VA%08x,%s\n" KeCrash
	end

	if (tf@ OSContext_eflagsB + gb FOX32_RS_USER &)
		// we interrupted usermode code

		tf@ PsPrepareUsermode
	end

	olddis@ HALfox32InterruptsDisabled!
end

fn KeCPUInit { -- }
	fnsection "INIT$text"

	auto i
	256 i!

	auto vec
	IDENTITYSPACE vec!

	while (i@)
		pointerof KeFox32DismissVector vec@!

		1 i -=
		4 vec +=
	end

	// set the interrupt vectors

	pointerof KeFox32VsyncVector
	0xFF 4 * IDENTITYSPACE + !

	pointerof KeFox32SyscallVector
	0x30 4 * IDENTITYSPACE + !

	// set the exception vectors

	256 4 * IDENTITYSPACE | vec!

	pointerof KeFox32DivideZeroVector vec@!
	4 vec +=

	pointerof KeFox32InvalidOpcodeVector vec@!
	4 vec +=

	pointerof KeFox32PageFaultVector vec@!
	4 vec +=

	pointerof KeFox32PageFaultWriteVector vec@!
	4 vec +=

	// enable interrupts

	0 HALfox32InterruptsDisabled!
end

fn HALCPUIsUserTrapFrame { tf -- user }
	tf@ OSContext_eflagsB + gb FOX32_RS_USER & user!
end

fn HALCPUTrapFrameAbort { abort tf -- }
	abort@ tf@ OSContext_epc + !
end

fn HALCPUContextInit { context1 context2 startfunc kstack process -- ctx }
	8 kstack -=

	0 kstack@!
	startfunc@ kstack@ 4 + !

	kstack@ OSContext_SIZEOF - ctx!

	ctx@ OSContext_SIZEOF 0 memset

	startfunc@ ctx@ OSContext_a2 + !
	context1@ ctx@ OSContext_a1 + !
	context2@ ctx@ OSContext_a0 + !

	0 ctx@ OSContext_fp + !

	// enable interrupts and paging in the thread's context
	FOX32_RS_KTHREAD ctx@ OSContext_eflagsB + sb

	pointerof ThreadTrampoline ctx@ OSContext_epc + !

	kstack@ ctx@ OSContext_sp + !
end