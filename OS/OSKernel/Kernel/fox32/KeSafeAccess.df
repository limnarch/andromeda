#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"

#include "<inc>/Kernel.h"
#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

// XXX has intricate knowledge of the implementation of lots of copy functions
// in terms of being sure that they won't corrupt saved registers.
// in dfrt these are all hand-written in asm so this can be known for sure.

asm "

;a0 - sz
;a1 - src
;a2 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeCopyIn:
.global KeSafeCopyIn
	cmp  a1, MMHIGHESTUSERADDRESS
	ifgt jmp .failure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], KeSafeAccessFailure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  [t0], sp

	call memcpy

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]

	mov  a0, 0
	ret

.failure:
	mov  a0, STATUS_FAULT
	ret

;a0 - sz
;a1 - src
;a2 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeCopyOut:
.global KeSafeCopyOut
	cmp  a2, MMHIGHESTUSERADDRESS
	ifgt jmp .failure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], KeSafeAccessFailure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  [t0], sp

	call memcpy

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]

	mov  a0, 0
	ret

.failure:
	mov  a0, STATUS_FAULT
	ret

;a0 - max
;a1 - src
;a2 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeStringCopyIn:
.global KeSafeStringCopyIn
	cmp  a1, MMHIGHESTUSERADDRESS
	ifgt jmp .failure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], KeSafeAccessFailure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  [t0], sp

	call strncpy

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]

	mov  a0, 0
	ret

.failure:
	mov  a0, STATUS_FAULT
	ret

;a0 - max
;a1 - src
;a2 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeStringCopyOut:
.global KeSafeStringCopyOut
	cmp  a2, MMHIGHESTUSERADDRESS
	ifgt jmp .failure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], KeSafeAccessFailure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  [t0], sp

	call strncpy

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]

	mov  a0, 0
	ret

.failure:
	mov  a0, STATUS_FAULT
	ret

;a0 - word
;a1 - sz
;a2 - ptr
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeMemset:
.global KeSafeMemset
	cmp  a2, MMHIGHESTUSERADDRESS
	ifgt jmp .failure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], KeSafeAccessFailure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  [t0], sp

	call memset

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]

	mov  a0, 0
	ret

.failure:
	mov  a0, STATUS_FAULT
	ret

KeSafeAccessFailure:
	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]
	
	mov  a0, STATUS_FAULT
	ret

;a1 - byte
;a0 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeStoreByte:
.global KeSafeStoreByte
	cmp  a0, MMHIGHESTUSERADDRESS
	ifgt jmp .failure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], KeSafeAccessFailure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  [t0], sp

	mov.8 [a0], a1

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]

	mov  a0, 0
	ret

.failure:
	mov  a0, STATUS_FAULT
	ret

;a0 - dest
;returns:
;a0 - 0 if success, STATUS_FAULT if fault
KeSafeProbeWrite:
.global KeSafeProbeWrite
	cmp  a0, MMHIGHESTUSERADDRESS
	ifgt jmp .failure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], KeSafeAccessFailure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  [t0], sp

	mov.8 t1, [a0]
	mov.8 [a0], t1

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]

	mov  a0, 0
	ret

.failure:
	mov  a0, STATUS_FAULT
	ret

;a0 - src
;returns:
;a0 - byte
;a1 - 0 if success, STATUS_FAULT if fault
KeSafeGetByte:
.global KeSafeGetByte
	cmp  a0, MMHIGHESTUSERADDRESS
	ifgt jmp .failure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], KeSafeGetByteFailure

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  [t0], sp

	movz.8 a0, [a0]

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]

	mov  a1, 0
	ret

.failure:
	mov  a1, STATUS_FAULT
	ret

KeSafeGetByteFailure:
	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessAbort
	mov  [t0], 0

	mov  t0, [KeThreadCurrent]
	add  t0, KeThread_SafeAccessSP
	mov  sp, [t0]
	
	mov  a1, STATUS_FAULT
	ret

	nop
	nop

; inc ptr -- oldcount
KeInterlockedIncrement:
.global KeInterlockedIncrement
	mov  t0, [a0]
	add  [a0], a1
KeInterlockedIncrementEnd:
.global KeInterlockedIncrementEnd
	mov  a0, t0
	ret

"