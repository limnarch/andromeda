//
// Implements the executive directory object.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "ObInternal.h"

fn (ObTypeDeleteFunction) ObiDirectoryObjectDelete { object -- }
	fnsection "PAGE$text"

	ObRootDirectoryLockUnalertable

	while (object@ ObiDirectory_ObjectListHead + @)
		auto ok
		1 // locked
		object@ ObiDirectory_ObjectListHead + @ // object
		ObDirectoryRemoveByPointer ok!

		if (DEBUGCHECKS)
			if (ok@)
				"ObiDirectoryObjectDelete: failed to remove child (%i)\n" KeCrash
			end
		end
	end

	ObRootDirectoryUnlock

	if (DEBUGCHECKS)
		if (object@ ObiDirectory_ChildCount + @)
			"ObiDirectoryObjectDelete: failed to remove all children\n" KeCrash
		end
	end
end

fn ObRootDirectoryLockUnalertable { -- }
	fnsection "PAGE$text"

	auto ok

	0 // alertable
	0 // nowait
	ObRootRwLock // rwlock
	ExRwLockAcquireExclusive ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "ObRootDirectoryLockUnalertable: lock was unalertable but failed (%i)\n" KeCrash
		end
	end
end

fn ObRootDirectoryLock { alertable -- ok }
	fnsection "PAGE$text"

	alertable@ // alertable
	0 // nowait
	ObRootRwLock // rwlock
	ExRwLockAcquireExclusive ok!

	if (DEBUGCHECKS)
		if (alertable@ ok@ &&)
			ok@ "ObRootDirectoryLock: lock was unalertable but failed (%i)\n" KeCrash
		end
	end
end

fn ObRootDirectoryLockShared { alertable -- ok }
	fnsection "PAGE$text"

	alertable@ // alertable
	0 // nowait
	0 // canstarve
	ObRootRwLock // rwlock
	ExRwLockAcquireShared ok!

	if (DEBUGCHECKS)
		if (alertable@ ok@ &&)
			ok@ "ObRootDirectoryLockShared: lock was unalertable but failed (%i)\n" KeCrash
		end
	end
end

fn ObRootDirectoryUnlock { -- }
	fnsection "PAGE$text"

	ObRootRwLock ExRwLockRelease
end

fn ObDirectoryCreateObject { permissions name flags -- dirobject ok }
	fnsection "PAGE$text"

	name@ // name
	flags@ // flags
	permissions@ // permissions
	0 // npquotabias
	0 // pquotabias
	ObiDirectory_SIZEOF // bodysize
	ObTypeDirectoryType@ // type
	ObObjectCreate ok! dirobject!

	if (ok@)
		return
	end

	0 dirobject@ ObiDirectory_ObjectListHead + !
	0 dirobject@ ObiDirectory_ChildCount + !
end

fn ObDirectoryCreate { permissions name -- dirhandle ok }
	fnsection "PAGE$text"

	auto dirobject

	permissions@ // permissions
	name@ // name
	0 // flags
	ObDirectoryCreateObject ok! dirobject!

	if (ok@)
		return
	end

	1 // nocheck
	ACCESS_ALL // permissions
	dirobject@ // object
	ObObjectOpen ok! dirhandle!

	if (ok@)
		dirobject@ ObObjectDereferenceByPointer drop

		return
	end
end

fn ObDirectoryCountQuery { directoryhandle -- count ok }
	fnsection "PAGE$text"

	auto dir

	ObTypeDirectoryType@ // type
	directoryhandle@ // handle
	ObObjectReferenceByHandle ok! dir! drop

	if (ok@)
		return
	end

	dir@ ObiDirectory_ChildCount + @ count!

	dir@ ObObjectDereferenceByPointer drop
end

fn ObDirectoryQueryAllObject { buffer maxquery dirobject -- count ok }
	fnsection "PAGE$text"

	1 ObRootDirectoryLockShared ok!

	if (ok@)
		return
	end

	auto object
	dirobject@ ObiDirectory_ObjectListHead + @ object!

	0 count!

	while (object@)
		if (maxquery@ ~~)
			break
		end

		object@ // object
		buffer@ // query
		ObObjectQueryObject ok!

		if (ok@)
			ObRootDirectoryUnlock

			return
		end

		1 count +=
		1 maxquery -=
		OSObjectQuery_SIZEOF buffer +=
		object@ ObObjectPagedHeader ObPagedHeader_DirectoryListNext + @ object!
	end

	ObRootDirectoryUnlock
end

fn ObDirectoryQueryAll { buffer maxquery directoryhandle -- count ok }
	fnsection "PAGE$text"

	auto dir
	auto access

	ObTypeDirectoryType@ // type
	directoryhandle@ // handle
	ObObjectReferenceByHandle ok! dir! access!

	if (ok@)
		return
	end

	access@ ACCESS_READ SeCheckAccess ok!

	if (ok@)
		dir@ ObObjectDereferenceByPointer drop

		return
	end

	buffer@ // buffer
	maxquery@ // maxquery
	dir@ // dirobject
	ObDirectoryQueryAllObject ok! count!

	dir@ ObObjectDereferenceByPointer drop
end

fn ObDirectoryInsert { objecthandle directoryhandle -- ok }
	fnsection "PAGE$text"

	auto handletable
	KeProcessCurrent PsProcess_PagedArea + @ PsProcessPaged_HandleTable + @ handletable!

	handletable@ ExHandleTableLockShared ok!

	if (ok@)
		return
	end

	auto dir
	auto obj
	auto access

	ObTypeDirectoryType@ // type
	directoryhandle@ // handle
	ObObjectReferenceByHandle ok! dir! access!

	if (ok@)
		handletable@ ExHandleTableUnlock

		return
	end

	access@ ACCESS_WRITE ACCESS_EXEC | SeCheckAccess ok!

	if (ok@)
		handletable@ ExHandleTableUnlock

		dir@ ObObjectDereferenceByPointer drop

		return
	end

	0 // type (any)
	objecthandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		handletable@ ExHandleTableUnlock

		dir@ ObObjectDereferenceByPointer drop

		return
	end

	obj@ // object
	KeProcessCurrent // process
	SeCheckAccessObjectOwnerX ok!

	if (ok@)
		handletable@ ExHandleTableUnlock

		dir@ ObObjectDereferenceByPointer drop
		obj@ ObObjectDereferenceByPointer drop

		return
	end

	obj@ // object
	dir@ // directory
	ObDirectoryInsertByPointers ok!

	handletable@ ExHandleTableUnlock

	dir@ ObObjectDereferenceByPointer drop
	obj@ ObObjectDereferenceByPointer drop
end

fn ObDirectoryRemove { objecthandle -- ok }
	fnsection "PAGE$text"

	auto handletable
	KeProcessCurrent PsProcess_PagedArea + @ PsProcessPaged_HandleTable + @ handletable!

	handletable@ ExHandleTableLockShared ok!

	if (ok@)
		return
	end

	auto obj
	auto access

	0 // type (any)
	objecthandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		handletable@ ExHandleTableUnlock

		return
	end

	obj@ // object
	KeProcessCurrent // process
	SeCheckAccessObjectOwnerX ok!

	if (ok@)
		handletable@ ExHandleTableUnlock

		obj@ ObObjectDereferenceByPointer drop

		return
	end

	0 // locked
	obj@ // object
	ObDirectoryRemoveByPointer ok!

	handletable@ ExHandleTableUnlock

	obj@ ObObjectDereferenceByPointer drop
end

fn ObDirectoryInsertByPointers { object directory -- ok }
	fnsection "PAGE$text"

	// assumes the caller locked the handletable shared, to prevent a nasty
	// race condition where the object may get referenced and then closed for
	// the last time by another thread in the same process, then promptly
	// inserted into an object directory by the first thread; this is bad
	// because objects get removed from their directory upon the last handle
	// being closed, so the object will get stuck.

	0 ok!

	auto pheader
	object@ ObObjectPagedHeader pheader!

	auto npheader
	object@ ObObjectNonpagedHeader npheader!

	1 ObRootDirectoryLock ok!

	if (ok@)
		return
	end

	if (pheader@ ObPagedHeader_DirectoryObject + @)
		// object was already inserted in a directory

		ObRootDirectoryUnlock

		STATUS_ALREADY_EXISTS ok!

		return
	end

	if (object@ ObObjectName ~~)
		// no name! no bueno

		ObRootDirectoryUnlock

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	if (npheader@ ObNonpagedHeader_HandleCount + @ ~~)
		if (pheader@ ObPagedHeader_Flags + @ OBFLAGS_PERMANENT & ~~)
			// another thread in the process closed this object
			// before we could insert it. plus its not permanent.
			// should not be allowed to insert.

			ObRootDirectoryUnlock

			STATUS_INVALID_HANDLE ok!

			return
		end
	end

	// check for duplicate names

	auto h
	directory@ ObiDirectory_ObjectListHead + @ h!

	while (h@)
		if (h@ ObObjectName object@ ObObjectName strcmp)
			ObRootDirectoryUnlock

			STATUS_ALREADY_EXISTS ok!

			return
		end

		h@ ObObjectPagedHeader ObPagedHeader_DirectoryListNext + @ h!
	end

	// insert in directory list

	directory@ ObiDirectory_ObjectListHead + @ h!

	h@ pheader@ ObPagedHeader_DirectoryListNext + !

	if (h@)
		object@ h@ ObObjectPagedHeader ObPagedHeader_DirectoryListPrev + !
	end

	object@ directory@ ObiDirectory_ObjectListHead + !
	1 directory@ ObiDirectory_ChildCount + +=

	directory@ pheader@ ObPagedHeader_DirectoryObject + !

	ObRootDirectoryUnlock
end

fn ObDirectoryRemoveByPointer { locked object -- ok }
	fnsection "PAGE$text"

	// assumes the caller locked the handletable shared. i don't know if that
	// is strictly necessary for removal, but i know it is for insertion,
	// which makes me paranoid.

	auto pheader
	object@ ObObjectPagedHeader pheader!

	if (pheader@ ObPagedHeader_Flags + @ OBFLAGS_PERMANENT &)
		// don't remove from directory if permanent

		STATUS_FORBIDDEN_OPERATION ok!

		return
	end

	if (locked@ ~~)
		1 ObRootDirectoryLock ok!

		if (ok@)
			return
		end
	end

	auto dir
	pheader@ ObPagedHeader_DirectoryObject + @ dir!

	if (dir@ ~~)
		// object was not in a directory

		if (locked@ ~~)
			ObRootDirectoryUnlock
		end

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	if (locked@ ~~)
		ACCESS_WRITE ACCESS_EXEC | // access
		dir@ // dir
		KeProcessCurrent // process
		SeCheckAccessObjectUserX ok!

		if (ok@)
			ObRootDirectoryUnlock

			return
		end
	end

	auto n
	pheader@ ObPagedHeader_DirectoryListNext + @ n!

	auto l
	pheader@ ObPagedHeader_DirectoryListPrev + @ l!

	if (n@)
		l@ n@ ObObjectPagedHeader ObPagedHeader_DirectoryListPrev + !
	end

	if (l@)
		n@ l@ ObObjectPagedHeader ObPagedHeader_DirectoryListNext + !
	end else
		// no prev means we were the listhead

		n@ dir@ ObiDirectory_ObjectListHead + !
	end

	1 dir@ ObiDirectory_ChildCount + -=

	0 pheader@ ObPagedHeader_DirectoryObject + !

	if (locked@ ~~)
		ObRootDirectoryUnlock
	end
end

const REPARSEMAX 100

fn ObObjectReferenceByPath { flags path initialobject process -- object ok }
	fnsection "PAGE$text"

	auto pcomp
	OBNAMEMAX alloc pcomp!

	auto reparsecount
	0 reparsecount!

	auto heapcookie
	0 heapcookie!

	initialobject@ object!

	1 ObRootDirectoryLockShared ok!

	if (ok@)
		return
	end

	while (1)
		if (object@ ~~)
			if (path@ gb ~~)
				STATUS_NOT_FOUND ok!

				if (heapcookie@)
					heapcookie@ MmFree
				end

				return
			end

			if (path@ gb ':' ==)
				1 path +=
				IODevicesDirectoryObject@ object!

				// validate the device name -- escape into the object namespace
				// shouldn't be allowed.

				if (path@ gb ~~)
					STATUS_NOT_FOUND ok!

					if (heapcookie@)
						heapcookie@ MmFree
					end

					return
				end

				if (path@ gb '.' ==)
					STATUS_NOT_FOUND ok!

					if (heapcookie@)
						heapcookie@ MmFree
					end

					return
				end

				if (path@ gb '/' ==)
					STATUS_NOT_FOUND ok!

					if (heapcookie@)
						heapcookie@ MmFree
					end

					return
				end
			end elseif (path@ "//:/" 4 strncmp)
				if (flags@ OSFILEFLAG_MUSTBEFILE &)
					STATUS_NOT_FOUND ok!

					if (heapcookie@)
						heapcookie@ MmFree
					end

					return
				end

				4 path +=
				ObRootDirectoryObject@ object!
			end else
				IOBootDevice@ object!

				if (DEBUGCHECKS)
					if (object@ ~~)
						"ObObjectReferenceByPath: no boot device\n" KeCrash
					end
				end
			end
		end

		auto typeobj
		object@ ObObjectType typeobj!

		if (typeobj@ ObTypeDirectoryType@ ~=)
			object@ ObObjectReferenceByPointer drop

			// not a directory. call the parse method for this object and
			// return whatever it gives. if this is a device object, this is
			// interesting for the filesystem, since this is the source of all
			// file objects when performing an open operation.

			auto parsefunc
			0 parsefunc!

			if (typeobj@)
				typeobj@ ObiType_ParseFunction + @ parsefunc!
			end

			if (parsefunc@ ~~)
				ObRootDirectoryUnlock

				if (path@ gb)
					// there's more path left but no parse method

					object@ ObObjectDereferenceByPointer drop

					STATUS_NOT_A_DIRECTORY ok!
				end else
					// no more path left, return object as-is

					0 ok!
				end

				if (heapcookie@)
					heapcookie@ MmFree
				end

				return
			end

			// note that the root directory rwlock is still held shared here.
			// this is relied upon by certain clients of the object manager,
			// i.e. the IO system, for synchronization issues pertaining to
			// things such as mounting and unmounting volumes. If we ever
			// decide to unlock that rwlock here, we need to review those
			// places.

			auto reparsepath
			flags@ // flags
			path@ // path
			object@ // initialobject
			process@ // process
			parsefunc@ ObTypeParseFunction ok! initialobject! reparsepath!

			object@ ObObjectDereferenceByPointer drop

			ObRootDirectoryUnlock

			if (ok@)
				if (heapcookie@)
					heapcookie@ MmFree
				end

				return
			end

			initialobject@ object!

			if (reparsepath@)
				// start over

				if (heapcookie@)
					heapcookie@ MmFree
					0 heapcookie!
				end

				if (reparsecount@ REPARSEMAX >=)
					reparsepath@ MmFree

					STATUS_REPARSE_MAXIMUM ok!

					return
				end

				// the reparsepath will always be on the heap
				reparsepath@ heapcookie!
				reparsepath@ path!

				1 ObRootDirectoryLockShared ok!

				if (ok@)
					reparsepath@ MmFree

					return
				end

				1 reparsecount +=

				0 object!

				continue
			end

			if (heapcookie@)
				heapcookie@ MmFree
			end

			return
		end else
			while (path@ gb '/' ==)
				1 path +=
			end

			if (path@ gb ~~)
				// no more path, return directory object itself

				object@ ObObjectReferenceByPointer drop

				ObRootDirectoryUnlock

				if (heapcookie@)
					heapcookie@ MmFree
				end

				return
			end

			// more path, traverse

			// check traverse rights (on behalf of the CALLING process,
			// not the receiver of the handle)

			ACCESS_EXEC // access
			object@ // object
			KeProcessCurrent // process
			SeCheckAccessObjectUserX ok!

			if (ok@)
				// no rights

				ObRootDirectoryUnlock

				if (heapcookie@)
					heapcookie@ MmFree
				end

				return
			end

			auto len
			0 len!

			while (1)
				if (path@ gb '/' ==)
					break
				end

				if (path@ gb ~~)
					break
				end

				if (len@ OBNAMEMAX 1 - >=)
					ObRootDirectoryUnlock

					if (heapcookie@)
						heapcookie@ MmFree
					end

					STATUS_NAME_TOO_LONG ok!

					return
				end

				path@ gb pcomp@ len@ + sb

				1 len +=
				1 path +=
			end

			0 pcomp@ len@ + sb

			if (pcomp@ "." strcmp)
				continue
			end

			if (pcomp@ ".." strcmp)
				if (object@ ObObjectPagedHeader ObPagedHeader_DirectoryObject + @)
					object@ ObObjectPagedHeader ObPagedHeader_DirectoryObject + @ object!

					continue
				end else
					continue
				end
			end

			auto searchobj
			object@ ObiDirectory_ObjectListHead + @ searchobj!

			0 object!

			while (searchobj@)
				if (DEBUGCHECKS)
					if (searchobj@ ObObjectName ~~)
						"ObObjectReferenceByPath: object was in a directory but had no name\n" KeCrash
					end
				end

				if (searchobj@ ObObjectName pcomp@ strcmp)
					// found it !!!

					searchobj@ object!

					break
				end

				searchobj@ ObObjectPagedHeader ObPagedHeader_DirectoryListNext + @ searchobj!
			end

			if (object@ ~~)
				ObRootDirectoryUnlock

				if (heapcookie@)
					heapcookie@ MmFree
				end

				STATUS_NOT_FOUND ok!

				return
			end
		end
	end

	ObRootDirectoryUnlock

	if (heapcookie@)
		heapcookie@ MmFree
	end
end

fn ObObjectOpenByPathProcess { flags access initialobject path process -- handle ok }
	fnsection "PAGE$text"

	auto object

	flags@ // flags
	path@ // path
	initialobject@ // initialobject
	process@  // process
	ObObjectReferenceByPath ok! object!

	if (ok@)
		return
	end

	if (flags@ OSFILEFLAG_MUSTBEFILE &)
		if (object@ ObObjectType IOFileTypeObject@ ~=)
			object@ ObObjectDereferenceByPointer drop

			STATUS_INVALID_OBJECT_TYPE ok!

			return
		end
	end

	0 // nocheck
	access@ // access
	object@ // object
	process@ // process
	ObObjectOpenProcess ok! handle!

	if (ok@)
		object@ ObObjectDereferenceByPointer drop
	end
end

fn ObObjectOpenByPath { flags access initialobjecthandle path -- handle ok }
	fnsection "PAGE$text"

	auto initialobject

	if (initialobjecthandle@ OSNONE ==)
		0 initialobject!
	end else
		0 // type
		initialobjecthandle@ // handle
		ObObjectReferenceByHandle ok! initialobject! drop // just drop the access bits, ObObjectReferenceByPath will take care of that

		if (ok@)
			return
		end
	end

	flags@ // flags
	access@ // access
	initialobject@ // initialobject
	path@ // path
	KeProcessCurrent // process
	ObObjectOpenByPathProcess ok! handle!

	if (initialobject@)
		initialobject@ ObObjectDereferenceByPointer drop
	end
end

fn ObIsPathRelative { path -- isrelative }
	if (path@ gb '.' ==)
		1 isrelative!
		return
	end

	if (path@ gb ':' ==)
		0 isrelative!
		return
	end

	if (path@ gb '/' ==)
		0 isrelative!
		return
	end

	1 isrelative!
end