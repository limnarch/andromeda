//
// Implements handle duplication.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Object.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "ObInternal.h"

fn ObHandleDuplicateObject { handle access srcprocessobject destprocessobject -- newhandle ok }
	fnsection "PAGE$text"

	auto currentproc
	KeProcessCurrent currentproc!

	auto locked
	0 locked!

	if (currentproc@ srcprocessobject@ ~=)
		1 // needsthread
		srcprocessobject@ // processobject
		PsProcessCreateDeleteAcquireCheck ok!

		if (ok@)
			return
		end

		1 locked!
	end

	auto object
	auto oldaccess

	0 // type (any)
	handle@ // handle
	srcprocessobject@ // process
	ObObjectReferenceByHandleProcess ok! object! oldaccess!

	if (locked@)
		srcprocessobject@ PsProcessCreateDeleteUnlock
		0 locked!
	end

	if (ok@)
		return
	end

	if (oldaccess@ ACCESS_NOINHERIT &)
		object@ ObObjectDereferenceByPointer drop

		STATUS_PERMISSION_DENIED ok!

		return
	end

	if (access@ -1 ==)
		oldaccess@ access!
	end elseif (oldaccess@ access@ | oldaccess@ ~=)
		// not a subset

		object@ ObObjectDereferenceByPointer drop

		STATUS_PERMISSION_DENIED ok!

		return
	end

	// now lock the destination process.
	// we don't lock both of them in order to avoid deadlock issues due to
	// arbitrary lock ordering.

	if (currentproc@ destprocessobject@ ~=)
		1 // needsthread
		destprocessobject@ // processobject
		PsProcessCreateDeleteAcquireCheck ok!

		if (ok@)
			object@ ObObjectDereferenceByPointer drop

			return
		end

		1 locked!
	end

	1 // nocheck
	access@ // access
	object@ // object
	destprocessobject@ // process
	ObObjectOpenProcess ok! newhandle!

	if (locked@)
		destprocessobject@ PsProcessCreateDeleteUnlock
	end

	if (ok@)
		object@ ObObjectDereferenceByPointer drop

		return
	end
end

fn ObHandleDuplicate { handle access srcprocesshandle destprocesshandle -- newhandle ok }
	fnsection "PAGE$text"

	auto objaccess

	auto destprocessobject
	PsProcessObjectType@ // type
	destprocesshandle@ // handle
	ObObjectReferenceByHandle ok! destprocessobject! objaccess!

	if (ok@)
		return
	end

	objaccess@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		destprocessobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto srcprocessobject
	PsProcessObjectType@ // type
	srcprocesshandle@ // handle
	ObObjectReferenceByHandle ok! srcprocessobject! objaccess!

	if (ok@)
		destprocessobject@ ObObjectDereferenceByPointer drop

		return
	end

	objaccess@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		srcprocessobject@ ObObjectDereferenceByPointer drop
		destprocessobject@ ObObjectDereferenceByPointer drop

		return
	end

	handle@ // handle
	access@ // access
	srcprocessobject@ // srcprocessobject
	destprocessobject@ // destprocessobject
	ObHandleDuplicateObject ok! newhandle!

	srcprocessobject@ ObObjectDereferenceByPointer drop
	destprocessobject@ ObObjectDereferenceByPointer drop
end