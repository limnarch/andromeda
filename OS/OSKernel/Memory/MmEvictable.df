//
// Implements evictable page frame management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

var MmEvictablePageListHead 0
public MmEvictablePageListHead

var MmEvictablePageListTail 0
public MmEvictablePageListTail

var MmEvictablePageCount 0
public MmEvictablePageCount

var MmModifiedPageListHead 0
public MmModifiedPageListHead

var MmModifiedPageListTail 0
public MmModifiedPageListTail

var MmModifiedPageCount 0
public MmModifiedPageCount

var MmModifiedFilePageCount 0
public MmModifiedFilePageCount

var MmTotalWorkingSetSize 0
public MmTotalWorkingSetSize

var MmPeakWorkingSetSize 0
public MmPeakWorkingSetSize

extern IOCachePageEvictionFunction { pfdbe -- }
extern MmAnonymousEvictionFunction { pfdbe -- }

table MmEvictableFunctionsTable
	// file
	pointerof IOCachePageEvictionFunction

	// anon
	pointerof MmAnonymousEvictionFunction
endtable

fn MmEvictablePageGet { flags evictabletype priority -- pfdbe pfn ok }
	priority@ // priority
	MmPageGet ok! pfn! pfdbe!

	if (ok@)
		return
	end

	1 pfdbe@ MmPageFrameEntryEvictable_ReferencesI + si

	0 pfdbe@ MmPageFrameEntryEvictable_Next + !
	0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

	flags@ pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb
	evictabletype@ pfdbe@ MmPageFrameEntryEvictable_EvictionTypeB + sb

	if (flags@ MMEVICTFLAG_WORKINGSET &)
		auto rs
		HALCPUInterruptDisable rs!

		// allocation of evictable page implies addition to a working set.

		1 MmTotalWorkingSetSize +=

		if (MmTotalWorkingSetSize@ MmPeakWorkingSetSize@ >)
			MmTotalWorkingSetSize@ MmPeakWorkingSetSize!
		end

		rs@ HALCPUInterruptRestore
	end
end

fn MmEvictablePageDelete { pfdbe -- }
	auto rs
	HALCPUInterruptDisable rs!

	if (DEBUGCHECKS)
		if (pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi ~~)
			"MmEvictablePageDelete: page frame will leak\n" KeCrash
		end

		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_DELETED &)
			"MmEvictablePageDelete: page frame already deleted\n" KeCrash
		end
	end

	pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_DELETED |
	pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

	rs@ HALCPUInterruptRestore
end

fn MmEvictablePageInsert { pfdbe -- }
	// assumes IPLDPC or equivalent

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_WORKINGSET &)
		// insertion to evictable list implies removal from a working set.
		1 MmTotalWorkingSetSize -=
	end

	auto t

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED &)
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionTypeB + gb MMEVICTTYPE_FILE ==)
			1 MmModifiedFilePageCount +=
		end

		1 MmModifiedPageCount +=

		MmModifiedPageListTail@ t!

		if (t@ ~~)
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !
			0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

			pfdbe@ MmModifiedPageListHead!
			pfdbe@ MmModifiedPageListTail!
		end else
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !

			t@ pfdbe@ MmPageFrameEntryEvictable_Prev + !
			pfdbe@ t@ MmPageFrameEntryEvictable_Next + !
			pfdbe@ MmModifiedPageListTail!
		end
	end else
		1 MmEvictablePageCount +=

		MmEvictablePageListTail@ t!

		if (t@ ~~)
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !
			0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

			pfdbe@ MmEvictablePageListHead!
			pfdbe@ MmEvictablePageListTail!
		end else
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !

			t@ pfdbe@ MmPageFrameEntryEvictable_Prev + !
			pfdbe@ t@ MmPageFrameEntryEvictable_Next + !
			pfdbe@ MmEvictablePageListTail!
		end
	end
end

fn MmEvictablePageDereference { pfdbe -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"MmEvictablePageDereference: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - pfdbe@ MmPageFrameEntryEvictable_ReferencesI + si

	if (oldcount@ 1 ==)
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_DELETED &)
			if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_WORKINGSET &)
				1 MmTotalWorkingSetSize -=
			end

			rs@ HALCPUInterruptRestore

			// page frame was marked deleted, free it instead of putting it on
			// evictable list.

			pfdbe@ MmPageFreeByEntry

			return
		end

		// no refs now, add to back of evictable page LRU list

		pfdbe@ MmEvictablePageInsert
	end

	rs@ HALCPUInterruptRestore

	if (oldcount@ 1 ==)
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED &)
			if (MmModifiedPageCount@ MmModifiedPageMaximum@ >=)
				0 // priboost
				MmModifiedPageEvent // event
				KeEventSignal
			end
		end else
			0 // priboost
			MmEventPageAvailable // event
			KeEventSignal
		end
	end
end

fn MmEvictablePageRemove { pfdbe -- }
	// assumes IPLDPC or equivalent

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_WORKINGSET &)
		// removal from evictable list implies addition to a working set.
		1 MmTotalWorkingSetSize +=

		if (MmTotalWorkingSetSize@ MmPeakWorkingSetSize@ >)
			MmTotalWorkingSetSize@ MmPeakWorkingSetSize!
		end
	end

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED &)
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionTypeB + gb MMEVICTTYPE_FILE ==)
			1 MmModifiedFilePageCount -=
		end

		1 MmModifiedPageCount -=
	end else
		1 MmEvictablePageCount -=
	end

	auto ls
	pfdbe@ MmPageFrameEntryEvictable_Prev + @ ls!

	auto ns
	pfdbe@ MmPageFrameEntryEvictable_Next + @ ns!

	if (ls@)
		ns@ ls@ MmPageFrameEntryEvictable_Next + !
	end else
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED &)
			ns@ MmModifiedPageListHead!
		end else
			ns@ MmEvictablePageListHead!
		end
	end

	if (ns@)
		ls@ ns@ MmPageFrameEntryEvictable_Prev + !
	end else
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED &)
			ls@ MmModifiedPageListTail!
		end else
			ls@ MmEvictablePageListTail!
		end
	end

	0 pfdbe@ MmPageFrameEntryEvictable_Prev + !
	0 pfdbe@ MmPageFrameEntryEvictable_Next + !
end

fn MmEvictablePageReference { pfdbe -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi oldcount!

	oldcount@ 1 + pfdbe@ MmPageFrameEntryEvictable_ReferencesI + si

	if (oldcount@ 0 ==)
		// ref'd, remove from evictable page LRU list

		pfdbe@ MmEvictablePageRemove
	end

	rs@ HALCPUInterruptRestore
end

fn MmEvictablePageModify { pfdbe process -- }
	if (DEBUGCHECKS)
		if (pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi ~~)
			"MmEvictablePageModify: modified a page with no references\n" KeCrash
		end
	end

	auto rs

	if (process@)
		// charge the process for the modified page (used for fault throttling)

		HALCPUInterruptDisable rs!
		1 process@ PsProcess_ModifiedPages + +=
		rs@ HALCPUInterruptRestore
	end
	
	auto tx

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionTypeB + gb MMEVICTTYPE_FILE ==)
		// mark the page modified & valid, call into IO cache layer to add
		// cacheblock to dirty list.

		HALCPUInterruptDisable rs!

		pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb tx!

		tx@ MMEVICTFLAG_MODIFIED | MMEVICTFLAG_VALID |
		pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

		rs@ HALCPUInterruptRestore

		if (tx@ MMEVICTFLAG_MODIFIED & ~~)
			pfdbe@ IOCachePageModified
		end
	end elseif (pfdbe@ MmPageFrameEntryEvictable_EvictionTypeB + gb MMEVICTTYPE_ANON ==)
		// mark the page modified, set the saved swap PTE to DEMANDZERO, and
		// free the associated swapfile page (if any).

		HALCPUInterruptDisable rs!

		pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + @ tx!

		SWAPPTE_DEMANDZERO
		tx@ PTE_TLBHACK & |
#ifdef DEBUGCHECKS
		tx@ PTE_KERNELSTACK & |
#endif
		pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + !

		pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED |
		pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

		rs@ HALCPUInterruptRestore

		if (tx@ PTE_INSWAP & ~~)
			// nothing to do
			return
		end

		tx@ IOSwapPageFreePTE
	end elseif (DEBUGCHECKS)
		"MmEvictablePageModify: modified a page type that doesn't like to be modified\n" KeCrash
	end
end

fn MmEvictSinglePage { -- pfdbe ok }
	// assumes IPLDPC

	MmEvictablePageListHead@ pfdbe!

	if (pfdbe@ ~~)
		STATUS_NO_MEMORY ok!
		return
	end

	// call the appropriate eviction function for the page type.

	pfdbe@ // pfdbe
	[pfdbe@ MmPageFrameEntryEvictable_EvictionTypeB + gb]MmEvictableFunctionsTable@ MmEvictionFunction

	if (DEBUGCHECKS)
		if (pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi 0 ~=)
			pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi
			"MmEvictSingleFastPage: attempt to evict a page with %d references\n" KeCrash
		end
	end

	// remove the page from the evictable list.

	pfdbe@ MmEvictablePageRemove

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_WORKINGSET &)
		1 MmTotalWorkingSetSize -=
	end

	0 ok!
end

fn MmEvictablePageWait { process pri pfdbe -- ok }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"MmEvictablePageWait: ipl != IPLDPC\n" KeCrash
		end

		if (process@)
			if (KeThreadCurrent@ KeThread_IgnoreKill + @ ~~)
				"MmEvictablePageWait: kill not ignored\n" KeCrash
			end
		end
	end

	// wait for IO to complete on a cache page.

	// entered at IPLDPC

	0 ok!

	auto eventblock
	pfdbe@ MmPageFrameEntryWaitable_EventBlock + @ eventblock!

	if (eventblock@ ~~)
		// allocate an event block.
		// some odd but harmless interactions can happen here.

		IPLLOW KeIPLLower

		if (process@)
			process@ MmVADListUnlock
		end

		MmEvictablePageEvent_SIZEOF // bytes
		'IOCE' // tag
		pri@ // flags
		MmAllocWithTag ok! eventblock!

		if (process@)
			process@ MmVADListLock drop
		end

		IPLDPC KeIPLRaise drop

		if (ok@)
			return
		end

		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_IOINPROGRESS & ~~)
			// IO completed while doing that allocation, free our eventblock
			// and go home.

			eventblock@ MmFree
			return
		end

		if (pfdbe@ MmPageFrameEntryWaitable_EventBlock + @)
			// awkward, someone allocated one while we were trying to.
			// free ours and use theirs.

			eventblock@ MmFree
			pfdbe@ MmPageFrameEntryWaitable_EventBlock + @ eventblock!
		end else
			eventblock@ pfdbe@ MmPageFrameEntryWaitable_EventBlock + !

			0 // signaled
			OSEVENT_NOTIF // type
			"MmEvictablePageWaitEvent" // name
			eventblock@ MmEvictablePageEvent_Event + // event
			KeEventInitialize

			0 eventblock@ MmEvictablePageEvent_References + !
		end
	end

	1 eventblock@ MmEvictablePageEvent_References + +=

	IPLLOW KeIPLLower

	if (process@)
		process@ MmVADListUnlock
	end

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	eventblock@ MmEvictablePageEvent_Event + // object
	KeThreadWaitForObject drop

	if (process@)
		process@ MmVADListLock drop
	end

	IPLDPC KeIPLRaise drop

	1 eventblock@ MmEvictablePageEvent_References + -=

	if (eventblock@ MmEvictablePageEvent_References + @ ~~)
		eventblock@ MmFree
	end
end

fn MmEvictablePageSatisfy { pfdbe -- }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"MmEvictablePageSatisfy: ipl != IPLDPC \n" KeCrash
		end
	end

	pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_IOINPROGRESS ~ &
	pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

	auto eventblock
	pfdbe@ MmPageFrameEntryWaitable_EventBlock + @ eventblock!

	if (eventblock@)
		0 // priboost
		eventblock@ MmEvictablePageEvent_Event + // event
		KeEventSignal
	end
end

fn MmEvictablePageStartIO { pfdbe -- }
	pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_IOINPROGRESS |
	pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

	0 pfdbe@ MmPageFrameEntryWaitable_EventBlock + !
end