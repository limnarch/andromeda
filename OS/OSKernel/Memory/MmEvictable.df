//
// Implements evictable page frame management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

var MmEvictablePageListHead 0
public MmEvictablePageListHead

var MmEvictablePageListTail 0
public MmEvictablePageListTail

var MmEvictableFastPageListHead 0
public MmEvictableFastPageListHead

var MmEvictableFastPageListTail 0
public MmEvictableFastPageListTail

var MmEvictablePageCount 0
public MmEvictablePageCount

var MmEvictableFastPageCount 0
public MmEvictableFastPageCount

var MmEvictableSlowPageCount 0
public MmEvictableSlowPageCount

var MmTotalWorkingSetSize 0
public MmTotalWorkingSetSize

var MmPeakWorkingSetSize 0
public MmPeakWorkingSetSize

fn MmEvictablePageAlloc { flags evictablefuncs priority -- pfdbe pfn ok }
	priority@ // priority
	MmPageAlloc ok! pfn! pfdbe!

	if (ok@)
		return
	end

	1 pfdbe@ MmPageFrameEntryEvictable_References + !

	0 pfdbe@ MmPageFrameEntryEvictable_Next + !
	0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

	flags@ pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + !

	0 pfdbe@ MmPageFrameEntryEvictable_WorkingSetIndexHint + !

	evictablefuncs@ pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + !

	if (flags@ MMEVICTFLAG_WORKINGSET &)
		auto rs
		HALCPUInterruptDisable rs!

		// allocation of evictable page implies addition to a working set.

		1 MmTotalWorkingSetSize +=

		if (MmTotalWorkingSetSize@ MmPeakWorkingSetSize@ >)
			MmTotalWorkingSetSize@ MmPeakWorkingSetSize!
		end

		rs@ HALCPUInterruptRestore
	end
end

fn MmEvictablePageInsert { pfdbe -- }
	// assumes IPLDPC or equivalent

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_WORKINGSET &)
		// insertion to evictable list implies removal from a working set.
		1 MmTotalWorkingSetSize -=
	end

	1 MmEvictablePageCount +=

	auto t

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_FAST &)
		1 MmEvictableFastPageCount +=

		MmEvictableFastPageListTail@ t!

		if (t@ ~~)
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !
			0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

			pfdbe@ MmEvictableFastPageListHead!
			pfdbe@ MmEvictableFastPageListTail!
		end else
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !

			t@ pfdbe@ MmPageFrameEntryEvictable_Prev + !
			pfdbe@ t@ MmPageFrameEntryEvictable_Next + !
			pfdbe@ MmEvictableFastPageListTail!
		end
	end else
		1 MmEvictableSlowPageCount +=

		MmEvictablePageListTail@ t!

		if (t@ ~~)
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !
			0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

			pfdbe@ MmEvictablePageListHead!
			pfdbe@ MmEvictablePageListTail!
		end else
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !

			t@ pfdbe@ MmPageFrameEntryEvictable_Prev + !
			pfdbe@ t@ MmPageFrameEntryEvictable_Next + !
			pfdbe@ MmEvictablePageListTail!
		end
	end
end

fn MmEvictablePageDereference { pfdbe -- oldcount }
	auto evictionfuncs
	pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @ evictionfuncs!

	if (DEBUGCHECKS)
		if (evictionfuncs@ ~~)
			"MmEvictablePageDereference: no eviction funcs for page\n" KeCrash
		end
	end

	auto dereffunc
	evictionfuncs@ MmEvictableFunctions_DereferenceFunc + @ dereffunc!

	if (dereffunc@)
		pfdbe@ MmPageFrameEntryEvictable_References + @ // oldcount (not guaranteed to be accurate...)
		pfdbe@ // pfdbe
		dereffunc@ MmDereferenceFunction
	end

	auto rs
	HALCPUInterruptDisable rs!

	pfdbe@ MmPageFrameEntryEvictable_References + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"MmEvictablePageDereference: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - pfdbe@ MmPageFrameEntryEvictable_References + !

	if (oldcount@ 1 ==)
		// no refs now, add to back of evictable page LRU list

		pfdbe@ MmEvictablePageInsert
	end

	rs@ HALCPUInterruptRestore
end

fn MmEvictablePageRemoveForDeletion { pfdbe -- }
	// assumes IPLDPC or equivalent

	pfdbe@ MmEvictablePageRemove

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_WORKINGSET &)
		1 MmTotalWorkingSetSize -=
	end
end

fn MmEvictablePageRemove { pfdbe -- }
	// assumes IPLDPC or equivalent

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_WORKINGSET &)
		// removal from evictable list implies addition to a working set.
		1 MmTotalWorkingSetSize +=

		if (MmTotalWorkingSetSize@ MmPeakWorkingSetSize@ >)
			MmTotalWorkingSetSize@ MmPeakWorkingSetSize!
		end
	end

	1 MmEvictablePageCount -=

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_FAST &)
		1 MmEvictableFastPageCount -=
	end else
		1 MmEvictableSlowPageCount -=
	end

	auto ls
	pfdbe@ MmPageFrameEntryEvictable_Prev + @ ls!

	auto ns
	pfdbe@ MmPageFrameEntryEvictable_Next + @ ns!

	if (ls@)
		ns@ ls@ MmPageFrameEntryEvictable_Next + !
	end else
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_FAST &)
			ns@ MmEvictableFastPageListHead!
		end else
			ns@ MmEvictablePageListHead!
		end
	end

	if (ns@)
		ls@ ns@ MmPageFrameEntryEvictable_Prev + !
	end else
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_FAST &)
			ls@ MmEvictableFastPageListTail!
		end else
			ls@ MmEvictablePageListTail!
		end
	end

	0 pfdbe@ MmPageFrameEntryEvictable_Prev + !
	0 pfdbe@ MmPageFrameEntryEvictable_Next + !
end

fn MmEvictablePageReference { pfdbe -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	pfdbe@ MmPageFrameEntryEvictable_References + @ oldcount!

	oldcount@ 1 + pfdbe@ MmPageFrameEntryEvictable_References + !

	if (oldcount@ 0 ==)
		// ref'd, remove from evictable page LRU list

		pfdbe@ MmEvictablePageRemove
	end

	rs@ HALCPUInterruptRestore

	auto evictionfuncs
	pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @ evictionfuncs!

	if (DEBUGCHECKS)
		if (evictionfuncs@ ~~)
			"MmEvictablePageDereference: no eviction funcs for page\n" KeCrash
		end
	end

	auto reffunc
	evictionfuncs@ MmEvictableFunctions_ReferenceFunc + @ reffunc!

	if (reffunc@)
		oldcount@ // oldcount
		pfdbe@ // pfdbe
		reffunc@ MmReferenceFunction
	end
end

// some assumptions:
// fast pages will never drop below IPLDPC while evicting.
// slow pages will never have dropped below IPLDPC if eviction failed.

fn MmEvictFromList { trycount fast listhead -- succeedcount done ok }
	0 done!
	0 ok!
	0 succeedcount!

	auto i
	0 i!

	auto pfdbe
	listhead@@ pfdbe!

	auto ipl

	if (pfdbe@)
		IPLDPC KeIPLRaise ipl!

		auto count

		if (fast@)
			MmEvictableFastPageCount@ count!
		end else
			MmEvictableSlowPageCount@ count!
		end

		listhead@@ pfdbe!

		while (count@ trycount@ &&)
			// check each page if the low memory situation is resolved

			if (pfdbe@ ~~)
				break
			end

			if (MmPageFreeCount@ MmPageFreeCountSufficient@ >=)
				MmEventLowMemory // event
				KeEventReset drop

				ipl@ KeIPLLower

				1 done!

				return
			end

			// we will call an MmEvictionFunction defined by the PFDBE.
			// this function's primary job is to perform whatever actions
			// are necessary to evict the page frame, such as writing it
			// out to the swapfile.

			// another equally important job of the MmEvictionFunction is
			// to perform whatever synchronization is needed between any
			// other parts of the system that make use of this page frame,
			// and its eviction. if this synchronization is not possible
			// for any reason, the function returns 0 in the 'evicted'
			// return value. if the function had to drop below IPLDPC to
			// accomplish its work, it returns 1 in the 'dropped' return
			// value.

			auto evictionfuncs
			pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @ evictionfuncs!

			auto evictionfunc
			evictionfuncs@ MmEvictableFunctions_EvictionFunc + @ evictionfunc!

			if (DEBUGCHECKS)
				if (evictionfunc@ ~~)
					"MmEvictFromList: no eviction func for page\n" KeCrash
				end
			end

			auto evicted
			auto dropped

			pfdbe@ // pfdbe
			evictionfunc@ MmEvictionFunction drop evicted! dropped!

			auto npfdbe

			pfdbe@ MmPageFrameEntryEvictable_Next + @ npfdbe!

			if (evicted@)
				// evicted, free the page

				if (DEBUGCHECKS)
					if (pfdbe@ MmPageFrameEntryEvictable_References + @ 0 ~=)
						pfdbe@ MmPageFrameEntryEvictable_References + @
						"MmEvictFromList: attempt to evict a page with %d references\n" KeCrash
					end
				end

				1 succeedcount +=
				1 trycount -=

				pfdbe@ MmEvictablePageRemoveForDeletion

				pfdbe@ MmPageFrameEntryEvictable_PFN + @ // pfn
				MmPageFree
			end else
				// failed to evict, put on MRU end so that we don't try it
				// again for a while.

				if (npfdbe@)
					pfdbe@ MmEvictablePageRemove
					pfdbe@ MmEvictablePageInsert
				end
			end

			if (dropped@)
				if (DEBUGCHECKS)
					if (fast@)
						"MmEvictFromList: fast page eviction dropped below IPLDPC\n" KeCrash
					end
				end

				// dropped, anything could have happened to the LRU so reset these

				listhead@@ npfdbe!
			end

			npfdbe@ pfdbe!
			1 i +=
			1 count -=
		end

		ipl@ KeIPLLower
	end
end

fn MmEvictSinglePage { canbeslow -- pfdbe ok }
	auto evictionfunc
	auto evicted
	auto dropped
	auto ipl

	STATUS_NO_MEMORY ok!

	if (MmEvictableFastPageListHead@)
		IPLDPC KeIPLRaise ipl!

		MmEvictableFastPageListHead@ pfdbe!

		while (pfdbe@)
			pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @
			MmEvictableFunctions_EvictionFunc + @ evictionfunc!

			pfdbe@ // pfdbe
			evictionfunc@ MmEvictionFunction drop evicted! dropped!

			if (DEBUGCHECKS)
				if (dropped@)
					"MmEvictSinglePage: fast page eviction dropped below IPLDPC\n" KeCrash
				end
			end

			if (evicted@ ~~)
				pfdbe@ MmPageFrameEntryFree_Next + @ pfdbe!
				continue
			end

			// evicted, yoink

			if (DEBUGCHECKS)
				if (pfdbe@ MmPageFrameEntryEvictable_References + @ 0 ~=)
					pfdbe@ MmPageFrameEntryEvictable_References + @
					"MmEvictSinglePage: attempt to evict a page with %d references\n" KeCrash
				end
			end

			pfdbe@ MmEvictablePageRemoveForDeletion

			ipl@ KeIPLLower

			0 ok!

			return
		end

		ipl@ KeIPLLower
	end

	if (canbeslow@)
		if (MmSwappiness@ ~~)
			// swap can't be used, don't try slow list
			return
		end
	
		// can try the slow list

		auto trycap
		128 trycap!

		if (MmEvictablePageListHead@)
			IPLDPC KeIPLRaise ipl!

			MmEvictablePageListHead@ pfdbe!

			while (pfdbe@)
				if (trycap@ ~~)
					ipl@ KeIPLLower

					return
				end

				pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @
				MmEvictableFunctions_EvictionFunc + @ evictionfunc!

				pfdbe@ // pfdbe
				evictionfunc@ MmEvictionFunction drop evicted! dropped!

				if (evicted@ ~~)
					if (dropped@)
						1 trycap -=

						MmEvictablePageListHead@ pfdbe!
					end else
						pfdbe@ MmPageFrameEntryFree_Next + @ pfdbe!
					end

					continue
				end

				// evicted, yoink

				if (DEBUGCHECKS)
					if (pfdbe@ MmPageFrameEntryEvictable_References + @ 0 ~=)
						pfdbe@ MmPageFrameEntryEvictable_References + @
						"MmEvictSinglePage: attempt to evict a page with %d references 2\n" KeCrash
					end
				end

				pfdbe@ MmEvictablePageRemoveForDeletion

				ipl@ KeIPLLower

				0 ok!

				return
			end

			ipl@ KeIPLLower
		end
	end
end