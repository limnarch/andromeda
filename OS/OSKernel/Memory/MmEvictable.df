//
// Implements evictable page frame management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

var MmEvictablePageListHead 0
public MmEvictablePageListHead

var MmEvictablePageListTail 0
public MmEvictablePageListTail

var MmEvictablePageCount 0
public MmEvictablePageCount

var MmEvictableModifiedPageListHead 0
public MmEvictableModifiedPageListHead

var MmEvictableModifiedPageListTail 0
public MmEvictableModifiedPageListTail

var MmEvictableModifiedPageCount 0
public MmEvictableModifiedPageCount

var MmTotalWorkingSetSize 0
public MmTotalWorkingSetSize

var MmPeakWorkingSetSize 0
public MmPeakWorkingSetSize

fn MmEvictablePageAlloc { flags evictablefuncs priority -- pfdbe pfn ok }
	priority@ // priority
	MmPageAlloc ok! pfn! pfdbe!

	if (ok@)
		return
	end

	1 pfdbe@ MmPageFrameEntryEvictable_References + !

	0 pfdbe@ MmPageFrameEntryEvictable_Next + !
	0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

	flags@ pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + !

	0 pfdbe@ MmPageFrameEntryEvictable_WorkingSetIndexHint + !

	evictablefuncs@ pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + !

	if (flags@ MMEVICTFLAG_WORKINGSET &)
		auto rs
		HALCPUInterruptDisable rs!

		// allocation of evictable page implies addition to a working set.

		1 MmTotalWorkingSetSize +=

		if (MmTotalWorkingSetSize@ MmPeakWorkingSetSize@ >)
			MmTotalWorkingSetSize@ MmPeakWorkingSetSize!
		end

		rs@ HALCPUInterruptRestore
	end
end

fn MmEvictablePageInsert { pfdbe -- }
	// assumes IPLDPC or equivalent

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_WORKINGSET &)
		// insertion to evictable list implies removal from a working set.
		1 MmTotalWorkingSetSize -=
	end

	auto t

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_MODIFIED &)
		1 MmEvictableModifiedPageCount +=

		MmEvictableModifiedPageListTail@ t!

		if (t@ ~~)
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !
			0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

			pfdbe@ MmEvictableModifiedPageListHead!
			pfdbe@ MmEvictableModifiedPageListTail!
		end else
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !

			t@ pfdbe@ MmPageFrameEntryEvictable_Prev + !
			pfdbe@ t@ MmPageFrameEntryEvictable_Next + !
			pfdbe@ MmEvictableModifiedPageListTail!
		end
	end else
		1 MmEvictablePageCount +=

		MmEvictablePageListTail@ t!

		if (t@ ~~)
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !
			0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

			pfdbe@ MmEvictablePageListHead!
			pfdbe@ MmEvictablePageListTail!
		end else
			0 pfdbe@ MmPageFrameEntryEvictable_Next + !

			t@ pfdbe@ MmPageFrameEntryEvictable_Prev + !
			pfdbe@ t@ MmPageFrameEntryEvictable_Next + !
			pfdbe@ MmEvictablePageListTail!
		end
	end
end

fn MmEvictablePageDereference { pfdbe -- oldcount }
	auto evictionfuncs
	pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @ evictionfuncs!

	if (DEBUGCHECKS)
		if (evictionfuncs@ ~~)
			"MmEvictablePageDereference: no eviction funcs for page\n" KeCrash
		end
	end

	auto dereffunc
	evictionfuncs@ MmEvictableFunctions_DereferenceFunc + @ dereffunc!

	if (dereffunc@)
		pfdbe@ MmPageFrameEntryEvictable_References + @ // oldcount (not guaranteed to be accurate...)
		pfdbe@ // pfdbe
		dereffunc@ MmDereferenceFunction
	end

	auto rs
	HALCPUInterruptDisable rs!

	pfdbe@ MmPageFrameEntryEvictable_References + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"MmEvictablePageDereference: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - pfdbe@ MmPageFrameEntryEvictable_References + !

	if (oldcount@ 1 ==)
		// no refs now, add to back of evictable page LRU list

		pfdbe@ MmEvictablePageInsert
	end

	rs@ HALCPUInterruptRestore

	if (oldcount@ 1 ==)
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_MODIFIED &)
			if (MmEvictableModifiedPageCount@ MmModifiedPageMaximum@ >=)
				0 // priboost
				MmModifiedPageEvent // event
				KeEventSignal
			end
		end else
			0 // priboost
			MmEventPageAvailable // event
			KeEventSignal
		end
	end
end

fn MmEvictablePageRemoveForDeletion { pfdbe -- }
	// assumes IPLDPC or equivalent

	pfdbe@ MmEvictablePageRemove

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_WORKINGSET &)
		1 MmTotalWorkingSetSize -=
	end
end

fn MmEvictablePageRemove { pfdbe -- }
	// assumes IPLDPC or equivalent

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_WORKINGSET &)
		// removal from evictable list implies addition to a working set.
		1 MmTotalWorkingSetSize +=

		if (MmTotalWorkingSetSize@ MmPeakWorkingSetSize@ >)
			MmTotalWorkingSetSize@ MmPeakWorkingSetSize!
		end
	end

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_MODIFIED &)
		1 MmEvictableModifiedPageCount -=
	end else
		1 MmEvictablePageCount -=
	end

	auto ls
	pfdbe@ MmPageFrameEntryEvictable_Prev + @ ls!

	auto ns
	pfdbe@ MmPageFrameEntryEvictable_Next + @ ns!

	if (ls@)
		ns@ ls@ MmPageFrameEntryEvictable_Next + !
	end else
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_MODIFIED &)
			ns@ MmEvictableModifiedPageListHead!
		end else
			ns@ MmEvictablePageListHead!
		end
	end

	if (ns@)
		ls@ ns@ MmPageFrameEntryEvictable_Prev + !
	end else
		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_MODIFIED &)
			ls@ MmEvictableModifiedPageListTail!
		end else
			ls@ MmEvictablePageListTail!
		end
	end

	0 pfdbe@ MmPageFrameEntryEvictable_Prev + !
	0 pfdbe@ MmPageFrameEntryEvictable_Next + !
end

fn MmEvictablePageReference { pfdbe -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	pfdbe@ MmPageFrameEntryEvictable_References + @ oldcount!

	oldcount@ 1 + pfdbe@ MmPageFrameEntryEvictable_References + !

	if (oldcount@ 0 ==)
		// ref'd, remove from evictable page LRU list

		pfdbe@ MmEvictablePageRemove
	end

	rs@ HALCPUInterruptRestore

	auto evictionfuncs
	pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @ evictionfuncs!

	if (DEBUGCHECKS)
		if (evictionfuncs@ ~~)
			"MmEvictablePageDereference: no eviction funcs for page\n" KeCrash
		end
	end

	auto reffunc
	evictionfuncs@ MmEvictableFunctions_ReferenceFunc + @ reffunc!

	if (reffunc@)
		oldcount@ // oldcount
		pfdbe@ // pfdbe
		reffunc@ MmReferenceFunction
	end
end

fn MmEvictSinglePage { -- pfdbe ok }
	auto evictionfunc
	auto evicted

	STATUS_NO_MEMORY ok!

	if (MmEvictablePageListHead@)
		MmEvictablePageListHead@ pfdbe!

		while (pfdbe@)
			pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @
			MmEvictableFunctions_EvictionFunc + @ evictionfunc!

			pfdbe@ // pfdbe
			evictionfunc@ MmEvictionFunction drop evicted!

			if (evicted@ ~~)
				pfdbe@ MmPageFrameEntryFree_Next + @ pfdbe!
				continue
			end

			// evicted, yoink

			if (DEBUGCHECKS)
				if (pfdbe@ MmPageFrameEntryEvictable_References + @ 0 ~=)
					pfdbe@ MmPageFrameEntryEvictable_References + @
					"MmEvictSingleFastPage: attempt to evict a page with %d references\n" KeCrash
				end
			end

			pfdbe@ MmEvictablePageRemoveForDeletion

			0 ok!

			return
		end
	end
end