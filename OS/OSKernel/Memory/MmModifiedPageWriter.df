//
// Implements the modified page writer thread.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

fn MmModifiedPageWriter { context1 context2 -- }
	PRIORITY_LOWREALTIME 1 + // priority
	KeThreadCurrent@ // thread
	KeThreadPrioritySet

	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	IOSwapFileAwaitCreation

	// the swap thread. writes out modified anon pages and slaps them on the
	// evictable list. does this when it is asked to and also every 30
	// seconds.

	while (1)
		auto ok
		auto waitok

		KERNELMODE // waitmode
		0 // alertable
		30000 // timeout
		MmModifiedPageEvent // object
		KeThreadWaitForObject waitok!

		if (DEBUGCHECKS)
			if (waitok@ 0 s<)
				if (waitok@ STATUS_WAIT_TIMEOUT ~=)
					waitok@ "MmModifiedPageWriter: failed to wait on low memory event (%i)\n" KeCrash
				end
			end
		end

		auto modcount
		MmEvictableModifiedPageCount@ modcount!

		while (1)
			if (modcount@ ~~)
				if (waitok@ 0 ==)
					100 // interval
					KERNELMODE // waitmode
					0 // alertable
					KeThreadSleep drop
				end

				break
			end

			auto ipl
			IPLDPC KeIPLRaise ipl!

			auto pfdbe
			MmEvictableModifiedPageListHead@ pfdbe!

			if (pfdbe@)
				pfdbe@ MmEvictablePageReference drop

				if (DEBUGCHECKS)
					if (pfdbe@ MmPageFrameEntryAnonymous_SwapPageNumber + @ MMSWAPPAGE_NONE ~=)
						"MmModifiedPageWriter: swap page exists\n" KeCrash
					end
				end

				MMEVICTFLAG_MODIFIED ~ pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + &=
				MMWRITEMODE_INPROGRESS pfdbe@ MmPageFrameEntryAnonymous_WriteMode + !

				ipl@ KeIPLLower

				auto pno
				pfdbe@ MmPageFrameEntry_PFN + @ PAGESHIFT << IDENTITYSPACE | // pageframe
				IOSwapPageWrite ok! pno!

				IPLDPC KeIPLRaise ipl!

				if (ok@ ~~)
					// swapout worked

					if (modcount@)
						1 modcount -=
					end

					if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_MODIFIED & ~~)
						// still not modified
						pno@ pfdbe@ MmPageFrameEntryAnonymous_SwapPageNumber + !
					end else
						// was modified, free the swap page we just put hard work into
						// writing!
						pno@ IOSwapPageFree
						-1 pno!
					end
				end else
					-1 pno!
				end

				pfdbe@ MmEvictablePageDereference drop

				if (pfdbe@ MmPageFrameEntryAnonymous_WriteMode + @ MMWRITEMODE_DEFERREDFREE ==)
					// free the page frame

					pfdbe@ MmEvictablePageRemoveForDeletion
					1 MmAnonymousPageCount -=

					if (pno@ -1 ~=)
						pno@ IOSwapPageFree
					end

					pfdbe@ MmPageFrameEntry_PFN + @ MmPageFree
				end else
					0 pfdbe@ MmPageFrameEntryAnonymous_WriteMode + !
				end
			end else
				0 modcount!
			end

			ipl@ KeIPLLower
		end
	end
end