//
// Implements the modified page writer thread.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

fn MmModifiedPageWriter { context1 context2 -- }
	PRIORITY_LOWREALTIME 1 + // priority
	KeThreadCurrent@ // thread
	KeThreadPrioritySet

	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	IOSwapFileAwaitCreation

	// the swap thread. writes out modified anon pages and slaps them on the
	// evictable list. does this when it is asked to and also every 30
	// seconds.

	while (1)
		auto ok
		auto waitok

		KERNELMODE // waitmode
		0 // alertable
		30000 // timeout
		MmModifiedPageEvent // object
		KeThreadWaitForObject waitok!

		if (DEBUGCHECKS)
			if (waitok@ 0 s<)
				if (waitok@ STATUS_WAIT_TIMEOUT ~=)
					waitok@ "MmModifiedPageWriter: failed to wait on low memory event (%i)\n" KeCrash
				end
			end
		end

		auto writescore
		0 writescore!

		auto modcount
		MmEvictableModifiedPageCount@ modcount!

		while (1)
			if (modcount@ ~~)
				if (waitok@ 0 ==)
					100 // interval
					KERNELMODE // waitmode
					0 // alertable
					KeThreadSleep drop
				end

				break
			end

			auto thresh

			if (modcount@ 1 ==)
				1 thresh!
			end else
				modcount@ 1 >> thresh!
			end

			if (writescore@ thresh@ >=)
				// if we tried to unsuccessfully write modcount/2 times in a
				// row, odds are we're stuck in an infinite loop and we need
				// to let user threads run for a bit in order to successfully
				// write out any more pages. go to sleep for 50ms.

				0 writescore!

				50 // interval
				KERNELMODE // waitmode
				0 // alertable
				KeThreadSleep ok!

				if (DEBUGCHECKS)
					if (ok@ STATUS_WAIT_TIMEOUT ~=)
						ok@ "MmModifiedPageWriter: wait failed (%i)\n" KeCrash
					end
				end

				MmEvictableModifiedPageCount@ modcount!

				0 ok!
			end

			auto written
			auto dropped

			auto ipl
			IPLDPC KeIPLRaise ipl!

			auto pfdbe
			MmEvictableModifiedPageListHead@ pfdbe!

			if (pfdbe@)
				pfdbe@ MmEvictablePageReference drop

				auto evictionfuncs
				pfdbe@ MmPageFrameEntryEvictable_EvictableFunctions + @ evictionfuncs!

				pfdbe@ // pfdbe
				evictionfuncs@ MmEvictableFunctions_WriteModifiedFunc + @
				MmWriteModifiedFunction drop dropped! written!

				if (written@ ~~)
					1 writescore +=
				end else
					0 writescore!

					if (modcount@)
						1 modcount -=
					end
				end

				pfdbe@ MmEvictablePageDereference drop
			end else
				0 modcount!
			end

			ipl@ KeIPLLower
		end
	end
end