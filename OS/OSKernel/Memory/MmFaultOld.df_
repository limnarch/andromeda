#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALInterrupt.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn (HALPageFaultHandler) MmPageFault { writing badaddr trapframe -- handled }
	HALCPUInterruptEnable

	auto signal
	0 signal!

	if (badaddr@ PAGESIZE <)
		OSSIGNAL_SEGV signal!
	end else
		if (trapframe@ HALCPUIsUserTrapFrame)
			if (badaddr@ MMHIGHESTUSERADDRESS >)
				OSSIGNAL_SEGV signal!
			end
		end elseif (badaddr@ MMLOWESTSYSTEMADDRESS >=)
			// kernel mode fault on kernel mode address... bad
			-1 signal!
		end
	end

	if (signal@ ~~)
		auto ipl
		IPLAPC KeIPLRaise ipl!

		writing@ // writing
		badaddr@ // badaddr
		trapframe@ // trapframe
		MmSatisfyFault signal!

		ipl@ KeIPLLower
	end

	if (signal@ -1 ==)
		// system error happened
		0 handled!
	end elseif (signal@)
		// generate signal or return from safecopy
		1 handled!

		if (trapframe@ HALCPUIsUserTrapFrame)
			// user mode

			badaddr@ signal@ "MmPageFault: TODO: generate signal sig=%d vaddr=%x\n" KeCrash
		end else
			// kernel mode

			auto abort
			KeThreadCurrent@ KeThread_SafeAccessAbort + @ abort!

			if (abort@ ~~)
				// happened at an unexpected time!
				0 handled!
			end else
				// thought this might happen.
				abort@ trapframe@ HALCPUTrapFrameAbort
			end
		end
	end else
		// handled successfully
		1 handled!
	end

	HALCPUInterruptDisable drop
end

const FAULTACTIONNORMAL 1
const FAULTACTIONDIRTY  2
const FAULTACTIONCOW    3

fn MmSatisfyFault { writing badaddr trapframe -- signal }
	0 signal!

	auto process
	KeProcessCurrent process!

	if (MmEventLowMemory KeDispatchIsSignaled)
		if (process@ PsProcess_ThrottleFaultCount + @ 32 >=)
			// system is in a low memory state and this process has page-
			// -faulted 32 times, throttle this thread for the same number
			// of milliseconds multiplied by two (but capped at 300)

			process@ PsProcess_ThrottleFaultCount + @ 2 * 300 min // ms
			KERNELMODE // waitmode
			0 // alertable
			KeThreadSleep drop
		end
	end else
		0 process@ PsProcess_ThrottleFaultCount + !
	end

	auto ok
	process@ MmVADListLock ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "MmSatisfyFault: failed to lock VAD list (%i)\n" KeCrash
		end
	end

	auto pteaddr
	auto phyaddr
	auto flags
	auto pfdbe
	auto wsleptr
	auto wsli

	0 flags!
	0 phyaddr!

	badaddr@ // vaddr
	process@ KeProcess_PageDirectory + @ // pagemap
	MmVirtualtoPTEAddress ok! pteaddr!

	if (ok@ ~~)
		pteaddr@ // pteaddr
		MmPTEInterpret ok! flags! phyaddr!

		if (ok@ ~~)
			if (writing@ ~~)
				// not writing and PTE is valid, nothing to do
				process@ MmVADListUnlock
				return
			end elseif (flags@ PTE_W &)
				// am writing but PTE is writable, nothing to do
				process@ MmVADListUnlock
				return
			end
		end elseif (pteaddr@@ PTE_TRANSITION &)
			// soft-fault in COW page

			pteaddr@@ PAGENUMBERMASK & phyaddr!

			phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

			if (DEBUGCHECKS)
				if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + @ MMEVICTFLAG_COW & ~~)
					"MmSatisfyFault: transition PTE wasn't COW\n" KeCrash
				end
			end

			process@ // process
			MmWorkingSetLock ok!

			if (DEBUGCHECKS)
				if (ok@)
					ok@ "MmSatisfyFault: failed to lock working set list (%i)\n" KeCrash
				end
			end

			process@ // process
			MmWorkingSetEntryReserve ok! wsleptr! wsli!

			if (ok@)
				process@ MmWorkingSetUnlock
				process@ MmVADListUnlock
				STATUS_KILLED signal!
				return
			end

			pfdbe@ MmEvictablePageReference drop

			wsli@ pfdbe@ MmPageFrameEntryEvictable_WorkingSetIndexHint + !

			phyaddr@ // phyaddr
			PTE_V PTE_W | // flags
			badaddr@ // vaddr
			pteaddr@ // pteaddr
			process@ KeProcess_ASID + @ // asid
			MmPTEUpdate drop drop drop

			badaddr@ PAGENUMBERMASK & // vaddr
			0 // isfilepage
			wsleptr@ // wsleptr
			process@ // process
			MmWorkingSetEntryInsert

			process@ MmWorkingSetUnlock
			process@ MmVADListUnlock
			return
		end elseif (pteaddr@@ PTE_INSWAP &)
			// swap in COW page

			process@ // process
			MmWorkingSetLock ok!

			if (DEBUGCHECKS)
				if (ok@)
					ok@ "MmSatisfyFault: failed to lock working set list (%i)\n" KeCrash
				end
			end

			process@ // process
			MmWorkingSetEntryReserve ok! wsleptr! wsli!

			if (ok@)
				process@ MmWorkingSetUnlock
				process@ MmVADListUnlock
				STATUS_KILLED signal!
				return
			end

			process@ // sectionobject
			pteaddr@ // pte
			pteaddr@@ PAGESHIFT >> // pno
			MmAnonymousSwapIn ok! phyaddr! pfdbe!

			if (ok@)
				process@ MmWorkingSetUnlock
				process@ MmVADListUnlock
				STATUS_KILLED signal!
				return
			end

			MMEVICTFLAG_COW pfdbe@ MmPageFrameEntryEvictable_EvictionFlags + |=
			wsli@ pfdbe@ MmPageFrameEntryEvictable_WorkingSetIndexHint + !

			PAGESHIFT phyaddr <<=

			phyaddr@ // phyaddr
			PTE_V PTE_W | // flags
			badaddr@ // vaddr
			pteaddr@ // pteaddr
			process@ KeProcess_ASID + @ // asid
			MmPTEUpdate drop drop drop

			badaddr@ PAGENUMBERMASK & // vaddr
			0 // isfilepage
			wsleptr@ // wsleptr
			process@ // process
			MmWorkingSetEntryInsert

			process@ MmWorkingSetUnlock
			process@ MmVADListUnlock
			return
		end
	end

	auto vad
	badaddr@ // vaddr
	0 // length
	0 // mustbestart
	process@ // processobject
	MmVADFind ok! vad!

	if (ok@)
		process@ MmVADListUnlock
		OSSIGNAL_SEGV signal!
		return
	end

	auto faulttype
	FAULTACTIONNORMAL faulttype!

	if (writing@)
		// we are writing...
		if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITE & ~~)
			// but the VAD isn't writable...
			if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITECOPY & ~~)
				// nor is it COW. this is an access violation
				process@ MmVADListUnlock
				OSSIGNAL_SEGV signal!
				return
			end
			// but is COW.
			FAULTACTIONCOW faulttype!
		end else
			// and the VAD is writable...
			if (flags@ PTE_W & ~~)
				// but the PTE is readonly (or not yet mapped). we're dirtying something
				FAULTACTIONDIRTY faulttype!
			end // else -- can't happen, would have returned above
		end
	end

	auto section
	vad@ MmVAD_SectionObject + @ section!

	if (badaddr@ vad@ MmVAD_FurthestExtentMapped + @ >)
		badaddr@ PAGENUMBERMASK & vad@ MmVAD_FurthestExtentMapped + !
	end

	auto sectoff
	badaddr@ vad@ MmVAD_StartVA + @ - vad@ MmVAD_OffsetInSection + @ + sectoff!

	0 pfdbe!

	if (flags@ PTE_V & ~~)
		// pte was truly invalid and needs faulting in

		if (section@ MmSection_FileObject + @)
			vad@ // vad
			section@ // sectionobject
			sectoff@ // sectionoffset
			badaddr@ // vaddr
			process@ // processobject
			faulttype@ // faulttype
			MmSatisfyFileFault ok! phyaddr! pfdbe! pteaddr!
		end else
			vad@ // vad
			section@ // sectionobject
			sectoff@ // sectionoffset
			badaddr@ // vaddr
			process@ // processobject
			faulttype@ // faulttype
			MmSatisfyAnonFault ok! phyaddr! pfdbe! pteaddr!
		end

		if (ok@)
			process@ MmVADListUnlock
			OSSIGNAL_KILL signal!
			return
		end
	end elseif (section@ MmSection_NoCommit + @ ~~)
		// pte was valid but something else caused the fault like a dirty fault

		phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!
	end

	pfdbe@ // pfdbe
	faulttype@ // faulttype
	pteaddr@ // pteaddr
	phyaddr@ // phyaddr
	badaddr@ // vaddr
	section@ // section
	process@ // process
	MmFaultComplete ok!

	if (ok@)
		OSSIGNAL_KILL signal!
	end

	process@ MmVADListUnlock
end

fn MmFaultComplete { pfdbe faulttype pteaddr phyaddr vaddr section process -- ok }
	0 ok!

	if (faulttype@ FAULTACTIONDIRTY ==)
		// if there's no file object, this is really just an anon page getting
		// faulted in for the first time with a write, and we shouldn't count
		// that as a "dirty".

		if (section@ MmSection_FileObject + @)
			// pfdbe is zeroed out for things where this isn't applicable like
			// a mapped character device.

			if (pfdbe@)
				auto ipl
				IPLDPC KeIPLRaise ipl!

				pfdbe@ IOCachePageModifyFunction ok!

				if (DEBUGCHECKS)
					if (ok@)
						"MmFaultComplete: failed to modify page\n" KeCrash
					end
				end

				phyaddr@ // phyaddr
				PTE_V PTE_W | // flags
				vaddr@ // vaddr
				pteaddr@ // pteaddr
				process@ KeProcess_ASID + @ // asid
				MmPTEUpdate drop drop drop

				if (pfdbe@ IOPageFrameEntryCache_ModifiedPTE + @)
					pfdbe@ IOPageFrameEntryCache_ModifiedPTE + @ MmPTEUnmodify
				end

				pteaddr@ pfdbe@ IOPageFrameEntryCache_ModifiedPTE + !

				ipl@ KeIPLLower
			end
		end
	end elseif (faulttype@ FAULTACTIONCOW ==)
		auto cowpfdbe
		auto cowaddr

		process@ // sectionobject
		pteaddr@ // pte
		FREEFIRST // pri
		MmAnonymousPageAlloc ok! cowaddr! cowpfdbe!

		if (ok@)
			return
		end

		MMEVICTFLAG_COW cowpfdbe@ MmPageFrameEntryEvictable_EvictionFlags + |=

		PAGESHIFT cowaddr <<=

		cowaddr@ IDENTITYSPACE | // dest
		phyaddr@ IDENTITYSPACE | // src
		PAGESIZE // size
		memcpy

		cowaddr@ // phyaddr
		PTE_V PTE_W | // flags
		vaddr@ // vaddr
		pteaddr@ // pteaddr
		process@ KeProcess_ASID + @ // asid
		MmPTEUpdate drop drop drop

		if (DEBUGCHECKS)
			if (pfdbe@ ~~)
				"MmFaultComplete: no pfdbe\n" KeCrash
			end
		end

		// we COW'd over top of the old page frame and no longer have it
		// mapped, so dereference it
		pfdbe@ MmEvictablePageDereference drop
	end
end

fn MmSatisfyFileFault { vad sectionobject sectionoffset vaddr processobject faulttype -- pteaddr pfdbe phyaddr ok }
	auto fileobject
	sectionobject@ MmSection_FileObject + @ fileobject!

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	0 ok!

	auto flags

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
		// character device, like a framebuffer or something. will have its
		// own method of mapping.

		auto getpagefunc
		fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_GetPageAddress + @ getpagefunc!

		if (DEBUGCHECKS)
			if (getpagefunc@ ~~)
				"MmSatisfyFileFault: no GetPageAddress\n" KeCrash
			end
		end

		0 pfdbe!

		sectionoffset@ // offset
		fcb@ // fcb
		getpagefunc@ IODispatchGetPageAddressFunction ok! phyaddr!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "MmSatisfyFileFault: failed to get page address (%i)\n" KeCrash
			end
		end

		PTE_V flags!

		if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITE &)
			PTE_W flags |=
		end

		if (vad@ MmVAD_PageProtection + @ PAGEACCESS_NONCACHED &)
			PTE_NC flags |=
		end

		vaddr@ // vaddr
		processobject@ KeProcess_PageDirectory + @ // pagemap
		1 // canblock
		MmPTECreate ok! pteaddr!

		if (ok@)
			return
		end

		phyaddr@ // phyaddr
		flags@ // flags
		vaddr@ // vaddr
		pteaddr@ // pteaddr
		processobject@ KeProcess_ASID + @ // asid
		MmPTEUpdate drop drop drop

		1 processobject@ PsProcess_MappedPageFrames + +=
	end else
		// real file like a block device (or normal file). call into
		// page cache.

		0 // kflags
		0 // flags
		sectionoffset@ PAGENUMBERMASK & // offset
		fcb@ // fcb
		IOCachePageRead ok! pfdbe! drop

		if (ok@)
			return
		end

		pfdbe@ MmPageFrameEntry_PFN + @ PAGESHIFT << phyaddr!

		vaddr@ // vaddr
		processobject@ KeProcess_PageDirectory + @ // pagemap
		1 // canblock
		MmPTECreate ok! pteaddr!

		if (ok@)
			pfdbe@ MmEvictablePageDereference drop
			return
		end

		processobject@ // process
		MmWorkingSetLock ok!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "MmSatisfyFileFault: failed to lock working set list (%i)\n" KeCrash
			end
		end

		processobject@ // process
		MmWorkingSetEntryReserve ok! wsleptr! wsli!

		if (ok@)
			processobject@ MmWorkingSetUnlock

			pfdbe@ MmEvictablePageDereference drop
			
			pteaddr@ // pteaddr
			vaddr@ // vaddr
			processobject@ KeProcess_PageDirectory + @ // pagemap
			MmPTEDelete drop

			return
		end

		wsli@ pfdbe@ MmPageFrameEntryEvictable_WorkingSetIndexHint + !

		phyaddr@ // phyaddr
		PTE_V // flags
		vaddr@ // vaddr
		pteaddr@ // pteaddr
		processobject@ KeProcess_ASID + @ // asid
		MmPTEUpdate drop drop drop

		vaddr@ PAGENUMBERMASK & // vaddr
		1 // isfilepage
		wsleptr@ // wsleptr
		process@ // process
		MmWorkingSetEntryInsert

		1 processobject@ PsProcess_MappedPageFrames + +=
		1 processobject@ PsProcess_ThrottleFaultCount + +=

		processobject@ MmWorkingSetUnlock
	end
end

fn MmSatisfyAnonFault { vad sectionobject sectionoffset vaddr processobject faulttype -- pteaddr pfdbe phyaddr ok }
	sectionoffset@ // sectionoffset
	sectionobject@ // sectionobject
	MmSectionPageGet ok! pfdbe! phyaddr!

	if (ok@)
		return
	end

	auto flags
	PTE_V flags!

	if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITE &)
		PTE_W flags |=
	end

	vaddr@ // vaddr
	processobject@ KeProcess_PageDirectory + @ // pagemap
	1 // canblock
	MmPTECreate ok! pteaddr!

	if (ok@)
		pfdbe@ MmEvictablePageDereference drop
		return
	end

	processobject@ // process
	MmWorkingSetLock ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "MmSatisfyAnonFault: failed to lock working set list (%i)\n" KeCrash
		end
	end

	processobject@ // process
	MmWorkingSetEntryReserve ok! wsleptr! wsli!

	if (ok@)
		processobject@ MmWorkingSetUnlock

		pfdbe@ MmEvictablePageDereference drop
		
		pteaddr@ // pteaddr
		vaddr@ // vaddr
		processobject@ KeProcess_PageDirectory + @ // pagemap
		MmPTEDelete drop

		return
	end

	wsli@ pfdbe@ MmPageFrameEntryEvictable_WorkingSetIndexHint + !

	phyaddr@ // phyaddr
	flags@ // flags
	vaddr@ // vaddr
	pteaddr@ // pteaddr
	processobject@ KeProcess_ASID + @ // asid
	MmPTEUpdate drop drop drop

	vaddr@ PAGENUMBERMASK & // vaddr
	0 // isfilepage
	wsleptr@ // wsleptr
	process@ // process
	MmWorkingSetEntryInsert

	1 processobject@ PsProcess_MappedPageFrames + +=
	1 processobject@ PsProcess_ThrottleFaultCount + +=

	processobject@ MmWorkingSetUnlock
end