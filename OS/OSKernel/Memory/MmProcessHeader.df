//
// Implements the pageable process header.
// It stores things that only need to be resident while the process has
// runnable threads, such as the working set list and other information.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn MmProcessHeaderCreate { process -- phdr pfdbe ok }
	fnsection "PAGE$text"

	auto quotablock
	process@ PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ quotablock!

	PAGESIZE // charge
	quotablock@ // quotablock
	MmQuotaBlockChargeVM ok!

	if (ok@)
		return
	end

	1 // charge
	quotablock@ // quotablock
	MmQuotaBlockChargeWS ok!

	if (ok@)
		PAGESIZE // charge
		quotablock@ // quotablock
		MmQuotaBlockUnchargeVM

		return
	end

	process@ PsProcess_MmHeader + // pte
	FREEFIRST // priority
	MmAnonymousPageAlloc ok! phdr! pfdbe!

	if (ok@)
		PAGESIZE // charge
		quotablock@ // quotablock
		MmQuotaBlockUnchargeVM

		1 // charge
		quotablock@ // quotablock
		MmQuotaBlockUnchargeWS

		return
	end

	pfdbe@ // pfdbe
	0 // process
	MmEvictablePageModify

	phdr@ PAGESHIFT << IDENTITYSPACE | phdr!

	phdr@ process@ PsProcess_MmHeader + !
end

fn MmProcessHeaderDestroy { process -- }
	auto phdr
	process@ PsProcess_MmHeader + @ phdr!

	auto pfdbe
	phdr@ IDENTITYSPACEMASK & PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

	// MmAnonymousPageDelete wants to be entered at IPLDPC...

	auto ipl
	IPLDPC KeIPLRaise ipl!

	pfdbe@ MmEvictablePageDereference drop

	ipl@ // ipl
	pfdbe@ // pfdbe
	MmAnonymousPageDelete

	// ...but it leaves at the provided IPL

	auto quotablock
	process@ PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ quotablock!

	PAGESIZE // charge
	quotablock@ // quotablock
	MmQuotaBlockUnchargeVM

	1 // charge
	quotablock@ // quotablock
	MmQuotaBlockUnchargeWS
end

fn MmProcessHeaderReference { pri process -- ok }
	if (DEBUGCHECKS)
		if (KeThreadCurrent@ KeThread_IgnoreKill + @ ~~)
			"MmProcessHeaderReference: thread could be killed\n" KeCrash
		end
	end

	0 ok!

	auto pfdbe

	auto ipl
	IPLDPC KeIPLRaise ipl!

	pri@ CANBLOCK |
	MmPageWait ok! drop

	if (ok@)
		ipl@ KeIPLLower
		return
	end

	if (process@ PsProcess_MmHeader + @ PTE_INSWAP &)
		auto pt

		pri@ // priority
		process@ PsProcess_MmHeader + // pte
		process@ PsProcess_MmHeader + @ PAGESHIFT >> // pno
		MmAnonymousSwapIn ok! pt! pfdbe!

		if (ok@)
			return
		end

		pt@ PAGESHIFT << IDENTITYSPACE | process@ PsProcess_MmHeader + !
	end else
		process@ PsProcess_MmHeader + @ IDENTITYSPACEMASK & PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!
		
		pfdbe@ MmEvictablePageReference drop

		ipl@ KeIPLLower
	end

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED & ~~)
		pfdbe@ // pfdbe
		0 // process
		MmEvictablePageModify
	end
end

fn MmProcessHeaderDereference { process -- }
	process@ PsProcess_MmHeader + @ IDENTITYSPACEMASK & PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ +
	MmEvictablePageDereference drop
end