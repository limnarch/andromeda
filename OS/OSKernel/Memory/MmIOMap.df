//
// Implements dynamic mapping of physical MMIO ranges.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

#include "MmInternal.h"

// Maps IO regions into the same POOLSPACE used for page-aligned allocations.

fn MmIORegionMap { cached length phyaddr -- vaddr ok }
	fnsection "PAGE$text"

	auto pagesneeded
	length@ PAGEOFFSETMASK + PAGESHIFT >> pagesneeded!

	auto offset
	CANBLOCK // pri
	pagesneeded@ // pagesneeded
	MiPoolSpaceReserve ok! offset!

	if (ok@)
		return
	end

	auto flags
	PTE_V PTE_W | flags!

	if (cached@ MMIO_NOCACHE ==)
		PTE_NC flags |=
	end elseif (cached@ MMIO_WRITECOMBINE ==)
		PTE_WC flags |=
	end

	// map region

	POOLSPACE offset@ PAGESHIFT << + vaddr!

	auto kdir
	HALPlatformKernelPageDirectory@ kdir!

	auto i
	0 i!

	auto ptr
	vaddr@ ptr!

	while (i@ pagesneeded@ <)
		phyaddr@ // phyaddr
		flags@ // flags
		ptr@ // vaddr
		MiPTEUpdateByVirtual drop drop

		PAGESIZE phyaddr +=
		PAGESIZE ptr +=
		1 i +=
	end
end

fn MmIORegionUnmap { length vaddr -- }
	fnsection "PAGE$text"

	if (DEBUGCHECKS)
		if (vaddr@ POOLSPACE <)
			vaddr@ "MmIOUnmapRegion: vaddr<POOLSPACE (0x%08x)\n" KeCrash
		end
	end

	auto pages
	length@ PAGEOFFSETMASK + PAGESHIFT >> pages!

	// unmap region

	auto kdir
	HALPlatformKernelPageDirectory@ kdir!

	auto va
	vaddr@ va!

	auto i
	0 i!

	while (i@ pages@ <)
		0 // phyaddr
		0 // flags
		va@ // vaddr
		MiPTEUpdateByVirtual drop drop

		PAGESIZE va +=
		1 i +=
	end

	// release pool space

	auto offset
	vaddr@ POOLSPACE - PAGESHIFT >> offset!

	pages@ // pages
	offset@ // offset
	MiPoolSpaceRelease
end