//
// Implements the system page fault handler.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALInterrupt.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

var MmPageFaultCount 0
public MmPageFaultCount

const REFAULT -2
const ERROR   -1

fn MmPageFault { writing badaddr trapframe -- handled }
	if (KeIPLCurrentGet IPLDPC >=)
		0 handled!
		return
	end

	HALCPUInterruptEnable

	auto signal
	0 signal!

	auto process
	KeProcessCurrent process!

	auto kernelmapping
	0 kernelmapping!

	if (badaddr@ PAGESIZE <)
		OSSIGNAL_SEGV signal!
	end else
		if (trapframe@ HALCPUIsUserTrapFrame)
			if (badaddr@ MMHIGHESTUSERADDRESS >)
				OSSIGNAL_SEGV signal!
			end
		end elseif (badaddr@ MMLOWESTSYSTEMADDRESS >=)
			PsSystemProcess@ process!
			1 kernelmapping!
		end
	end

	if (signal@ ~~)
		// too complex to deal with being murdered here
		KeThreadCurrent@ KeThreadIgnoreKill drop
		process@ MmVADListLock drop

		REFAULT signal!

		while (signal@ REFAULT ==)
			kernelmapping@ // kernelmapping
			writing@ // writing
			badaddr@ // vaddr
			MmSatisfyFault signal!
		end

		process@ MmVADListUnlock
		KeThreadCurrent@ KeThreadAcceptKill drop
	end

	if (signal@ ERROR ==)
		// system error happened
		0 handled!
	end elseif (signal@)
		// generate signal or cause return from safecopy.
		1 handled!

		if (trapframe@ HALCPUIsUserTrapFrame)
			// user mode

			if (signal@ OSSIGNAL_KILL ==)
				OSSIGNAL_KILL // signal
				KeProcessCurrent // process
				KeProcessSignal drop
			end else
				signal@ // signal
				KeThreadCurrent@ // thread
				KeThreadSignal drop
			end
		end else
			// kernel mode

			auto abort
			KeThreadCurrent@ KeThread_SafeAccessAbort + @ abort!

			if (abort@ ~~)
				// happened at an unexpected time!
				0 handled!
			end else
				// thought this might happen.
				abort@ trapframe@ HALCPUTrapFrameAbort
			end
		end
	end else
		auto rs
		HALCPUInterruptDisable rs!
		1 MmPageFaultCount +=
		rs@ HALCPUInterruptRestore

		// handled successfully
		1 handled!
	end

	HALCPUInterruptDisable drop
end

fn MmThrottle { -- }
	auto process
	KeProcessCurrent process!

	if (IOSwapFileCount@ ~~)
		return
	end

	if (process@ PsProcess_ModifiedPages + @ 20 >)
		while (MmModifiedPageCount@ MmModifiedPageMaximum@ >=)
			// throttle the thread

			75 // ms
			KERNELMODE // waitmode
			0 // alertable
			KeThreadSleep drop
		end

		0 process@ PsProcess_ModifiedPages + !
	end
end

fn MmSatisfyFault { kernelmapping writing vaddr -- signal }
	0 signal!

	auto ok
	auto pteaddr
	auto phyaddr
	auto flags
	auto pfdbe
	auto wsleptr
	auto wsli
	auto ptpfdbe
	auto process
	auto rs

	if (kernelmapping@ ~~)
		KeProcessCurrent process!

		MmThrottle

		0 // pri
		vaddr@ // vaddr
		process@ // process
		MmPTEReference ok! pteaddr! ptpfdbe!

		if (ok@)
			if (ok@ -1 ==)
				// no page table
				0 ptpfdbe!
			end else
				// something else happened
				OSSIGNAL_KILL signal!
				return
			end
		end
	end else
		PsSystemProcess@ process!

		0 ptpfdbe!

		vaddr@ // vaddr
		process@ KeProcess_PageDirectory + @ // pagemap
		MmVirtualtoPTEAddress pteaddr!

		0 ok!
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (ok@ ~~)
		pteaddr@ // pteaddr
		MmPTEInterpret ok! flags! phyaddr!

		if (ok@ ~~)
			ipl@ KeIPLLower

			// valid

			if (flags@ PTE_W &)
				// no work to do

				if (ptpfdbe@)
					ptpfdbe@ process@ MmPTEDereference
				end

				return
			end elseif (writing@)
				pteaddr@ // pteaddr
				vaddr@ // vaddr
				process@ // process
				MmWriteFault signal!

				if (ptpfdbe@)
					ptpfdbe@ process@ MmPTEDereference
				end

				return
			end else
				// no work to do

				if (ptpfdbe@)
					ptpfdbe@ process@ MmPTEDereference
				end

				return
			end
		end else
			// hold PTE contents in flags temporarily
			pteaddr@@ flags!

			if (flags@ PTE_TRANSITION PTE_INSWAP | &)
				// private page. we need to do work here

				flags@ PAGENUMBERMASK & phyaddr!

				if (flags@ PTE_TRANSITION &)
					// reference it now so we can drop IPL

					auto waited

					if (kernelmapping@)
						CANBLOCK TRYFOREVER | MmPageWait ok! waited!
					end else
						CANBLOCK MmPageWait ok! waited!
					end

					if (ok@)
						ipl@ KeIPLLower
						if (ptpfdbe@)
							ptpfdbe@ process@ MmPTEDereference
						end
						OSSIGNAL_KILL signal!
						return
					end

					if (waited@)
						ipl@ KeIPLLower
						if (ptpfdbe@)
							ptpfdbe@ process@ MmPTEDereference
						end
						REFAULT signal!
						return
					end

					1 MmSoftPageFaultCount +=

					phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

					if (DEBUGCHECKS)
						if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_PRIVATE & ~~)
							flags@ vaddr@ "MmSatisfyFault: %x: transition PTE (%x) wasn't private\n" KeCrash
						end
					end

					pfdbe@ MmEvictablePageReference drop
				end

				ipl@ KeIPLLower

				process@ MmWorkingSetLock drop // will NEVER fail

				process@ // process
				MmWorkingSetEntryReserve ok! wsleptr! wsli!

				if (ok@)
					if (flags@ PTE_TRANSITION &)
						pfdbe@ MmEvictablePageDereference drop
					end

					process@ MmWorkingSetUnlock

					if (ptpfdbe@)
						ptpfdbe@ process@ MmPTEDereference
					end

					OSSIGNAL_KILL signal!

					return
				end

				if (flags@ PTE_INSWAP &)
					// swap it in. unlock and relock the working set to avoid
					// deadlock.

					process@ MmWorkingSetUnlock

					IPLDPC KeIPLRaise ipl!

					if (kernelmapping@)
						CANBLOCK TRYFOREVER | MmPageWait ok! drop
					end else
						CANBLOCK MmPageWait ok! drop
					end

					if (ok@)
						ipl@ KeIPLLower

						process@ MmWorkingSetLock drop

						wsli@ // wsli
						wsleptr@ // wsleptr
						process@ // process
						MmWorkingSetEntryFree

						process@ MmWorkingSetUnlock

						if (ptpfdbe@)
							ptpfdbe@ process@ MmPTEDereference
						end

						OSSIGNAL_KILL signal!

						return
					end

					0 // pri
					pteaddr@ // pte
					phyaddr@ PAGESHIFT >> // pno
					MmAnonymousSwapIn ok! phyaddr! pfdbe!

					process@ MmWorkingSetLock drop

					if (ok@)
						wsli@ // wsli
						wsleptr@ // wsleptr
						process@ // process
						MmWorkingSetEntryFree

						process@ MmWorkingSetUnlock

						if (ptpfdbe@)
							ptpfdbe@ process@ MmPTEDereference
						end

						OSSIGNAL_KILL signal!

						return
					end

					HALCPUInterruptDisable rs!
					1 MmHardPageFaultCount +=
					rs@ HALCPUInterruptRestore

					pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_PRIVATE |
					pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

					process@ pfdbe@ MmPageFrameEntryAnonymous_Process + !
					vaddr@ pfdbe@ MmPageFrameEntryAnonymous_VirtualAddress + !

					PAGESHIFT phyaddr <<=

					if (ptpfdbe@)
						ptpfdbe@ MmEvictablePageReference drop
					end
				end

				PTE_V flags!

				if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED &)
					PTE_W flags |=
				end

				phyaddr@ // phyaddr
				flags@ // flags
				vaddr@ // vaddr
				pteaddr@ // pteaddr
				process@ KeProcess_ASID + @ // asid
				MmPTEUpdate drop drop drop

				vaddr@ PAGENUMBERMASK & // vaddr
				wsleptr@ // wsleptr
				process@ // process
				MmWorkingSetEntryInsert

				process@ MmWorkingSetUnlock

				if (ptpfdbe@)
					ptpfdbe@ process@ MmPTEDereference
				end

				if (flags@ PTE_W & ~~)
					if (writing@)
						REFAULT signal!
					end
				end

				return
			end elseif (flags@ PTE_KERNEL_DEMANDZERO ==)
				1 MmSoftPageFaultCount +=

				ipl@ KeIPLLower

				if (DEBUGCHECKS)
					if (process@ PsSystemProcess@ ~=)
						"MmSatisfyFault: demandzero PTE in userspace\n" KeCrash
					end
				end

				// paged pool or whatnot. allocate and map a private page.

				pteaddr@ // pte
				FREEFIRST // pri
				MmAnonymousPageAlloc ok! phyaddr! pfdbe!

				if (DEBUGCHECKS)
					if (ok@)
						"MmSatisfyFault: failed to allocate private kernel page\n" KeCrash
					end
				end

				pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_PRIVATE |
				pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

				process@ pfdbe@ MmPageFrameEntryAnonymous_Process + !
				vaddr@ pfdbe@ MmPageFrameEntryAnonymous_VirtualAddress + !

				PTE_KERNEL_DEMANDZERO pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + !

				PAGESHIFT phyaddr <<=

				process@ MmWorkingSetLock drop

				process@ // process
				MmWorkingSetEntryReserve ok! wsleptr! wsli!

				if (DEBUGCHECKS)
					if (ok@)
						"MmSatisfyFault: couldn't reserve WSLE for private kernel page\n" KeCrash
					end
				end

				phyaddr@ // phyaddr
				PTE_V // flags
				vaddr@ // vaddr
				pteaddr@ // pteaddr
				process@ KeProcess_ASID + @ // asid
				MmPTEUpdate drop drop drop

				vaddr@ PAGENUMBERMASK & // vaddr
				wsleptr@ // wsleptr
				process@ // process
				MmWorkingSetEntryInsert

				process@ MmWorkingSetUnlock

				if (writing@)
					REFAULT signal!
				end

				return
			end elseif (flags@ MmPTEIsZero)
				ipl@ KeIPLLower
			end elseif (DEBUGCHECKS)
				flags@ "MmSatisfyFault: odd PTE %08x\n" KeCrash
			end
		end
	end else
		ipl@ KeIPLLower
	end

	if (kernelmapping@)
		if (vaddr@ POOLSPACE < vaddr@ POOLSPACE POOLSIZE + >= ||)
			ERROR signal!
			return
		end
	end

	vaddr@ // vaddr
	process@ // process
	MmNormalFault signal!

	if (ptpfdbe@)
		ptpfdbe@ process@ MmPTEDereference
	end

	if (signal@ ~~)
		if (writing@)
			REFAULT signal!
		end
	end
end

fn MmFaultParameters { vaddr process -- offset object vad ok }
	vaddr@ // vaddr
	0 // length
	0 // mustbestart
	process@ // processobject
	MmVADFind ok! vad!

	if (ok@)
		return
	end

	if (vaddr@ vad@ MmVAD_FurthestExtentMapped + @ >)
		vaddr@ PAGENUMBERMASK & vad@ MmVAD_FurthestExtentMapped + !
	end

	vad@ MmVAD_MappedObject + @ object!
	vaddr@ vad@ MmVAD_StartVA + @ - vad@ MmVAD_OffsetInSection + @ + offset!
end

fn MmNormalFault { vaddr process -- signal }
	0 signal!

	auto offset
	auto object
	auto vad
	auto ok
	auto flags
	auto phyaddr
	auto pfdbe
	auto pteaddr
	auto wsli
	auto wsleptr

	auto kernelmapping
	process@ PsSystemProcess@ == kernelmapping!

	vaddr@ // vaddr
	process@ // process
	MmFaultParameters ok! vad! object! offset!

	if (ok@)
		OSSIGNAL_SEGV signal!
		return
	end

	if (vad@ MmVAD_PageProtection + @ ~~)
		// guard region
		OSSIGNAL_SEGV signal!
		return
	end

	if (vad@ MmVAD_Flags + @ MMVADFLAG_FILE &)
		if (object@ IOFile_FileControlBlock + @ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
			vaddr@ // vaddr
			process@ // process
			object@ // fileobject
			offset@ // offset
			vad@ // vad
			MmSatisfyCharFault ok!

			if (ok@)
				OSSIGNAL_KILL signal!
			end

			return
		end
	end

	if (kernelmapping@ ~~)
		vaddr@ // vaddr
		process@ // process
		MmPTECreate ok! pteaddr!

		if (ok@)
			OSSIGNAL_KILL signal!
			return
		end
	end else
		vaddr@ // vaddr
		process@ KeProcess_PageDirectory + @ // pagemap
		MmVirtualtoPTEAddress pteaddr!
	end

	process@ MmWorkingSetLock drop // will NEVER fail

	process@ // process
	MmWorkingSetEntryReserve ok! wsleptr! wsli!

	process@ MmWorkingSetUnlock

	if (ok@)
		if (kernelmapping@ ~~)
			1 // deref
			pteaddr@ // pteaddr
			vaddr@ // vaddr
			process@ // process
			MmPTEDelete drop
		end

		OSSIGNAL_KILL signal!
		return
	end

	if (vad@ MmVAD_Flags + @ MMVADFLAG_FILE &)
		process@ // process
		object@ // fileobject
		offset@ // offset
		vad@ // vad
		MmSatisfyFileFault ok! phyaddr! pfdbe! flags!
	end else
		process@ // process
		vaddr@ // vaddr
		pteaddr@ // pteaddr
		object@ // section
		offset@ // offset
		vad@ // vad
		MmSatisfyAnonFault ok! phyaddr! pfdbe! flags!
	end

	process@ MmWorkingSetLock drop

	if (ok@)
		wsli@ // wsli
		wsleptr@ // wsleptr
		process@ // process
		MmWorkingSetEntryFree

		process@ MmWorkingSetUnlock

		if (kernelmapping@ ~~)
			1 // deref
			pteaddr@ // pteaddr
			vaddr@ // vaddr
			process@ // process
			MmPTEDelete drop
		end

		OSSIGNAL_KILL signal!
		return
	end

	phyaddr@ // phyaddr
	flags@ // flags
	vaddr@ // vaddr
	pteaddr@ // pteaddr
	process@ KeProcess_ASID + @ // asid
	MmPTEUpdate drop drop drop

	vaddr@ PAGENUMBERMASK & // vaddr
	wsleptr@ // wsleptr
	process@ // process
	MmWorkingSetEntryInsert

	process@ MmWorkingSetUnlock
end

fn MmSatisfyCharFault { vaddr process fileobject offset vad -- ok }
	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	auto getpagefunc
	fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_GetPageAddress + @ getpagefunc!

	if (DEBUGCHECKS)
		if (getpagefunc@ ~~)
			"MmSatisfyCharFault: no GetPageAddress\n" KeCrash
		end
	end

	auto phyaddr
	offset@ // offset
	fcb@ // fcb
	getpagefunc@ IODispatchGetPageAddressFunction ok! phyaddr!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "MmSatisfyCharFault: failed to get page address (%i)\n" KeCrash
		end
	end

	auto flags
	PTE_V flags!

	if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITE &)
		PTE_W flags |=
	end

	if (vad@ MmVAD_PageProtection + @ PAGEACCESS_NONCACHED &)
		PTE_NC flags |=
	end

	if (process@ PsSystemProcess@ ~=)
		auto pteaddr
		vaddr@ // vaddr
		process@ // process
		MmPTECreate ok! pteaddr!

		if (ok@)
			return
		end
	end else
		vaddr@ // vaddr
		process@ KeProcess_PageDirectory + @ // pagemap
		MmVirtualtoPTEAddress pteaddr!
	end

	phyaddr@ // phyaddr
	flags@ // flags
	vaddr@ // vaddr
	pteaddr@ // pteaddr
	process@ KeProcess_ASID + @ // asid
	MmPTEUpdate drop drop drop
end

fn MmSatisfyFileFault { process fileobject offset vad -- flags pfdbe phyaddr ok }
	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	auto kflags
	IOKFLAG_PAGEAC kflags!

	if (process@ PsSystemProcess@ ==)
		IOKFLAG_SWAPIN kflags |=
	end

	0 // flags
	kflags@ // kflags
	offset@ PAGENUMBERMASK & // offset
	fcb@ // fcb
	IOCachePageRead ok! pfdbe! phyaddr!

	if (ok@)
		return
	end

	IDENTITYSPACEMASK phyaddr &=

	PTE_V flags!
end

fn MmSatisfyAnonFault { process vaddr pteaddr section offset vad -- flags pfdbe phyaddr ok }
	auto pri
	0 pri!

	if (process@ PsSystemProcess@ ==)
		TRYFOREVER pri!
	end

	if (section@)
		pri@ // pri
		offset@ // sectionoffset
		section@ // sectionobject
		MmSectionPageGet ok! pfdbe! phyaddr!

		if (ok@)
			return
		end
	end else
		// private page

		pteaddr@ // pte
		ZEROMUST pri@ | // pri
		MmAnonymousPageAlloc ok! phyaddr! pfdbe!

		if (ok@)
			return
		end

		auto rs
		HALCPUInterruptDisable rs!
		1 MmSoftPageFaultCount +=
		rs@ HALCPUInterruptRestore

		pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_PRIVATE |
		pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

		process@ pfdbe@ MmPageFrameEntryAnonymous_Process + !
		vaddr@ pfdbe@ MmPageFrameEntryAnonymous_VirtualAddress + !

		if (process@ PsSystemProcess@ ==)
			PTE_TLBHACK pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + |=
		end

		PAGESHIFT phyaddr <<=
	end

	PTE_V flags!

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED &)
		if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITE &)
			PTE_W flags |=
		end
	end
end

fn MmWriteFault { pteaddr vaddr process -- signal }
	// COW or dirty fault. lets find out which one

	0 signal!

	auto phyaddr

	auto cowpfdbe
	auto cowaddr
	0 cowaddr!

	auto vad
	0 vad!

	auto pageprot
	0 pageprot!

	// first check if this is a private page in order to determine if we
	// need to look up the VAD or not. private PTEs are "sticky" so we can
	// determine this regardless of trimming, so we don't need to lock the
	// working set lock to check this. we want to do this first so we can
	// look up the VAD without locking the working set, which could cause
	// a deadlock since they're allocated in paged pool.

	auto ipl
	IPLDPC KeIPLRaise ipl!

	pteaddr@ // pteaddr
	MmPTEInterpret ok! drop phyaddr!

	if (ok@)
		// invalid
		ipl@ KeIPLLower
		REFAULT signal!
		return
	end

	phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_PRIVATE &)
		-1 vad!
		PAGEACCESS_READ PAGEACCESS_WRITE | pageprot!
	end

	ipl@ KeIPLLower

	if (vad@ ~~)
		vaddr@ // vaddr
		process@ // process
		MmFaultParameters ok! vad! section! drop

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "MmWriteFault: failed to look up VAD (%i)\n" KeCrash
			end

			if (vad@ MmVAD_PageProtection + @ ~~)
				"MmWriteFault: VAD was guard region\n" KeCrash
			end
		end

		vad@ MmVAD_PageProtection + @ pageprot!
	end

	while (1)
		process@ MmWorkingSetLock drop

		// re-check the PTE with the working set mutex held, since it may have
		// been trimmed since we decided it was valid. we know that it's the same
		// PTE if it's still valid, and hasn't been switched out with something
		// else, because the VAD list mutex is held during all such events.
		// the loss of this convenient assumption is one reason that it sounds
		// hard to allow multiple threads to take a page fault per process without
		// waiting for eachother.

		auto section
		auto ok
		auto pfdbe
		auto wsli
		auto wsleptr

		pteaddr@ // pteaddr
		MmPTEInterpret ok! drop phyaddr!

		if (ok@)
			// invalid
			REFAULT signal!
			break
		end

		phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

		if (pageprot@ PAGEACCESS_WRITECOPY &)
			// COW, allocate a page frame and copy the old page frame into it.

			if (cowaddr@ ~~)
				process@ MmWorkingSetUnlock

				pteaddr@ // pte
				FREEFIRST // pri
				MmAnonymousPageAlloc ok! cowaddr! cowpfdbe!

				if (ok@)
					OSSIGNAL_KILL signal!
					return
				end

				if (process@ PsSystemProcess@ ==)
					SWAPPTE_DEMANDZERO PTE_TLBHACK | pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + |=
				end

				cowpfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED |
				cowpfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

				// we unlocked the working set mutex so we have to recheck
				// everything...

				continue
			end

			1 vad@ MmVAD_COWCount + +=

			cowpfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_PRIVATE |
			cowpfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

			process@ cowpfdbe@ MmPageFrameEntryAnonymous_Process + !
			vaddr@ cowpfdbe@ MmPageFrameEntryAnonymous_VirtualAddress + !

			PAGESHIFT cowaddr <<=

			cowaddr@ IDENTITYSPACE | // dest
			phyaddr@ IDENTITYSPACE | // src
			PAGESIZE // size
			memcpy

			cowaddr@ // phyaddr
			PTE_V PTE_W | // flags
			vaddr@ // vaddr
			pteaddr@ // pteaddr
			process@ KeProcess_ASID + @ // asid
			MmPTEUpdate drop drop drop

			// we COW'd over top of the old page frame and no longer have it
			// mapped, so dereference it
			pfdbe@ MmEvictablePageDereference drop

			process@ MmWorkingSetUnlock

			return
		end elseif (pageprot@ PAGEACCESS_WRITE & ~~)
			// privilege violation
			OSSIGNAL_SEGV signal!
			break
		end else
			pfdbe@ // pfdbe
			process@ // process
			MmEvictablePageModify

			phyaddr@ // phyaddr
			PTE_V PTE_W | // flags
			vaddr@ // vaddr
			pteaddr@ // pteaddr
			process@ KeProcess_ASID + @ // asid
			MmPTEUpdate drop drop drop

			break
		end

		if (DEBUGCHECKS)
			"MmWriteFault: unreachable\n" KeCrash
		end
	end

	process@ MmWorkingSetUnlock

	if (cowaddr@)
		IPLDPC KeIPLRaise ipl!

		cowpfdbe@ MmEvictablePageDereference drop

		ipl@ // ipl
		cowpfdbe@ // pfdbe
		MmAnonymousPageDelete
	end
end