//
// Implements virtual memory mapping of section and file objects.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn MmFilePrepareForMap { prot endofview offset fileobject -- ok }
	fnsection "PAGE$text"

	0 ok!

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	if (endofview@ fcb@ IOFileControlBlock_SizeInBytes + @ >)
		STATUS_END_OF_FILE ok!

		return
	end

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
		if (prot@ PAGEACCESS_WRITECOPY &)
			// can't COW character devices, that's a weird thing to do.
			// also it breaks everything which is secretly the main reason

			STATUS_INVALID_ARGUMENT ok!

			return
		end

		// character devices need a GetPageAddress function to be mappable

		if (fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_GetPageAddress + @ ~~)
			STATUS_NOT_SUPPORTED ok!

			return
		end
	end elseif (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_DIRECTORY ==)
		STATUS_IS_A_DIRECTORY ok!

		return
	end else
		auto cacheblock
		fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

		if (cacheblock@ ~~)
			// initialize caching on mapped FCB

			fcb@ IOFileControlBlockCacheCheck ok! cacheblock!

			if (ok@)
				return
			end
		end

		fcb@ IOFileControlBlockLockShared ok!

		if (ok@)
			return
		end

		cacheblock@ // cacheblock
		IOCacheInfoBlockTryIncrementMap ok! drop

		if (ok@)
			fcb@ IOFileControlBlockUnlock

			return
		end

		if (endofview@ fcb@ IOFileControlBlock_SizeInBytes + @ >)
			// could have been truncated by now, check again

			cacheblock@ // cacheblock
			IOCacheInfoBlockDecrementMap drop

			fcb@ IOFileControlBlockUnlock

			STATUS_END_OF_FILE ok!

			return
		end

		fcb@ IOFileControlBlockUnlock
	end
end

fn MmFileUnprepareForMap { fileobject -- }
	fnsection "PAGE$text"

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ~=)
		auto cacheblock
		fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

		if (DEBUGCHECKS)
			if (cacheblock@ ~~)
				"MmFileUnprepareForMap: no cacheblock\n" KeCrash
			end
		end

		cacheblock@ IOCacheInfoBlockDecrementMap drop
	end
end

fn MmMapViewProcessObject { length startva sectionoffset mappedobject processobject pageprotection flags -- realva ok }
	fnsection "PAGE$text"

	auto kernelmapping
	processobject@ PsSystemProcess@ == kernelmapping!

	if (kernelmapping@)
		if (flags@ OSMAPFLAG_FIXEDADDRESS &)
			STATUS_INVALID_ARGUMENT ok!
			return
		end
	end

	if (sectionoffset@ PAGEOFFSETMASK &)
		// requested section offset isn't page-aligned
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	if (startva@ PAGEOFFSETMASK &)
		// requested startva isn't page-aligned
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	auto endofview
	length@ sectionoffset@ + endofview!

	if (endofview@ sectionoffset@ <)
		// length+sectionoffset overflows
		STATUS_OVERFLOW ok!

		return
	end

	if (length@ 0 ==)
		// length is given as 0 which makes this a no-op
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	length@ PAGEOFFSETMASK + PAGENUMBERMASK & length!

	if (length@ 0 ==)
		// length overflowed
		STATUS_OVERFLOW ok!

		return
	end

	if (startva@ length@ + startva@ <)
		// startva+length overflows
		STATUS_OVERFLOW ok!

		return
	end

	if (kernelmapping@ ~~)
		if (startva@ length@ + MMHIGHESTUSERADDRESS >)
			// requested region goes outside userspace

			if (flags@ OSMAPFLAG_FIXEDADDRESS &)
				STATUS_UNAVAILABLE_ADDRESS ok!

				return
			end

			0 startva!
		end
	end

	auto perm
	pageprotection@ PAGEACCESS_ALL & perm!

	if (mappedobject@ ObObjectType MmSectionObjectType@ ==)
		if (mappedobject@ MmSection_PageProtection + @ perm@ & perm@ ~=)
			// section doesn't have required permissions
			STATUS_PERMISSION_DENIED ok!

			return
		end

		if (endofview@ mappedobject@ MmSection_AnonSize + @ >)
			STATUS_INVALID_ARGUMENT ok!

			return
		end
	end

	auto locked
	0 locked!

	if (kernelmapping@)
		// this is a kernel mapping, so reserve POOLSPACE and use that as the
		// startva. it must be done like this because kernel page tables are
		// necessarily not dynamic.

		length@ PAGESHIFT >> MmPoolSpaceReserve ok! startva!

		if (ok@)
			return
		end

		startva@ PAGESHIFT << POOLSPACE + startva!
	end else
		processobject@ KeThreadCurrent@ KeThread_Process + @ ~= locked!

		if (locked@)
			0 // needsthread
			processobject@ // processobject
			PsProcessCreateDeleteAcquireCheck ok!

			if (ok@)
				return
			end
		end
	end

	if (mappedobject@ ObObjectType IOFileTypeObject@ ==)
		// if the section has a file object, initialize caching on its FCB and
		// reference the cacheblock so that it can't be truncated.

		pageprotection@ // prot
		endofview@ // endofview
		sectionoffset@ // offset
		mappedobject@ // fileobject
		MmFilePrepareForMap ok!

		if (ok@)
			if (locked@)
				processobject@ PsProcessCreateDeleteUnlock
			end

			if (kernelmapping@)
				length@ PAGESHIFT >> // pages
				startva@ POOLSPACE - PAGESHIFT >> // offset
				MmPoolSpaceRelease
			end

			return
		end
	end

	// from here on we need to call MmFileUnprepareForMap when we return with
	// an error...

	length@ // viewsize
	startva@ // startva
	flags@ OSMAPFLAG_FIXEDADDRESS & // fixedva
	pageprotection@ // pageprotection
	sectionoffset@ // sectionoffset
	mappedobject@ // mappedobject
	processobject@ // processobject
	MmVADFindAndMapFreeRegion ok! realva!

	if (ok@)
		if (mappedobject@ ObObjectType IOFileTypeObject@ ==)
			mappedobject@ // fileobject
			MmFileUnprepareForMap
		end

		if (locked@)
			processobject@ PsProcessCreateDeleteUnlock
		end

		if (kernelmapping@)
			length@ PAGESHIFT >> // pages
			startva@ POOLSPACE - PAGESHIFT >> // offset
			MmPoolSpaceRelease
		end

		return
	end

	if (locked@)
		processobject@ PsProcessCreateDeleteUnlock
	end
end

fn MmMapView { length startva sectionoffset mappedhandle processhandle pageprotection flags -- realva ok }
	fnsection "PAGE$text"

	auto access
	auto mappedobject

	if (pageprotection@ PAGEACCESS_ALL & ~~)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	0 // type
	mappedhandle@ // handle
	ObObjectReferenceByHandle ok! mappedobject! access!

	if (ok@)
		return
	end

	if (mappedobject@ ObObjectType IOFileTypeObject@ ~=)
		if (mappedobject@ ObObjectType MmSectionObjectType@ ~=)
			STATUS_INVALID_OBJECT_TYPE ok!

			mappedobject@ ObObjectDereferenceByPointer drop

			return
		end
	end

	// XXX assumes access bits and page protection bits lines up.
	// but they do now and always should.
	access@ pageprotection@ PAGEACCESS_ALL & SeCheckAccess ok!

	if (ok@)
		mappedobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto processobject
	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		mappedobject@ ObObjectDereferenceByPointer drop

		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop
		mappedobject@ ObObjectDereferenceByPointer drop

		return
	end

	length@ // length
	startva@ // startva
	sectionoffset@ // sectionoffset
	mappedobject@ // mappedobject
	processobject@ // processobject
	pageprotection@ // pageprotection
	flags@ // flags
	MmMapViewProcessObject ok! realva!

	processobject@ ObObjectDereferenceByPointer drop
	mappedobject@ ObObjectDereferenceByPointer drop
end

fn MmUnmapViewProcess { length vaddr processobject -- ok }
	fnsection "PAGE$text"

	auto kernelmapping
	processobject@ PsSystemProcess@ == kernelmapping!

	length@ PAGEOFFSETMASK + PAGENUMBERMASK & length!

	if (length@ 0 ==)
		// length overflowed
		STATUS_OVERFLOW ok!

		return
	end

	if (vaddr@ length@ + vaddr@ <)
		// vaddr+length overflows
		STATUS_OVERFLOW ok!

		return
	end

	if (kernelmapping@ ~~)
		if (vaddr@ length@ + MMHIGHESTUSERADDRESS >)
			// requested region goes outside userspace

			STATUS_FORBIDDEN_OPERATION ok!

			return
		end
	end

	KeThreadCurrent@ KeThreadIgnoreKill drop

	processobject@ MmVADListLock ok!

	if (DEBUGCHECKS)
		if (ok@)
			"MmUnmapViewProcess: failed to lock\n" KeCrash
		end
	end

	auto vad

	vaddr@ // vaddr
	length@ // length
	1 // mustbestart
	processobject@
	MmVADFind ok! vad!

	if (ok@)
		processobject@ MmVADListUnlock

		KeThreadCurrent@ KeThreadAcceptKill drop

		return
	end

	vad@ // vad
	processobject@ // processobject
	MmVADUnmap

	processobject@ MmVADListUnlock

	KeThreadCurrent@ KeThreadAcceptKill drop

	if (kernelmapping@)
		// release POOLSPACE

		if (DEBUGCHECKS)
			if (vaddr@ POOLSPACE <)
				vaddr@ "MmUnmapViewProcess: kernel mapping wasn't in POOLSPACE (vaddr=%x)\n" KeCrash
			end

			if (vaddr@ length@ + POOLSPACE POOLSIZE + >=)
				vaddr@ "MmUnmapViewProcess: kernel mapping wasn't in POOLSPACE (vaddr=%x)\n" KeCrash
			end
		end

		length@ PAGESHIFT >> // pages
		vaddr@ POOLSPACE - PAGESHIFT >> // offset
		MmPoolSpaceRelease
	end
end

fn MmUnmapView { length vaddr processhandle -- ok }
	fnsection "PAGE$text"

	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	length@ // length
	vaddr@ // vaddr
	processobject@ // processobject
	MmUnmapViewProcess ok!

	processobject@ ObObjectDereferenceByPointer drop
end

fn MmRemapViewProcess { pageprotection length vaddr processobject -- ok }
	fnsection "PAGE$text"

	length@ PAGEOFFSETMASK + PAGENUMBERMASK & length!

	if (length@ 0 ==)
		// length overflowed
		STATUS_OVERFLOW ok!

		return
	end

	if (vaddr@ length@ + vaddr@ <)
		// vaddr+length overflows
		STATUS_OVERFLOW ok!

		return
	end

	if (vaddr@ length@ + MMHIGHESTUSERADDRESS >)
		// requested region goes outside userspace
		STATUS_FORBIDDEN_OPERATION ok!

		return
	end

	if (pageprotection@ PAGEACCESS_ALL & ~~)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	processobject@ MmVADListLock ok!

	if (ok@)
		return
	end

	auto vad
	vaddr@ // vaddr
	length@ // length
	1 // mustbestart
	processobject@
	MmVADFind ok! vad!

	if (ok@)
		processobject@ MmVADListUnlock

		return
	end

	auto startva
	vad@ MmVAD_StartVA + @ startva!

	auto endva
	vad@ MmVAD_EndVA + @ endva!

	if (vad@ MmVAD_Flags + @ MMVADFLAG_NOCOMMIT &)
		// we'd need to traverse the page tables to update the PTEs; not
		// implemented for now.

		processobject@ MmVADListUnlock
		STATUS_NOT_IMPLEMENTED ok!
		return
	end

	auto oldprot
	vad@ MmVAD_PageProtection + @ oldprot!

	if (oldprot@ pageprotection@ & pageprotection@ ~=)
		processobject@ MmVADListUnlock

		// not a subset
		STATUS_PERMISSION_DENIED ok!

		return
	end

	if (oldprot@ PAGEACCESS_WRITECOPY &)
		if (pageprotection@ PAGEACCESS_WRITECOPY & ~~)
			// no longer mapped COW, uncharge all VM quota except for what was
			// actually COW'd.

			vad@ MmVAD_ChargeVMQuota + @ vad@ MmVAD_COWCount + @ PAGESHIFT << - // charge
			vad@ MmVAD_QuotaBlock + @ // quotablock
			MmQuotaBlockUnchargeVM

			vad@ MmVAD_COWCount + @ PAGESHIFT << vad@ MmVAD_ChargeVMQuota + !
		end
	end

	auto flags
	PTE_V flags!

#ifndef DIRTY_BIT_CAUSES_FAULT
	if (pageprotection@ PAGEACCESS_WRITE &)
		PTE_W flags |=
	end
#endif

	pageprotection@ vad@ MmVAD_PageProtection + !

	KeThreadCurrent@ KeThreadIgnoreKill drop
	processobject@ MmWorkingSetLock drop

	if (processobject@ KeProcess_MemoryState + @ PROCESSSTATE_OUTSWAPPED ~=)
		flags@ // flags
		startva@ // startva
		endva@ // endva
		processobject@ // process
		MmWorkingSetRemap
	end

	processobject@ MmWorkingSetUnlock
	KeThreadCurrent@ KeThreadAcceptKill drop

	processobject@ MmVADListUnlock
end

fn MmRemapView { pageprotection length vaddr processhandle -- ok }
	fnsection "PAGE$text"

	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	pageprotection@ // pageprotection
	length@ // length
	vaddr@ // vaddr
	processobject@ // processobject
	MmRemapViewProcess ok!

	processobject@ ObObjectDereferenceByPointer drop
end

fn MmFlushViewProcess { length vaddr processobject -- ok }
	fnsection "PAGE$text"

	length@ PAGEOFFSETMASK + PAGENUMBERMASK & length!

	if (length@ 0 ==)
		// length overflowed
		STATUS_OVERFLOW ok!

		return
	end

	if (vaddr@ length@ + vaddr@ <)
		// vaddr+length overflows
		STATUS_OVERFLOW ok!

		return
	end

	if (processobject@ PsSystemProcess@ ~=)
		if (vaddr@ length@ + MMHIGHESTUSERADDRESS >)
			// requested region goes outside userspace
			STATUS_FORBIDDEN_OPERATION ok!

			return
		end
	end

	processobject@ MmVADListLock ok!

	if (ok@)
		return
	end

	auto flags
	PTE_V flags!

#ifndef DIRTY_BIT_CAUSES_FAULT
	auto vad
	vaddr@ // vaddr
	length@ // length
	1 // mustbestart
	processobject@
	MmVADFind ok! vad!

	if (ok@)
		processobject@ MmVADListUnlock

		return
	end

	if (vad@ MmVAD_PageProtection + @ PAGEACCESS_WRITE &)
		PTE_W flags |=
	end
#endif

	KeThreadCurrent@ KeThreadIgnoreKill drop
	processobject@ MmWorkingSetLock drop

	if (processobject@ KeProcess_MemoryState + @ PROCESSSTATE_OUTSWAPPED ~=)
		flags@ // flags
		vaddr@ // startva
		vaddr@ length@ + // endva
		processobject@ // process
		MmWorkingSetRemap
	end

	processobject@ MmWorkingSetUnlock
	KeThreadCurrent@ KeThreadAcceptKill drop

	processobject@ MmVADListUnlock
end

fn MmFlushView { length vaddr processhandle -- ok }
	fnsection "PAGE$text"

	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	length@ // length
	vaddr@ // vaddr
	processobject@ // processobject
	MmFlushViewProcess ok!

	processobject@ ObObjectDereferenceByPointer drop
end