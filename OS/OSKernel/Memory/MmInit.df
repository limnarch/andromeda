#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALResource.h"

#include "../../Loader/LoaderGlobal.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

externptr HALLoaderPFDB
externptr HALLoaderInitialBitmap
externptr HALLoaderInitialBitmapSize
externptr HALLoaderTotalRAM
externptr HALLoaderHeap
externptr HALLoaderHeapSize

externptr HALResourceKeepHeaders
externptr HALLoaderInfo

externptr HALPageFaultFunction

var MmPageFrameDatabase 0
public MmPageFrameDatabase

var MmPageFreeListHead 0
public MmPageFreeListHead

var MmPageZeroListHead 0
public MmPageZeroListHead

var MmPageTotal 0
public MmPageTotal

var MmPageTotalTotal 0
public MmPageTotalTotal

var MmPageFreeCount 0
public MmPageFreeCount

var MmInited 0
public MmInited

buffer MmQuotaSystem MmQuotaBlock_SIZEOF
public MmQuotaSystem

buffer MmEventLowMemory KeEvent_SIZEOF
public MmEventLowMemory

var MmPageFreeCountLow 0
public MmPageFreeCountLow

var MmPageFreeCountSufficient 0
public MmPageFreeCountSufficient

var MmCommitLimit 0
public MmCommitLimit

var MmCommitUsage 0
public MmCommitUsage

buffer MmEventPageAvailable KeEvent_SIZEOF
public MmEventPageAvailable

// initializes physical memory allocation

fn MmInitPhase0 { -- }
	auto ptr

	HALLoaderPFDB@ dup MmPageFrameDatabase! ptr!

	auto i
	0 i!

	auto pages
	HALLoaderTotalRAM@ PAGESHIFT >> pages!

	pages@ MmPageTotalTotal!

	auto bmp
	HALLoaderInitialBitmap@ bmp!

	auto sz
	HALLoaderInitialBitmapSize@ 32 * sz!

	auto word

	auto last
	0 last!

	// initialize the page DB by linking all of the entries into the
	// free list, except those marked allocated in the loader bitmap.

	while (i@ pages@ <)
		if (i@ sz@ <)
			if (i@ 31 & ~~)
				bmp@@ word!
				4 bmp +=
			end

			if (word@ i@ 31 & bitget ~~)
				1 MmPageFreeCount +=

				if (last@)
					ptr@ last@ MmPageFrameEntryFree_Next + !
				end else
					ptr@ MmPageFreeListHead!
				end

				ptr@ last!
			end
		end else
			1 MmPageFreeCount +=

			if (last@)
				ptr@ last@ MmPageFrameEntryFree_Next + !
			end else
				ptr@ MmPageFreeListHead!
			end

			ptr@ last!
		end

		i@ ptr@ MmPageFrameEntry_PFN + !

		MmPageFrameEntry_SIZEOF ptr +=
		1 i +=
	end

	MmPageFreeCount@ MmPageTotal!

	1 MmInited!

	"Pre-boot memory statistics:\n" "MmInitPhase0" HALLog

	MmUsageDump

	auto idleproc
	KeProcessCurrent idleproc!

	// the modified page quota is set to 200 instead of infinite because
	// unlike other quotas it does not fail when the maximum is reached,
	// instead serving as a throttling point to stop memory from being
	// filled with modified pages.

	200 // modmax
	MMQUOTAINFINITE // wsmax
	MMQUOTAINFINITE // vmmax
	MMQUOTAINFINITE // heapmax
	MmQuotaSystem // quota
	MmQuotaBlockInitialize word!

	if (word@)
		"MmInitPhase0: couldn't initialize system quota block\n" KeCrash
	end

	// bias the reference by one to make sure the system never attempts to
	// free this
	MmQuotaSystem MmQuotaBlockReference

	MmQuotaSystem idleproc@ PsProcess_QuotaBlock + !

	0 // signaled
	OSEVENT_NOTIF // type
	"MmEventLowMemory" // name
	MmEventLowMemory // event
	KeEventInitialize

	0 // signaled
	OSEVENT_SYNCH // type
	"MmEventPageAvailable" // name
	MmEventPageAvailable // event
	KeEventInitialize

	0 // signaled
	OSEVENT_SYNCH // type
	"IOModifiedPageEvent" // name
	IOModifiedPageEvent // event
	KeEventInitialize

	MmPoolInit
end

var MmSectionObjectType 0
public MmSectionObjectType

fn MmInitPhase1 { -- }
	auto typeinit
	ObTypeInitializer_SIZEOF alloc typeinit!

	// initialize ObTypeInitializer fields

	typeinit@ ObTypeInitializerInitialize

	// create Section type

	auto type

	"Section" typeinit@ ObTypeInitializer_Name + !
	'Sect' typeinit@ ObTypeInitializer_Tag + !
	0 typeinit@ ObTypeInitializer_BodySize + !
	pointerof MmSectionObjectDelete typeinit@ ObTypeInitializer_DeleteFunction + !
	typeinit@ ObTypeCreate ok! type!

	if (ok@)
		ok@ "MmInitPhase1: couldn't create Section type (%i)\n" KeCrash
	end

	type@ MmSectionObjectType!

	// initialize eviction/swap

	MmPageFreeCount@ 12 / 300 min IOCachePagesLowWatermark!

	if (MmPageFreeCount@ MMMUSTSUCCEEDPAGES 9 * <=)
		// special case for very low remaining RAM (~1MB)

		MMMUSTSUCCEEDPAGES 1 + MmPageFreeCountLow!
		MmPageFreeCount@ 2 / MmPageFreeCountSufficient!

		MmPageFreeCount@ 3 / IOCachePagesModifiedMaximum!
		MmPageFreeCount@ 4 / IOCachePagesLowWatermark!
	end else
		MmPageFreeCount@ 9 / 512 min MmPageFreeCountLow!
		MmPageFreeCount@ 3 / 1536 min MmPageFreeCountSufficient!
		
		100 IOCachePagesModifiedMaximum!
		MmPageFreeCount@ 12 / 20 min IOCachePagesLowWatermark!
	end

	// initialize the commit limit to the free page count plus 100 pages.
	// will get set to the size of the swapfile later.
	MmPageFreeCount@ 100 + MmCommitLimit!

	MmPageFreeCountSufficient@
	MmPageFreeCountLow@
	"eviction targets: %d pages -> %d pages\n" "MmInitPhase1" HALLog

	IOCachePagesLowWatermark@ PAGESHIFT <<
	IOCachePagesLowWatermark@ "cache page minimum: %d pages (%d bytes)\n" "MmInitPhase1" HALLog

	IOCachePagesModifiedMaximum@ PAGESHIFT <<
	IOCachePagesModifiedMaximum@ "modified page maximum: %d pages (%d bytes)\n" "MmInitPhase1" HALLog

	auto ok

	0 // context1
	0 // context2
	pointerof MmEvictionWorker // startfunc
	0 // creationflags
	ACCESS_OWNER_ALL // permissions
	"Eviction" // name
	PsSystemProcess@ // processobject
	PsThreadCreateObject ok! drop

	if (ok@)
		ok@ "MmInitPhase1: couldn't create 'Eviction' thread (%i)\n" KeCrash
	end
end

fn MmResourceJettison { -- }
	auto rsrc
	HALResourceListHead@ rsrc!

	auto sz

	auto start

	auto rs

	while (rsrc@)
		if (rsrc@ BootResource_Jettison + @)
			rsrc@ BootResource_Size + @ PAGEOFFSETMASK + PAGESHIFT >> sz!
			rsrc@ BootResource_Data + @ IDENTITYSPACEMASK & PAGESHIFT >> start!

			while (sz@)
				start@ MmPageFree

				HALCPUInterruptDisable rs!
				// the page is now un-wired
				1 MmPageTotal +=
				rs@ HALCPUInterruptRestore

				1 start +=
				1 sz -=
			end

			0 rsrc@ BootResource_Data + ! // mark jettisoned
		end

		rsrc@ BootResource_Next + @ rsrc!
	end

	if (HALResourceKeepHeaders@ ~~)
		auto dll
		HALLoaderInfo@ LoaderInfo_DLLListHead + @ dll!

		while (dll@)
			dll@ DLL_LOFF + LOFFLoaded_HeaderSize + @ PAGEOFFSETMASK + PAGESHIFT >> sz!
			dll@ DLL_LOFF + LOFFLoaded_Base + @ IDENTITYSPACEMASK & PAGESHIFT >> start!

			while (sz@)
				start@ MmPageFree

				HALCPUInterruptDisable rs!
				// the page is now un-wired
				1 MmPageTotal +=
				rs@ HALCPUInterruptRestore

				1 start +=
				1 sz -=
			end

			dll@ DLL_Next + @ dll!
		end
	end
end

fn MmQuery { query -- ok }
	0 ok!

	MmPageTotalTotal@ query@ OSMemoryInformation_PageTotalCount + !
	MmPageTotal@ query@ OSMemoryInformation_PageTotalNonWiredCount + !
	
	MmPageFreeCount@ query@ OSMemoryInformation_PageFreeCount + !

	IOCachePagesUsed@ query@ OSMemoryInformation_FileCachePageCount + !
	MmAnonymousPageCount@ query@ OSMemoryInformation_AnonymousPageCount + !

	IOCachePagesModifiedCount@ query@ OSMemoryInformation_ModifiedPageCount + !

	IOSwapPagesCount@ query@ OSMemoryInformation_SwapPageTotalCount + !
	IOSwapPagesUsed@ query@ OSMemoryInformation_SwapPageUsedCount + !
	IOSwapPagesUsedPeak@ query@ OSMemoryInformation_SwapPagePeakCount + !

	MmSlabBytesUsedInternally@ MmPoolBytesUsed@ +
	query@ OSMemoryInformation_PoolBytesUsedInternally + !

	MmSlabBytesUsedExternally@ MmPoolBytesUsed@ +
	query@ OSMemoryInformation_PoolBytesUsedExternally + !

	MmEvictableFastPageCount@ query@ OSMemoryInformation_EvictableFastPageCount + !
	MmEvictableSlowPageCount@ query@ OSMemoryInformation_EvictableSlowPageCount + !

	MmTotalWorkingSetSize@ query@ OSMemoryInformation_WorkingSetPageTotalCount + !
	MmPeakWorkingSetSize@ query@ OSMemoryInformation_WorkingSetPagePeakCount + !

	MmPageFaultCount@ query@ OSMemoryInformation_PageFaultCount + !

	MmCommitLimit@ query@ OSMemoryInformation_CommitLimit + !
	MmCommitUsage@ query@ OSMemoryInformation_CommitUsage + !
end

fn MmUsageDump { -- }
	auto pageswired
	MmPageTotalTotal@ MmPageTotal@ - pageswired!

	auto pagesused
	MmPageTotalTotal@ MmPageFreeCount@ - pagesused!

	pageswired@ PAGESHIFT << 1024 /
	MmPageTotalTotal@ PAGESHIFT << 1024 /
	pagesused@ PAGESHIFT << 1024 / " PHYS: %dKB/%dKB used (%dKB unswappable kernel data)\n" Printf

	IOSwapPagesUsedPeak@ PAGESHIFT << 1024 /
	IOSwapPagesCount@ PAGESHIFT << 1024 /
	IOSwapPagesUsed@ PAGESHIFT << 1024 / " SWAP: %dKB/%dKB used (%dKB peak)\n" Printf
	
	MmSlabBytesUsedExternally@ 1024 /
	MmSlabBytesUsedInternally@ 1024 / " HEAP: %dKB used, occupying %dKB in memory\n" Printf
	
	MmPoolBytesUsed@ 1024 / " POOL: %dKB used\n" Printf
	IOCachePagesUsed@ PAGESHIFT << 1024 / " CACH: %dKB used\n" Printf
	MmAnonymousPageCount@ PAGESHIFT << 1024 / " ANON: %dKB used\n" Printf
	MmEvictablePageCount@ PAGESHIFT << 1024 / " EVIC: %dKB evictable\n" Printf

	MmPeakWorkingSetSize@ PAGESHIFT << 1024 /
	MmTotalWorkingSetSize@ PAGESHIFT << 1024 / " WSET: %dKB resident in process working sets (%dKB peak)\n" Printf
end