//
// Initialization of the MINTIA memory manager.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALResource.h"

#include "../../OSLoader/OSLoaderGlobal.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

externptr HALLoaderPFDB
externptr HALLoaderTotalRAM

externptr HALResourceKeepHeaders
externptr HALLoaderInfo

externptr ObFullyNonpagedObjects

var MmPageFrameDatabase 0
public MmPageFrameDatabase

var MmPageFreeListHead 0
public MmPageFreeListHead

var MmPageZeroListHead 0
public MmPageZeroListHead

var MmPageTotal 0
public MmPageTotal

var MmPageTotalTotal 0
public MmPageTotalTotal

var MmPageFreeCount 0
public MmPageFreeCount

var MmConstantZeroPage 0
public MmConstantZeroPage

var MmSoftPageFaultCount 0
public MmSoftPageFaultCount

var MmHardPageFaultCount 0
public MmHardPageFaultCount

var MmPageInCount 0
public MmPageInCount

var MmWorkingSetDefaultMinimum 8
public MmWorkingSetDefaultMinimum

var MmWorkingSetDefaultMaximum 64
public MmWorkingSetDefaultMaximum

var MmWorkingSetDefaultQuota 256
public MmWorkingSetDefaultQuota

buffer MmQuotaListMutex KeMutex_SIZEOF
public MmQuotaListMutex

var MmUnwireRecordListHead 0

struct MmUnwireRecord
	4 Next

	4 Type
	4 StartVA
	4 Pages
endstruct

const MMUNWIRE_FREE 1
const MMUNWIRE_PAGE 2

var MmInited 0
public MmInited

buffer MmQuotaSystem MmQuotaBlock_SIZEOF
public MmQuotaSystem

buffer MmEventLowMemory KeEvent_SIZEOF
public MmEventLowMemory

buffer MmModifiedPageEvent KeEvent_SIZEOF
public MmModifiedPageEvent

var MmPageFreeCountLow 0
public MmPageFreeCountLow

var MmPageFreeCountSufficient 0
public MmPageFreeCountSufficient

var MmModifiedPageMaximum 0
public MmModifiedPageMaximum

var MmTheoreticalCommitLimit 0
public MmTheoreticalCommitLimit

var MmCommitLimit 0
public MmCommitLimit

var MmCommitUsage 0
public MmCommitUsage

var MmPhysicalCommitLimit 0
public MmPhysicalCommitLimit

var MmPhysicalCommitUsage 0
public MmPhysicalCommitUsage

buffer MmEventPageAvailable KeEvent_SIZEOF
public MmEventPageAvailable

var MmModifiedPageWriterThread 0
public MmModifiedPageWriterThread

extern MmPlatformInit { -- }

fn MmInitPhase0 { -- }
	fnsection "INIT$text"

	HALLoaderPFDB@ MmPageFrameDatabase!

	HALLoaderTotalRAM@ PAGESHIFT >> MmPageTotalTotal!

	// initialize the page DB by walking the memory descriptor list given to
	// us by OSLoader and adding the pages of all the regions marked free to
	// the free list.

	auto desc
	HALLoaderInfo@ LdrInfo_MemoryDescriptorListHead + @ desc!

	while (desc@)
		if (desc@ LdrMemoryDescriptor_Type + @ OSLOADERMEM_FREE ==)
			auto pages
			desc@ LdrMemoryDescriptor_Pages + @ pages!

			auto pfdbe
			desc@ LdrMemoryDescriptor_StartPFN + @ MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

			pages@ MmPageFreeCount +=
			pages@ MmPageTotal +=

			while (pages@)
				MmPageFreeListHead@ pfdbe@ MmPageFrameEntryFree_Next + !
				pfdbe@ MmPageFreeListHead!

				MmPageFrameEntry_SIZEOF pfdbe +=
				1 pages -=
			end
		end

		desc@ LdrMemoryDescriptor_Next + @ desc!
	end

	MmPlatformInit

	1 MmInited!

	auto idleproc
	KeProcessCurrent idleproc!

	auto ok
	-1 // uid
	MMQUOTAINFINITE // wsmax
	MMQUOTAINFINITE // pghpmax
	MMQUOTAINFINITE // vmmax
	MMQUOTAINFINITE // heapmax
	MmQuotaSystem // quota
	MmQuotaBlockInitialize ok!

	if (ok@)
		"MmInitPhase0: couldn't initialize system quota block\n" KeCrash
	end

	// bias the reference by one to make sure the system never attempts to
	// free this
	MmQuotaSystem MmQuotaBlockReference

	MmQuotaSystem idleproc@ PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + !

	0 // signaled
	OSEVENT_NOTIF // type
	"MmEventLowMemory" // name
	MmEventLowMemory // event
	KeEventInitialize

	0 // signaled
	OSEVENT_SYNCH // type
	"MmEventPageAvailable" // name
	MmEventPageAvailable // event
	KeEventInitialize

	0 // signaled
	OSEVENT_SYNCH // type
	"MmModifiedPageEvent" // name
	MmModifiedPageEvent // event
	KeEventInitialize

	0 // signaled
	OSEVENT_SYNCH // type
	"IOSwapFileExtendEvent" // name
	IOSwapFileExtendEvent // event
	KeEventInitialize

	0 // signaled
	OSEVENT_NOTIF // type
	"IOSwapFileCreationEvent" // name
	IOSwapFileCreationEvent // event
	KeEventInitialize

	"MmQuotaListMutex" // name
	KERNELMODE // mode
	MmQuotaListMutex // mutex
	KeMutexInitialize

	MmPoolInit

	-1 MmPhysicalCommitLimit!

	MmReclaimMemory

	// allocate one constantly-zeroed page which will be used by a lot of
	// stuff.

	ZEROMUST MUSTSUCCEED | // priority
	MmPageGet ok! drop pfdbe!

	if (ok@)
		"MmInitPhase0: couldn't allocate the constant zero page\n" KeCrash
	end

	pfdbe@ MmConstantZeroPage!

	// initialize the commit limit to the free page count minus 10 pages.
	// will get set to the size of the swapfile later.
	MmPageFreeCount@ 10 - MmCommitLimit!
	MmCommitLimit@ MmTheoreticalCommitLimit!
end

const MMTINYSYSTEM   1
const MMSMALLSYSTEM  2
const MMMEDIUMSYSTEM 3
const MMLARGESYSTEM  4
const MMHUGESYSTEM   5

var MmSystemSize 0

var MmSectionObjectType 0
public MmSectionObjectType

fn MmInitPhase1 { -- }
	fnsection "INIT$text"

	auto phdr
	PsSystemProcess@ PsProcess_MmHeader + @ phdr!

	// MMSYSTEMWORKINGSETDEFAULTMINIMUM phdr@ MmProcessHeader_WorkingSetMinimum + !
	// MMSYSTEMWORKINGSETDEFAULTMAXIMUM phdr@ MmProcessHeader_WorkingSetMaximum + !
	// -1 phdr@ MmProcessHeader_WorkingSetQuota + !

	auto typeinit
	ObTypeInitializer_SIZEOF alloc typeinit!

	// initialize ObTypeInitializer fields

	typeinit@ ObTypeInitializerInitialize

	// create Section type

	auto type

	"Section" typeinit@ ObTypeInitializer_Name + !
	'Sect' typeinit@ ObTypeInitializer_Tag + !
	0 typeinit@ ObTypeInitializer_BodySize + !
	pointerof MmSectionObjectDelete typeinit@ ObTypeInitializer_DeleteFunction + !
//	1 typeinit@ ObTypeInitializer_Paged + !
	typeinit@ ObTypeCreate ok! type!

	if (ok@)
		ok@ "MmInitPhase1: couldn't create Section type (%i)\n" KeCrash
	end

	type@ MmSectionObjectType!

	// initialize eviction/swap

	auto membytes
	MmPageTotalTotal@ PAGESHIFT << membytes!

	MMNORMALTHRESH 8 + MmPageFreeCountLow!
	MMNORMALTHRESH 50 + MmPageFreeCountSufficient!

#ifdef FOX32
	600 MmModifiedPageMaximum!
#else
	100 MmModifiedPageMaximum!
#endif

	if (membytes@ 3 1024 * 1024 * <=)
		// tiny system, 0-3MB

		MMTINYSYSTEM MmSystemSize!

		4 MmWorkingSetDefaultMinimum!

		50 MmModifiedPageMaximum!
		40 MmPinnedPagesLimit!
	end elseif (membytes@ 5 1024 * 1024 * <=)
		// small system, 3-5MB

		MMSMALLSYSTEM MmSystemSize!

		8 MmWorkingSetDefaultMinimum!

		80 MmPinnedPagesLimit!
	end elseif (membytes@ 9 1024 * 1024 * <=)
		// medium system, 5-9MB

		MMMEDIUMSYSTEM MmSystemSize!

		16 MmWorkingSetDefaultMinimum!

		120 MmPinnedPagesLimit!
	end elseif (membytes@ 33 1024 * 1024 * <)
		// large system, 9-33MB

		MMLARGESYSTEM MmSystemSize!

		20 MmWorkingSetDefaultMinimum!

		300 MmPinnedPagesLimit!
	end else
		// massive system, >33MB

		MMHUGESYSTEM MmSystemSize!

		32 MmWorkingSetDefaultMinimum!

		500 MmPinnedPagesLimit!
	end

	MmPageFreeCountSufficient@
	MmPageFreeCountLow@
	"free page targets: %d pages -> %d pages\n" "MmInitPhase1" HALLog

	MmModifiedPageMaximum@ PAGESHIFT <<
	MmModifiedPageMaximum@ "modified page maximum: %d pages (%d bytes)\n" "MmInitPhase1" HALLog

	auto ok
	0 // context1
	0 // context2
	pointerof MmModifiedPageWriter // startfunc
	0 // creationflags
	ACCESS_OWNER_ALL // permissions
	"ModifiedPageWriter" // name
	PsSystemProcess@ // processobject
	PsThreadCreateObject ok! MmModifiedPageWriterThread!

	if (ok@)
		ok@ "MmInitPhase1: couldn't create 'ModifiedPageWriter' thread (%i)\n" KeCrash
	end

	0 ObFullyNonpagedObjects!
end

fn MmReclaimMemory { -- }
	fnsection "INIT$text"

	// lift the resource list and DLL list into our kernel heap and then
	// reclaim the reclaimable regions in the descriptor list.

	auto ok

	auto newlisthead

	// rebuild the resource list on our own heap

	auto prev
	auto new

	auto current
	HALLoaderInfo@ LdrInfo_ResourceListHead + @ current!

	0 newlisthead!

	while (current@)
		LdrBootResource_SIZEOF // bytes
		'nRSR' // tag
		MUSTSUCCEED // flags
		MmAllocWithTag ok! new!

		if (ok@)
			ok@ "MmReclaimMemory: couldn't relocate resources list (%i)\n" KeCrash
		end

		if (newlisthead@ ~~)
			new@ newlisthead!
		end else
			new@ prev@ LdrBootResource_Next + !
		end

		new@ prev!

		new@ // dest
		current@ // src
		LdrBootResource_SIZEOF // size
		memcpy

		0 new@ LdrBootResource_Next + !

		current@ LdrBootResource_Next + @ current!
	end

	newlisthead@ HALResourceListHead!

	// rebuild the DLL list on our own heap

	auto start
	auto sz
	auto rs

	auto name

	0 newlisthead!

	HALLoaderInfo@ LdrInfo_DLLListHead + @ current!

	while (current@)
		ComDLL_SIZEOF // bytes
		'nDLL' // tag
		MUSTSUCCEED // flags
		MmAllocWithTag ok! new!

		if (ok@)
			ok@ "MmReclaimMemory: couldn't relocate DLL list (%i)\n" KeCrash
		end

		if (newlisthead@ ~~)
			new@ newlisthead!
		end else
			new@ prev@ ComDLL_Next + !
		end

		new@ prev!

		new@ // dest
		current@ // src
		ComDLL_SIZEOF // size
		memcpy

		current@ ComDLL_Name + @ strlen // bytes
		'DLLN' // tag
		MUSTSUCCEED // flags
		MmAllocWithTag ok! name!

		if (ok@)
			ok@ "MmReclaimMemory: couldn't relocate DLL list (%i) 2\n" KeCrash
		end

		name@ // dest
		current@ ComDLL_Name + @ // src
		strcpy

		name@ new@ ComDLL_Name + !

		0 new@ ComDLL_Next + !

		current@ ComDLL_Next + @ current!
	end

	newlisthead@ HALLoaderInfo@ LdrInfo_DLLListHead + !

	// iterate the sections of all the DLLs and build a list of unwireable
	// regions.

	HALLoaderInfo@ LdrInfo_DLLListHead + @ current!

	while (current@)
		auto head
		current@ ComDLL_HeadVAddr + @ head!

		auto sectionheader
		head@ XLOFFHeader_SectionTableOffset + @ head@ + sectionheader!

		head@ XLOFFHeader_SectionCount + @ sz!

		while (sz@)
			sectionheader@ XLOFFSectionHeader_NameOffset + @
			head@ XLOFFHeader_StringTableOffset + @ + head@ + name!

			auto type
			0 type!

			if (name@ "INIT" 4 strncmp)
				MMUNWIRE_FREE type!
			end elseif (name@ "PAGE" 4 strncmp)
				MMUNWIRE_PAGE type!
			end

			if (type@)
				MmUnwireRecord_SIZEOF // bytes
				'Unwi' // tag
				MUSTSUCCEED // flags
				MmAllocWithTag ok! start!

				if (ok@)
					ok@ "MmReclaimMemory: couldn't build unwire list (%i)\n" KeCrash
				end

				type@ start@ MmUnwireRecord_Type + !
				sectionheader@ XLOFFSectionHeader_VirtualAddress + @ start@ MmUnwireRecord_StartVA + !
				sectionheader@ XLOFFSectionHeader_DataSize + @ PAGEOFFSETMASK + PAGESHIFT >> start@ MmUnwireRecord_Pages + !

				MmUnwireRecordListHead@ start@ MmUnwireRecord_Next + !
				start@ MmUnwireRecordListHead!
			end

			1 sz -=
			XLOFFSectionHeader_SIZEOF sectionheader +=
		end

		current@ ComDLL_Next + @ current!
	end

	auto desc
	HALLoaderInfo@ LdrInfo_MemoryDescriptorListHead + @ desc!

	while (desc@)
		auto reclaim
		0 reclaim!

		if (desc@ LdrMemoryDescriptor_Type + @ OSLOADERMEM_RECLAIMABLE ==)
			1 reclaim!
		end elseif (desc@ LdrMemoryDescriptor_Type + @ OSLOADERMEM_DEBUG ==)
			if (HALResourceKeepHeaders@ ~~)
				1 reclaim!
			end
		end

		if (reclaim@)
			auto pages
			desc@ LdrMemoryDescriptor_Pages + @ pages!

			auto pfn
			desc@ LdrMemoryDescriptor_StartPFN + @ pfn!

			auto pfdbe
			pfn@ MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

			while (pages@)
				1 MmPageFreeCount +=
				1 MmPageTotal +=

				MmPageFreeListHead@ pfdbe@ MmPageFrameEntryFree_Next + !
				pfdbe@ MmPageFreeListHead!

				MmPageFrameEntry_SIZEOF pfdbe +=
				1 pages -=
				1 pfn +=
			end
		end

		desc@ LdrMemoryDescriptor_Next + @ desc!
	end
end

fn MmResourceJettison { -- }
	fnsection "INIT$text"

	auto rsrc
	HALResourceListHead@ rsrc!

	auto sz
	auto start
	auto ok

	auto rs

	while (rsrc@)
		if (rsrc@ LdrBootResource_Jettison + @)
			rsrc@ LdrBootResource_Size + @ PAGEOFFSETMASK + PAGESHIFT >> sz!

			// XXX assumes boot resources are allocated contiguously in
			// physical memory, which is OSLoader's current behavior.

			auto pteaddr
			rsrc@ LdrBootResource_Data + @ // vaddr
			HALPlatformKernelPageDirectory@ // pagemap
			MmVirtualtoPTEAddress pteaddr!

			pteaddr@ MmPTEInterpret ok! drop start!

			if (ok@)
				"MmResourceJettison: invalid PTE\n" KeCrash
			end

			PAGESHIFT start >>=

			while (sz@)
				start@ MmPageFree

				HALCPUInterruptDisable rs!
				// the page is now un-wired
				1 MmPageTotal +=
				rs@ HALCPUInterruptRestore

				1 start +=
				1 sz -=
			end

			0 rsrc@ LdrBootResource_Data + ! // mark jettisoned
		end

		auto nrsrc
		rsrc@ LdrBootResource_Next + @ nrsrc!

		rsrc@ MmFree

		nrsrc@ rsrc!
	end

	0 HALResourceListHead!
end

fn MmInitPhysicalCommit { -- }
//	fnsection "INIT$text"

	auto limit
	MmPageTotal@ limit!

	// subtract an arbitrary 32 pages for system usage

	if (MMSYSTEMPROMISE limit@ <)
		MMSYSTEMPROMISE limit -=
	end

	// guarantee a minimum of 4 working sets

	if (limit@ MmWorkingSetDefaultMinimum@ 4 * 20 + <)
		MmWorkingSetDefaultMinimum@ 4 * 20 + limit!
	end

	// limit to total number of pages

	if (limit@ MmPageTotal@ >)
		MmPageTotal@ limit!
	end

	limit@ MmPhysicalCommitLimit!
end

fn MmUnwireKernel { -- }
	auto unwr
	MmUnwireRecordListHead@ unwr!

	auto kdir
	HALPlatformKernelPageDirectory@ kdir!

	while (unwr@)
		auto nunwr
		unwr@ MmUnwireRecord_Next + @ nunwr!

		auto vaddr
		unwr@ MmUnwireRecord_StartVA + @ vaddr!

		auto pages
		unwr@ MmUnwireRecord_Pages + @ pages!

		if (unwr@ MmUnwireRecord_Type + @ MMUNWIRE_PAGE ==)
			pages@ PAGESHIFT << // charge
			MmQuotaSystem // quotablock
			MmQuotaBlockChargeVMNoExtend ok!

			if (ok@)
				ok@ "MmUnwireKernel: failed to charge commitment for paged section (%i)\n" KeCrash
			end
		end

		while (pages@)
			auto pteaddr
			vaddr@ // vaddr
			kdir@ // pagemap
			MmVirtualtoPTEAddress pteaddr!

			auto ok
			auto flags
			auto phyaddr

			pteaddr@ MmPTEInterpret ok! flags! phyaddr!

			if (DEBUGCHECKS)
				if (ok@)
					ok@ "MmUnwireKernel: failed to interpret PTE (%i)\n" KeCrash
				end
			end

			if (unwr@ MmUnwireRecord_Type + @ MMUNWIRE_FREE ==)
				// unmap the page

				0 // phyaddr
				0 // flags
				vaddr@ // vaddr
				pteaddr@ // pteaddr
				0 // asid
				MmPTEUpdate drop drop drop

				// free the page frame

				phyaddr@ PAGESHIFT >> MmPageFree

				1 MmPageTotal KeInterlockedIncrement drop
			end elseif (unwr@ MmUnwireRecord_Type + @ MMUNWIRE_PAGE ==)
				// convert the page to a modified private anonymous page, and
				// set the PTE to transition.

				auto pfdbe
				phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

				0 pfdbe@ MmPageFrameEntryAnonymous_Next + !
				0 pfdbe@ MmPageFrameEntryAnonymous_Prev + !

				MMEVICTFLAG_PRIVATE MMEVICTFLAG_MODIFIED | pfdbe@ MmPageFrameEntryAnonymous_EvictionFlagsB + sb

				MMEVICTTYPE_ANON pfdbe@ MmPageFrameEntryAnonymous_EvictionTypeB + sb

				1 pfdbe@ MmPageFrameEntryAnonymous_ReferencesI + si

				PTE_TLBHACK pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + !

				pteaddr@ pfdbe@ MmPageFrameEntryAnonymous_PrototypePTE + !

				PsSystemProcess@ pfdbe@ MmPageFrameEntryAnonymous_Process + !
				vaddr@ pfdbe@ MmPageFrameEntryAnonymous_VirtualAddress + !

				pfdbe@ MmEvictablePageDereference drop

				MMEVICTFLAG_WORKINGSET pfdbe@ MmPageFrameEntryAnonymous_EvictionFlagsB + gb |
				pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

				phyaddr@ PTE_TRANSITION | PTE_TLBHACK | // pte
				vaddr@ // vaddr
				pteaddr@ // pteaddr
				0 // asid
				MmPTESet

				1 MmPageTotal KeInterlockedIncrement drop
				1 MmAnonymousPageCount KeInterlockedIncrement drop
			end

			PAGESIZE vaddr +=
			1 pages -=
		end

		unwr@ MmFree

		nunwr@ unwr!
	end

	MmInitPhysicalCommit
end

fn MmQuery { query -- ok }
	fnsection "PAGE$text"

	0 ok!

	query@ // ptr
	OSMemoryInformation_SIZEOF // size
	0 // word
	memset

	MmPageTotalTotal@ query@ OSMemoryInformation_PageTotalCount + !
	MmPageTotal@ query@ OSMemoryInformation_PageTotalNonWiredCount + !
	
	MmPageFreeCount@ query@ OSMemoryInformation_PageFreeCount + !

	IOCachePagesUsed@ query@ OSMemoryInformation_FileCachePageCount + !
	MmAnonymousPageCount@ query@ OSMemoryInformation_AnonymousPageCount + !

	IOCacheInfoBlockDirtyCount@ query@ OSMemoryInformation_DirtyFileCount + !

	IOSwapPagesCount@ query@ OSMemoryInformation_SwapPageTotalCount + !
	IOSwapPagesUsed@ query@ OSMemoryInformation_SwapPageUsedCount + !
	IOSwapPagesUsedPeak@ query@ OSMemoryInformation_SwapPagePeakCount + !

	IOSwapPagesRead@ query@ OSMemoryInformation_SwapPagesRead + !
	IOSwapPagesWritten@ query@ OSMemoryInformation_SwapPagesWritten + !

	MmNonpagedHeapBytesUsedInternally@ MmNonpagedPoolBytesUsed@ +
	query@ OSMemoryInformation_NonpagedPoolBytesUsedInternally + !

	MmNonpagedHeapBytesUsedExternally@ MmNonpagedPoolBytesUsed@ +
	query@ OSMemoryInformation_NonpagedPoolBytesUsedExternally + !

	MmNonpagedHeapBytesUsedPeak@ MmNonpagedPoolBytesPeak@ +
	query@ OSMemoryInformation_NonpagedPoolBytesUsedPeak + !

	MmPagedHeapBytesUsedInternally@ MmPagedPoolBytesUsed@ +
	query@ OSMemoryInformation_PagedPoolBytesUsedInternally + !

	MmPagedHeapBytesUsedExternally@ MmPagedPoolBytesUsed@ +
	query@ OSMemoryInformation_PagedPoolBytesUsedExternally + !

	MmPagedHeapBytesUsedPeak@ MmPagedPoolBytesPeak@ +
	query@ OSMemoryInformation_PagedPoolBytesUsedPeak + !

	MmEvictablePageCount@ query@ OSMemoryInformation_EvictablePageCount + !

	MmModifiedPageCount@ query@ OSMemoryInformation_ModifiedPageCount + !
	MmModifiedPageMaximum@ query@ OSMemoryInformation_ModifiedPageMaximum + !

	MmTotalWorkingSetSize@ query@ OSMemoryInformation_WorkingSetPageTotalCount + !
	MmPeakWorkingSetSize@ query@ OSMemoryInformation_WorkingSetPagePeakCount + !

	MmPageFaultCount@ query@ OSMemoryInformation_PageFaultCount + !
	MmHardPageFaultCount@ query@ OSMemoryInformation_HardPageFaultCount + !
	MmSoftPageFaultCount@ query@ OSMemoryInformation_SoftPageFaultCount + !
	MmPageInCount@ query@ OSMemoryInformation_PageInCount + !

	MmTheoreticalCommitLimit@ query@ OSMemoryInformation_TheoreticalCommitLimit + !
	MmCommitLimit@ query@ OSMemoryInformation_CommitLimit + !
	MmCommitUsage@ query@ OSMemoryInformation_CommitUsage + !

	MmPhysicalCommitLimit@ query@ OSMemoryInformation_PhysicalCommitLimit + !
	MmPhysicalCommitUsage@ query@ OSMemoryInformation_PhysicalCommitUsage + !

	MmModifiedFilePageCount@ query@ OSMemoryInformation_ModifiedFilePageCount + !
end