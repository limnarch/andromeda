//
// Implements Virtual Address Descriptor (VAD) management routines.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

// routines for creating, destroying, and manipulating
// Virtual Address Descriptors (VADs).

fn MmVADCreate { startva endva prot offset processobject mappedobject quotablock -- vad ok }
	fnsection "PAGE$text"

	// allocates a VAD structure.
	// references the section object, and the quotablock if applicable.

	auto qcharge
	MmVAD_SIZEOF MmChargeBytesGet qcharge!

	qcharge@ // charge
	quotablock@ // quotablock
	MmQuotaBlockChargePaged ok!

	if (ok@)
		return
	end

	MmVAD_SIZEOF // bytes
	'nVAD' // tag
	PAGED // flags
	MmAllocWithTag ok! vad!

	if (ok@)
		qcharge@ // charge
		quotablock@ // quotablock
		MmQuotaBlockUnchargePaged

		return
	end

	0 vad@ MmVAD_ChargeVMQuota + !

	if (prot@)
		// charge vm quota for the number of page tables this VAD could lead to.
		
		startva@ // startva
		endva@ // endva
		processobject@ // process
		MmProcessChargePageTables ok!

		if (ok@)
			vad@ MmFree

			qcharge@ // charge
			quotablock@ // quotablock
			MmQuotaBlockUnchargePaged

			return
		end

		if (prot@ PAGEACCESS_WRITECOPY & mappedobject@ ~~ ||)
			// charge vm quota for this VAD because it has the potential to
			// allocate lots of anonymous pages via COW, or is private.

			endva@ startva@ - // charge
			quotablock@ // quotablock
			MmQuotaBlockChargeVM ok!

			if (ok@)
				vad@ MmFree

				qcharge@ // charge
				quotablock@ // quotablock
				MmQuotaBlockUnchargePaged

				return
			end

			endva@ startva@ - vad@ MmVAD_ChargeVMQuota + !
		end
	end

	quotablock@ MmQuotaBlockReference

	mappedobject@ vad@ MmVAD_MappedObject + !
	offset@ vad@ MmVAD_OffsetInSection + !

	0 vad@ MmVAD_Flags + !

	startva@ vad@ MmVAD_StartVA + !
	endva@ vad@ MmVAD_EndVA + !
	0 vad@ MmVAD_FurthestExtentMapped + !
	prot@ vad@ MmVAD_PageProtection + !
	quotablock@ vad@ MmVAD_QuotaBlock + !

	0 vad@ MmVAD_COWCount + !

	if (mappedobject@)
		mappedobject@ ObObjectReferenceByPointer drop

		if (mappedobject@ ObObjectType IOFileTypeObject@ ==)
			MMVADFLAG_FILE vad@ MmVAD_Flags + |=

			if (mappedobject@ IOFile_FileControlBlock + @ IOFileControlBlock_FileType + @ OSFILETYPE_CHARDEVICE ==)
				MMVADFLAG_NOCOMMIT vad@ MmVAD_Flags + |=
			end
		end elseif (mappedobject@ ObObjectType MmSectionObjectType@ ==)
			MMVADFLAG_SECTION vad@ MmVAD_Flags + |=
		end else
			"MmVADCreate: mappedobject has unsupported type\n" KeCrash
		end
	end
end

fn MmVADListLock { processobject -- ok }
	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	processobject@ PsProcess_VADListMutex + // object
	KeThreadWaitForObject ok!
end

fn MmVADListTryLock { processobject -- ok }
	KERNELMODE // waitmode
	0 // alertable
	0 // timeout
	processobject@ PsProcess_VADListMutex + // object
	KeThreadWaitForObject ok!
end

fn MmVADListIsLocked { processobject -- locked }
	processobject@ PsProcess_VADListMutex + // mutex
	KeMutexIsLocked locked!
end

fn MmVADListUnlock { processobject -- }
	0 // abandon
	processobject@ PsProcess_VADListMutex + // mutex
	KeMutexRelease drop
end

fn MmVADFind { vaddr length mustbestart processobject -- vad ok }
	fnsection "PAGE$text"

	// locate the VAD containing the given virtual address. if mustbestart is
	// true, then the virtual address must be at the start of the VAD, and the
	// length must match the length of the VAD, or else an error is returned.
	// if it is false, the length argument is completely ignored.

	// assumes the caller locked the process VAD list.

	0 ok!

	vaddr@ // value
	processobject@ PsProcess_PagedArea + @ PsProcessPaged_VADTreeRoot + // rootptr
	ExSplayTreeFindNodeByValueRange vad!

	if (vad@ ~~)
		STATUS_BAD_ADDRESS ok!
		return
	end

	MmVAD_Parent vad -=

	if (mustbestart@)
		if (length@ PAGEOFFSETMASK + PAGENUMBERMASK & vad@ MmVAD_EndVA + @ vad@ MmVAD_StartVA + @ - ~=)
			STATUS_BAD_ADDRESS ok!
			return
		end
	end
end

fn MmVADFindAndMapFreeRegion { viewsize startva fixedva pageprotection sectionoffset mappedobject processobject -- realva ok }
	fnsection "PAGE$text"

	// find a fitting region with a preferred virtual address of startva.
	// if fixedva is true, then *only* this virtual address can be used; if
	// it is not available an error will be returned.
	// this region must be completely empty.

	auto endva
	// no overflow check, caller should have done that
	startva@ viewsize@ + endva!

	0 realva!

	auto vad
	0 vad!

	processobject@ MmVADListLock ok!

	if (ok@)
		return
	end

	if (processobject@ PsSystemProcess@ ~=)
		if (startva@)
			if (startva@ PAGESIZE <)
				if (fixedva@)
					processobject@ MmVADListUnlock

					STATUS_UNAVAILABLE_ADDRESS ok!

					return
				end

				PAGESIZE startva!
				startva@ viewsize@ + endva!
			end

			startva@ // value
			endva@ // endvalue
			processobject@ PsProcess_PagedArea + @ PsProcessPaged_VADTreeRoot + @ // root
			ExSplayTreeFindFirstContainingNode vad!

			if (vad@)
				if (fixedva@)
					processobject@ MmVADListUnlock

					STATUS_UNAVAILABLE_ADDRESS ok!

					return
				end

				MmVAD_Parent vad -=

				while (1)
					auto nextvad
					vad@ MmVAD_Parent + // node
					ExSplayTreeNodeNext nextvad!

					if (nextvad@ ~~)
						if (MMHIGHESTUSERADDRESS 1 + vad@ MmVAD_EndVA + @ - viewsize@ >=)
							vad@ MmVAD_EndVA + @ realva!
						end

						break
					end

					MmVAD_Parent nextvad -=

					if (nextvad@ MmVAD_StartVA + @ vad@ MmVAD_EndVA + @ - viewsize@ >=)
						vad@ MmVAD_EndVA + @ realva!
						break
					end

					nextvad@ vad!
				end
			end else
				startva@ realva!
			end
		end elseif (fixedva@)
			processobject@ MmVADListUnlock

			STATUS_UNAVAILABLE_ADDRESS ok!

			return
		end

		if (realva@ ~~)
			viewsize@ // size
			processobject@ PsProcess_PagedArea + @ PsProcessPaged_VADTreeRoot + @ // root
			ExSplayTreeFindEmptyRange realva! vad!

			if (realva@ ~~)
				processobject@ MmVADListUnlock

				STATUS_UNAVAILABLE_ADDRESS ok!

				return
			end
		end
	end else
		startva@ realva!
	end

	// create the VAD for this mapping and insert it in the tree

	realva@ // startva
	realva@ viewsize@ + // endva
	pageprotection@ // prot
	sectionoffset@ // offset
	processobject@ // processobject
	mappedobject@ // mappedobject
	processobject@ PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ // quotablock
	MmVADCreate ok! vad!
	
	if (ok@)
		processobject@ MmVADListUnlock

		return
	end

	0 // insertat
	vad@ MmVAD_Parent + // node
	processobject@ PsProcess_PagedArea + @ PsProcessPaged_VADTreeRoot + // rootptr
	ExSplayTreeInsert

	if (vad@ MmVAD_Flags + @ MMVADFLAG_NOCOMMIT &)
		1 processobject@ PsProcess_PagedArea + @ PsProcessPaged_MappedMMIOCount + +=
	end

	processobject@ MmVADListUnlock
end

fn MmVADUnmap { vad processobject -- }
	fnsection "PAGE$text"

	// assumes the caller locked the process VAD list.

	// unmap all the pages associated with the VAD, then remove it from the
	// process VAD list and destroy it.

	if (DEBUGCHECKS)
		if (KeThreadCurrent@ KeThread_IgnoreKill + @ ~~)
			"MmVADUnmap: could be killed\n" KeCrash
		end
	end

	auto kernelmapping
	processobject@ PsSystemProcess@ == kernelmapping!

	auto ok

	if (kernelmapping@ ~~)
		TRYFOREVER // pri
		processobject@ // process
		MmPageDirectoryReference ok!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "MmVADUnmap: failed to reference page directory (%i)\n" KeCrash
			end
		end
	end

	auto pdir
	processobject@ PsProcess_PCB + KeProcess_PageDirectory + @ pdir!

	auto asid
	processobject@ PsProcess_PCB + KeProcess_ASID + @ asid!

	auto vaddr
	vad@ MmVAD_StartVA + @ vaddr!

	auto max
	vad@ MmVAD_EndVA + @ max!

	auto commitcharge
	vad@ MmVAD_Flags + @ MMVADFLAG_NOCOMMIT & ~~ commitcharge!

	if (commitcharge@)
		vaddr@ // startva
		max@ // endva
		processobject@ // process
		MmWorkingSetTrimRange
	end

	// only unmap up to the highest vaddr that was ever faulted in, as an
	// optimization.
	vad@ MmVAD_FurthestExtentMapped + @ max!

	if (DEBUGCHECKS)
		if (vaddr@ PAGEOFFSETMASK &)
			vaddr@ "MmVADUnmap: vaddr wasn't page-aligned (0x%08x)\n" KeCrash
		end

		if (max@ PAGEOFFSETMASK &)
			max@ "MmVADUnmap: max wasn't page-aligned (0x%08x)\n" KeCrash
		end

		if (kernelmapping@)
			if (vaddr@ MMLOWESTSYSTEMADDRESS <)
				vaddr@ "MmVADUnmap: vaddr < MMLOWESTSYSTEMADDRESS (0x%08x)\n" KeCrash
			end
		end else
			if (vaddr@ MMHIGHESTUSERADDRESS >)
				vaddr@ "MmVADUnmap: vaddr > MMHIGHESTUSERADDRESS (0x%08x)\n" KeCrash
			end
		end
	end

	auto pteaddr
	auto pte

	auto pfdbe

	auto chargevmquota
	vad@ MmVAD_ChargeVMQuota + @ chargevmquota!

	if (chargevmquota@ commitcharge@ ~~ || max@ &&)
		// this means that the VAD is or was mapped COW. we need to traverse
		// the page tables to find transition and swap PTEs to free.

		// also we need to traverse the page tables when its a mapped
		// character device.

		auto ptpfdbe
		0 ptpfdbe!
		0 pteaddr!

		while (vaddr@ max@ <=)
			if (kernelmapping@ ~~)
				if (vaddr@ PERPAGETABLEOFFSETMASK & ~~ pteaddr@ ~~ ||)
					if (ptpfdbe@)
						ptpfdbe@ processobject@ MmPTEDereference
					end

					TRYFOREVER // pri
					vaddr@ // vaddr
					processobject@ // process
					MmPTEReference ok! pteaddr! ptpfdbe!

					if (ok@)
						if (ok@ -1 ~=)
							ok@ "MmVADUnmap: failed to reference PTE (%i)\n" KeCrash
						end

						0 ptpfdbe!
						PERPAGETABLE vaddr +=
						continue
					end
				end
			end elseif (vaddr@ PERPAGETABLEOFFSETMASK & ~~ pteaddr@ ~~ ||)
				vaddr@ // vaddr
				pdir@ // pagemap
				MmVirtualtoPTEAddress pteaddr!
			end

			if (chargevmquota@)
				kernelmapping@ ~~ // deletepte
				pteaddr@ // pteaddr
				vaddr@ // vaddr
				processobject@ // process
				MmAnonymousPageDeleteByPTE
			end else
				// this is a character device mapping, just destroy the PTEs
				// manually. we can be sure that new ones won't be faulted in
				// because the VAD list lock is held throughout the duration
				// of character device faults.

				if (pteaddr@@ MmPTEIsZero ~~)
					0 // phyaddr
					0 // flags
					vaddr@ // vaddr
					pteaddr@ // pteaddr
					asid@ // asid
					MmPTEUpdate drop drop drop

					1 // deref
					pteaddr@ // pteaddr
					vaddr@ // vaddr
					processobject@ // process
					MmPTEDelete drop
				end
			end

			PTESIZE pteaddr +=
			PAGESIZE vaddr +=
		end

		if (ptpfdbe@)
			ptpfdbe@ processobject@ MmPTEDereference
		end
	end

	if (kernelmapping@ ~~)
		processobject@ MmPageDirectoryDereference
	end

	// remove from VAD tree

	vad@ MmVAD_Parent + // node
	processobject@ PsProcess_PagedArea + @ PsProcessPaged_VADTreeRoot + // rootptr
	ExSplayTreeRemove

	// uncharge quota

	auto quotablock
	vad@ MmVAD_QuotaBlock + @ quotablock!

	MmVAD_SIZEOF MmChargeBytesGet // charge
	quotablock@ // quotablock
	MmQuotaBlockUnchargePaged

	if (chargevmquota@)
		chargevmquota@ // charge
		quotablock@ // quotablock
		MmQuotaBlockUnchargeVM
	end

	quotablock@ MmQuotaBlockDereference

	if (vad@ MmVAD_Flags + @ MMVADFLAG_NOCOMMIT &)
		1 processobject@ PsProcess_PagedArea + @ PsProcessPaged_MappedMMIOCount + -=
	end

	if (vad@ MmVAD_Flags + @ MMVADFLAG_FILE &)
		vad@ MmVAD_MappedObject + @ // fileobject
		MmFileUnprepareForMap
	end

	if (vad@ MmVAD_MappedObject + @)
		vad@ MmVAD_MappedObject + @ ObObjectDereferenceByPointer drop
	end

	vad@ MmFree
end

fn MmVADListCheckRange { startva endva process -- ok }
	fnsection "PAGE$text"

	// assumes the caller locked the process VAD list.

	// check to ensure that there aren't any VADs corresponding to memory-
	// -mapped devices overlapping the given range.

	auto vad
	startva@ // value
	endva@ // endvalue
	process@ PsProcess_PagedArea + @ PsProcessPaged_VADTreeRoot + @ // root
	ExSplayTreeFindFirstContainingNode vad!

	while (vad@)
		MmVAD_Parent vad -=

		if (vad@ MmVAD_StartVA + @ endva@ >=)
			// we're at the end of the range, no more to check.

			break
		end

		if (vad@ MmVAD_Flags + @ MMVADFLAG_NOCOMMIT &)
			// this VAD maps an MMIO range, check if it overlaps our checked
			// range.

			if (endva@ vad@ MmVAD_StartVA + @ >)
				if (startva@ vad@ MmVAD_EndVA + @ <)
					// it does overlap.

					STATUS_OVERLAPS_MMIO ok!

					return
				end
			end
		end

		vad@ MmVAD_Parent + // node
		ExSplayTreeNodeNext vad!
	end

	0 ok!
end