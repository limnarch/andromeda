//
// Implements Virtual Address Descriptor (VAD) management routines.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

// routines for creating, destroying, and manipulating
// Virtual Address Descriptors (VADs).

fn MmVADCreate { startva endva prot offset processobject sectionobject quotablock -- vad ok }
	// allocates a VAD structure.
	// references the section object, and the quotablock if applicable.

	auto qcharge
	MmVAD_SIZEOF MmChargeBytesGet qcharge!

	qcharge@ // charge
	quotablock@ // quotablock
	MmQuotaBlockCharge ok!

	if (ok@)
		return
	end

	MmVAD_SIZEOF // bytes
	'nVAD' // tag
	CANBLOCK // flags
	MmAllocWithTag ok! vad!

	if (ok@)
		qcharge@ // charge
		quotablock@ // quotablock
		MmQuotaBlockUncharge

		return
	end

	if (prot@ PAGEACCESS_WRITECOPY &)
		// charge vm quota for this VAD because it has the potential to
		// allocate lots of anonymous pages via COW.

		endva@ startva@ - // charge
		quotablock@ // quotablock
		MmQuotaBlockChargeVM ok!

		if (ok@)
			qcharge@ // charge
			quotablock@ // quotablock
			MmQuotaBlockUncharge

			return
		end

		endva@ startva@ - vad@ MmVAD_ChargeVMQuota + !
	end else
		0 vad@ MmVAD_ChargeVMQuota + !
	end

	quotablock@ MmQuotaBlockReference

	sectionobject@ ObObjectReferenceByPointer drop

	sectionobject@ vad@ MmVAD_SectionObject + !
	offset@ vad@ MmVAD_OffsetInSection + !

	0 vad@ MmVAD_Next + !
	0 vad@ MmVAD_Prev + !

	0 vad@ MmVAD_LRUNext + !
	0 vad@ MmVAD_LRUPrev + !

	startva@ vad@ MmVAD_StartVA + !
	endva@ vad@ MmVAD_EndVA + !
	0 vad@ MmVAD_FurthestExtentMapped + !
	prot@ vad@ MmVAD_PageProtection + !
	quotablock@ vad@ MmVAD_QuotaBlock + !
	processobject@ vad@ MmVAD_ProcessObject + !

	0 vad@ MmVAD_COWCount + !
end

fn MmVADListLock { processobject -- ok }
	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	processobject@ PsProcess_VADListMutex + // object
	KeThreadWaitForObject ok!
end

fn MmVADListTryLock { processobject -- ok }
	KERNELMODE // waitmode
	0 // alertable
	0 // timeout
	processobject@ PsProcess_VADListMutex + // object
	KeThreadWaitForObject ok!
end

fn MmVADListIsLocked { processobject -- locked }
	processobject@ PsProcess_VADListMutex + // mutex
	KeMutexIsLocked locked!
end

fn MmVADListUnlock { processobject -- }
	0 // abandon
	processobject@ PsProcess_VADListMutex + // mutex
	KeMutexRelease drop
end

fn MmVADFind { vaddr length mustbestart processobject -- vad ok }
	// locate the VAD containing the given virtual address. if mustbestart is
	// true, then the virtual address must be at the start of the VAD, and the
	// length must match the length of the VAD, or else an error is returned.
	// if it is false, the length argument is completely ignored.

	// assumes the caller locked the process VAD list.

	0 ok!

	processobject@ PsProcess_VADListLRUHead + @ vad!

	auto searches
	0 searches!

	while (vad@)
		if (vaddr@ vad@ MmVAD_StartVA + @ >=)
			if (vaddr@ vad@ MmVAD_EndVA + @ <)
				// found it

				if (mustbestart@)
					if (vad@ MmVAD_StartVA + @ vaddr@ ~=)
						STATUS_BAD_ADDRESS ok!

						return
					end

					if (vad@ MmVAD_EndVA + @ vad@ MmVAD_StartVA + @ - length@ ~=)
						STATUS_BAD_ADDRESS ok!

						return
					end
				end

				if (processobject@ PsProcess_VADListLRUHead + @ vad@ ~=)
					// remove from LRU list

					auto n
					vad@ MmVAD_LRUNext + @ n!

					if (n@)
						vad@ MmVAD_LRUPrev + @ n@ MmVAD_LRUPrev + !
					end

					vad@ MmVAD_LRUPrev + @ n!

					if (n@)
						vad@ MmVAD_LRUNext + @ n@ MmVAD_LRUNext + !
					end

					// reinsert at head of LRU list

					processobject@ PsProcess_VADListLRUHead + @ n!

					if (n@)
						vad@ n@ MmVAD_LRUPrev + !
					end

					0 vad@ MmVAD_LRUPrev + !
					n@ vad@ MmVAD_LRUNext + !
					vad@ processobject@ PsProcess_VADListLRUHead + !
				end

				return
			end
		end

		vad@ MmVAD_LRUNext + @ vad!
	end

	STATUS_BAD_ADDRESS ok!
end

fn MmVADFindAndMapFreeRegion { viewsize startva fixedva pageprotection sectionoffset sectionobject processobject -- realva ok }
	// find a fitting region with a preferred virtual address of startva.
	// if fixedva is true, then *only* this virtual address can be used; if
	// it is not available an error will be returned.
	// this region must be completely empty.

	auto endva
	// no overflow check, caller should have done that
	startva@ viewsize@ + endva!

	// stores last VAD that can hold the view after it.
	// -1 means no space available, 0 means very start
	auto lastsufficientvad
	-1 lastsufficientvad!

	auto lastvad
	0 lastvad!

	auto lastend
	PAGESIZE lastend!

	0 realva!

	processobject@ MmVADListLock ok!

	if (ok@)
		return
	end

	auto vad
	processobject@ PsProcess_VADListHead + @ vad!

	while (vad@)
		if (fixedva@ ~~)
			if (vad@ MmVAD_StartVA + @ lastend@ - viewsize@ >=)
				// the last space is big enough

				lastend@ realva!
				lastvad@ lastsufficientvad!

				if (startva@ ~~)
					// no startva preference, use it
					break
				end elseif (lastend@ startva@ >=)
					// there's a startva preference but we already went past it
					// so just roll with this
					break
				end
			end
		end

		if (vad@ MmVAD_StartVA + @ endva@ >=)
			if (startva@ lastend@ >=)
				// found our preferred address!
				startva@ realva!
				lastvad@ lastsufficientvad!
				break
			end elseif (fixedva@)
				// this VAD begins after our requested region, which means it
				// either lies directly behind this VAD or doesn't exist.
				// this startva was mandatory...

				processobject@ MmVADListUnlock

				STATUS_UNAVAILABLE_ADDRESS ok!

				return
			end
		end

		vad@ MmVAD_EndVA + @ lastend!
		vad@ lastvad!
		vad@ MmVAD_Next + @ vad!
	end

	if (lastsufficientvad@ -1 ==)
		// see if it can fit in the end

		if (fixedva@)
			// skip a check against MMHIGHESTUSERADDRESS because endva should
			// have been sanity checked against it already by the caller

			if (startva@ lastend@ >=)
				// found a space!
				startva@ realva!
				lastvad@ lastsufficientvad!
			end
		end elseif (MMHIGHESTUSERADDRESS 1 + lastend@ - viewsize@ >=)
			// fits!
			lastend@ realva!
			lastvad@ lastsufficientvad!
		end

		if (lastsufficientvad@ -1 ==)
			processobject@ MmVADListUnlock

			// still -1, didn't fit anywhere!

			STATUS_UNAVAILABLE_ADDRESS ok!

			return
		end
	end

	// create the VAD for this mapping and insert it in the list just after
	// lastsufficientvad (or before the head of the list if lastsufficientvad
	// is 0)

	realva@ // startva
	realva@ viewsize@ + // endva
	pageprotection@ // prot
	sectionoffset@ // offset
	processobject@ // processobject
	sectionobject@ // sectionobject
	processobject@ PsProcess_QuotaBlock + @ // quotablock
	MmVADCreate ok! vad!
	
	if (ok@)
		processobject@ MmVADListUnlock

		return
	end

	auto h

	if (lastsufficientvad@ ~~)
		// insert at head

		processobject@ PsProcess_VADListHead + @ h!

		if (h@)
			vad@ h@ MmVAD_Prev + !
			h@ vad@ MmVAD_Next + !
		end else
			vad@ processobject@ PsProcess_VADListTail + !
		end

		vad@ processobject@ PsProcess_VADListHead + !
	end else
		// insert ahead of given VAD

		lastsufficientvad@ MmVAD_Next + @ h!

		if (h@)
			vad@ h@ MmVAD_Prev + !
			h@ vad@ MmVAD_Next + !
		end else
			vad@ processobject@ PsProcess_VADListTail + !
		end

		lastsufficientvad@ vad@ MmVAD_Prev + !
		vad@ lastsufficientvad@ MmVAD_Next + !
	end

	// insert at head of LRU list

	processobject@ PsProcess_VADListLRUHead + @ h!

	if (h@)
		vad@ h@ MmVAD_LRUPrev + !
		h@ vad@ MmVAD_LRUNext + !
	end

	vad@ processobject@ PsProcess_VADListLRUHead + !

	if (vad@ MmVAD_SectionObject + @ MmSection_NoCommit + @)
		1 processobject@ PsProcess_MappedMMIOCount + +=
	end

	processobject@ MmVADListUnlock
end

fn MmVADUnmap { vad processobject -- }
	// assumes the caller locked the process VAD list.

	// unmap all the pages associated with the VAD, then remove it from the
	// process VAD list and destroy it.

	if (DEBUGCHECKS)
		if (KeThreadCurrent@ KeThread_IgnoreKill + @ ~~)
			"MmVADUnmap: could be killed\n" KeCrash
		end
	end

	auto pdir
	processobject@ PsProcess_PCB + KeProcess_PageDirectory + @ pdir!

	auto asid
	processobject@ PsProcess_PCB + KeProcess_ASID + @ asid!

	auto vaddr
	vad@ MmVAD_StartVA + @ vaddr!

	auto max
	// only unmap up to the highest vaddr that was ever faulted in, as an
	// optimization.
	vad@ MmVAD_FurthestExtentMapped + @ max!

	if (DEBUGCHECKS)
		if (vaddr@ PAGEOFFSETMASK &)
			vaddr@ "MmVADUnmap: vaddr wasn't page-aligned (0x%08x)\n" KeCrash
		end

		if (max@ PAGEOFFSETMASK &)
			max@ "MmVADUnmap: max wasn't page-aligned (0x%08x)\n" KeCrash
		end

		if (vaddr@ MMHIGHESTUSERADDRESS >)
			vaddr@ "MmVADUnmap: vaddr > MMHIGHESTUSERADDRESS (0x%08x)\n" KeCrash
		end
	end

	auto commitcharge
	vad@ MmVAD_SectionObject + @ MmSection_NoCommit + @ ~~ commitcharge!

	if (commitcharge@)
		processobject@ MmWorkingSetLock drop

		vad@ MmVAD_StartVA + @ // startva
		vad@ MmVAD_EndVA + @ // endva
		processobject@ // process
		MmWorkingSetTrimRange

		processobject@ MmWorkingSetUnlock
	end

	auto ok

	auto phyaddr
	auto pteaddr
	auto flags
	auto pte

	auto pfdbe

	if (vad@ MmVAD_ChargeVMQuota + @ commitcharge@ ~~ ||)
		// this means that the VAD is or was mapped COW. we need to traverse
		// the page tables to find transition and swap PTEs to free.

		// also we need to traverse the page tables when its a mapped
		// character device.

		while (vaddr@ max@ <=)
			auto ipl
			IPLDPC KeIPLRaise ipl!

			vaddr@ // vaddr
			pdir@ // pagemap
			MmVirtualtoPTEAddress ok! pteaddr!

			if (ok@ ~~)
				pteaddr@@ pte!

				0 // phyaddr
				0 // flags
				vaddr@ // vaddr
				pteaddr@ // pteaddr
				asid@ // asid
				MmPTEUpdate ok! flags! phyaddr!

				if (vad@ MmVAD_ChargeVMQuota + @)
					if (DEBUGCHECKS)
						if (flags@ PTE_V &)
							"MmVADUnmap: valid PTE found despite clearing working set\n" KeCrash
						end
					end

					if (pte@ PTE_INSWAP &)
						// free COW page in swap

						ipl@ KeIPLLower

						pte@ PAGESHIFT >> IOSwapPageFree
					end elseif (pte@ PTE_TRANSITION &)
						// free COW page

						pte@ PAGENUMBERMASK & phyaddr!

						phyaddr@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!
						pfdbe@ MmEvictablePageReference drop
						pfdbe@ MmEvictablePageDelete

						1 MmAnonymousPageCount -=

						ipl@ KeIPLLower

						if (pfdbe@ MmPageFrameEntryAnonymous_SwapPageNumber + @ 0 s>=)
							pfdbe@ MmPageFrameEntryAnonymous_SwapPageNumber + @ IOSwapPageFree
						end

						pfdbe@ MmEvictablePageDereference drop
					end else
						ipl@ KeIPLLower
					end
				end else
					ipl@ KeIPLLower
				end

				if (pte@)
					// there was a PTE containing some information, so delete it.

					pteaddr@ // pteaddr
					vaddr@ // vaddr
					pdir@ // pagemap
					MmPTEDelete drop
				end
			end else
				ipl@ KeIPLLower
			end

			PAGESIZE vaddr +=
		end
	end

	// remove from VAD list

	auto n
	vad@ MmVAD_Next + @ n!

	if (n@)
		vad@ MmVAD_Prev + @ n@ MmVAD_Prev + !
	end else // no next means we were the tail
		vad@ MmVAD_Prev + @ processobject@ PsProcess_VADListTail + !
	end

	vad@ MmVAD_Prev + @ n!

	if (n@)
		vad@ MmVAD_Next + @ n@ MmVAD_Next + !
	end else // no prev means we were the head
		vad@ MmVAD_Next + @ processobject@ PsProcess_VADListHead + !
	end

	// remove from LRU list

	vad@ MmVAD_LRUNext + @ n!

	if (n@)
		vad@ MmVAD_LRUPrev + @ n@ MmVAD_LRUPrev + !
	end

	vad@ MmVAD_LRUPrev + @ n!

	if (n@)
		vad@ MmVAD_LRUNext + @ n@ MmVAD_LRUNext + !
	end else
		// no prev means we were the head
		vad@ MmVAD_LRUNext + @ processobject@ PsProcess_VADListLRUHead + !
	end

	// uncharge quota

	auto quotablock
	vad@ MmVAD_QuotaBlock + @ quotablock!

	MmVAD_SIZEOF MmChargeBytesGet // charge
	quotablock@ // quotablock
	MmQuotaBlockUncharge

	if (vad@ MmVAD_ChargeVMQuota + @)
		vad@ MmVAD_ChargeVMQuota + @ // charge
		quotablock@ // quotablock
		MmQuotaBlockUnchargeVM
	end

	quotablock@ MmQuotaBlockDereference

	if (vad@ MmVAD_SectionObject + @ MmSection_NoCommit + @)
		1 processobject@ PsProcess_MappedMMIOCount + -=
	end

	auto sectionobject
	vad@ MmVAD_SectionObject + @ sectionobject!

	sectionobject@ MmSectionUnprepare
	sectionobject@ ObObjectDereferenceByPointer drop

	vad@ MmFree
end

fn MmVADListCheckRange { startva endva process -- ok }
	// assumes the caller locked the process VAD list.

	// check to ensure that there aren't any VADs corresponding to memory-
	// -mapped devices overlapping the given range.

	auto vad
	process@ PsProcess_VADListHead + @ vad!

	while (vad@)
		if (vad@ MmVAD_StartVA + @ endva@ >=)
			// we're at the end of the range, no more to check.

			break
		end

		if (vad@ MmVAD_SectionObject + @ MmSection_NoCommit + @)
			// this VAD maps an MMIO range, check if it overlaps our checked
			// range.

			if (endva@ vad@ MmVAD_StartVA + @ >)
				if (startva@ vad@ MmVAD_EndVA + @ <)
					// it does overlap.

					STATUS_OVERLAPS_MMIO ok!

					return
				end
			end
		end

		vad@ MmVAD_Next + @ vad!
	end

	0 ok!
end