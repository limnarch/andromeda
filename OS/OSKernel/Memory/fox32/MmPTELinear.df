//
// Implements page table entry (PTE) management for the fox32 architecture.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OSStatus.h"

extern HALfox32TLBFlush { vpn -- }

fn MmPTECreate { vaddr -- pteaddr ok }
	// create an empty PTE for the vaddr in the current process.
	// if the page table exists, it is referenced. otherwise it is created and
	// initialized with a refcount of 1.
	// assumes VAD list mutex is held.

	vaddr@ PAGESHIFT >> 2 << PAGETABLE + pteaddr!

	0 ok!

	auto process
	KeProcessCurrent process!

	auto pagemap
	process@ KeProcess_PageDirectory + @ pagemap!

	auto ptecount
	auto pfdbe
	auto ptr

	auto pdeaddr
	vaddr@ 22 >> 2 << PAGEDIRECTORY + pdeaddr!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto pde
	pdeaddr@@ pde!

	if (pde@ ~~)
		// need to allocate this page table.

		ipl@ KeIPLLower

		0 // pri
		vaddr@ // vaddr
		process@ // process
		MmProcessPTECountGet ok! ptecount!

		if (ok@)
			return
		end

		// private page prototype PTEs are physical addresses.

		auto pfn

		pagemap@ vaddr@ 22 >> 2 << + // pte
		ZEROMUST // priority
		MmAnonymousPageAlloc ok! pfn! pfdbe!

		if (ok@)
			return
		end

		1 ptecount@ si
		ptecount@ pfdbe@ MmPageFrameEntryPageTable_PTECountTableEntry + !
		0 pfdbe@ MmPageFrameEntryPageTable_HoldCount + !

		pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_PRIVATE |
		pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb

		// create a transition PTE so we can fault this new page table in.

		pfn@ PAGESHIFT << PTE_TRANSITION | pdeaddr@!

		pagemap@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ +
		MmEvictablePageReference drop

		// put the PTE in the process's working set by probing it.

		auto probe
		pteaddr@@ probe!
	end else
		if (DEBUGCHECKS)
			if (pde@ PTE_V & ~~)
				"MmPTECreate: PDE not valid\n" KeCrash
			end
		end

		pde@ 12 >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

		if (DEBUGCHECKS)
			if (pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi ~~)
				"MmPTECreate: page table had no references\n" KeCrash
			end
		end

		pfdbe@ MmPageFrameEntryPageTable_PTECountTableEntry + @ gi 1 +
		pfdbe@ MmPageFrameEntryPageTable_PTECountTableEntry + @ si

		pfdbe@ MmEvictablePageReference drop

		ipl@ KeIPLLower
	end

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED & ~~)
		pfdbe@ // pfdbe
		0 // process
		MmEvictablePageModify
	end
end

fn MmPTEDelete { deref pteaddr -- }
	// delete a PTE and dereference the page table.
	// free the page table if its PTE count hits 0.
	// assume the page table is pinned.

	auto vaddr
	pteaddr@ PAGETABLE - 2 >> PAGESHIFT << vaddr!

	auto ptpfdbe
	pteaddr@ MmVirtualToPFDBE ptpfdbe!

	auto ptecount
	ptpfdbe@ MmPageFrameEntryPageTable_PTECountTableEntry + @ ptecount!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto oldcount
	ptecount@ gi oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ ~~)
			"MmPTEDelete: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - ptecount@ si

	if (oldcount@ 1 ==)
		// last PTE. free the page table.

		if (ptpfdbe@ MmPageFrameEntryPageTable_HoldCount + @ ~~)
			auto pagemap
			ptpfdbe@ MmPageFrameEntryAnonymous_PrototypePTE + @ pagemap!

			auto pdpfdbe
			pagemap@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pdpfdbe!

			// force the page table out from the process working set.

			vaddr@ 22 >> PAGESHIFT << PAGETABLE + // vaddr
			ptpfdbe@ // pfdbe
			pdpfdbe@ MmPageFrameEntryAnonymous_Process + @ // process
			MmWorkingSetEntryForceOut

			// zero out the pde for the page table.

			0 vaddr@ 22 >> 2 << PAGEDIRECTORY + !

			ptpfdbe@ MmAnonymousPageDelete

			ipl@ KeIPLLower

			pdpfdbe@ MmEvictablePageDereference drop
		end else
			ipl@ KeIPLLower
		end
	end else
		ipl@ KeIPLLower
	end

	if (deref@)
		ptpfdbe@ MmEvictablePageDereference drop
	end
end

fn MmPTEPin { vaddr -- ptpfdbe pteaddr }
	// pin the page table containing the PTE for the given virtual address,
	// and return the PTE address.

	vaddr@ PAGESHIFT >> 2 << PAGETABLE + pteaddr!

	if (vaddr@ PAGETABLE >= vaddr@ SYSPAGETABLE < &&)
		pteaddr@ MmVirtualToPFDBE ptpfdbe!

		return
	end

	auto ptecount
	auto pfdbe
	auto ptr

	auto pdeaddr
	vaddr@ 22 >> 2 << PAGEDIRECTORY + pdeaddr!

	while (1)
		// loop until the page table is valid.

		auto ipl
		IPLDPC KeIPLRaise ipl!

		auto pde
		pdeaddr@@ pde!

		if (pde@ ~~)
			// no such page table.

			ipl@ KeIPLLower

			0 ptpfdbe!

			return
		end elseif (pde@ PTE_V &)
			// the page table is valid. pin it and return it.

			pde@ 12 >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + ptpfdbe!

			ptpfdbe@ MmEvictablePageReference drop
			1 ptpfdbe@ MmPageFrameEntryPageTable_HoldCount + +=

			ipl@ KeIPLLower

			return
		end else
			ipl@ KeIPLLower

			// the page table is invalid. touch it to cause it to be demand-
			// -paged in.

			auto probe
			pteaddr@@ probe!
		end
	end
end

fn MmPTEUnpin { vaddr ptpfdbe -- }
	if (vaddr@ PAGETABLE >= vaddr@ SYSPAGETABLE < &&)
		return
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto oldcount
	ptpfdbe@ MmPageFrameEntryPageTable_HoldCount + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ ~~)
			"MmPTEUnpin: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - ptpfdbe@ MmPageFrameEntryPageTable_HoldCount + !

	if (oldcount@ 1 ==)
		auto ptecount
		ptpfdbe@ MmPageFrameEntryPageTable_PTECountTableEntry + @ ptecount!

		if (ptecount@ gi ~~)
			// perform deferred deletion of page table

			auto pagemap
			ptpfdbe@ MmPageFrameEntryAnonymous_PrototypePTE + @ pagemap!

			auto pdpfdbe
			pagemap@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pdpfdbe!

			// force the page table out from the process working set.

			vaddr@ 22 >> PAGESHIFT << PAGETABLE + // vaddr
			ptpfdbe@ // pfdbe
			pdpfdbe@ MmPageFrameEntryAnonymous_Process + @ // process
			MmWorkingSetEntryForceOut

			0 vaddr@ 22 >> 2 << PAGEDIRECTORY + !

			ptpfdbe@ MmAnonymousPageDelete

			pdpfdbe@ MmEvictablePageDereference drop
		end
	end

	ipl@ KeIPLLower

	ptpfdbe@ MmEvictablePageDereference drop
end

fn MmVirtualToPhysical { vaddr -- phyaddr }
	auto pte
	vaddr@ PAGESHIFT >> 2 << PAGETABLE + @ pte!

	if (DEBUGCHECKS)
		if (pte@ PTE_V & ~~)
			"MmVirtualToPhysical: invalid PTE\n" KeCrash
		end
	end

	pte@ 12 >> PAGESHIFT << phyaddr!

	vaddr@ PAGEOFFSETMASK & phyaddr +=
end

fn MmVirtualToPFDBE { vaddr -- pfdbe }
	auto pte
	vaddr@ PAGESHIFT >> 2 << PAGETABLE + @ pte!

	if (DEBUGCHECKS)
		if (pte@ PTE_V & ~~)
			"MmVirtualToPFDBE: invalid PTE\n" KeCrash
		end
	end

	pte@ 12 >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!
end

fn MmVirtualtoPTEAddressWithFail { vaddr -- pteaddr ok }
	vaddr@ 22 >> 2 << PAGEDIRECTORY + pteaddr!

	if (pteaddr@@ PTE_V & ~~)
		-1 ok!
		return
	end

	vaddr@ PAGESHIFT >> 2 << PAGETABLE + pteaddr!

	0 ok!
end

fn MmVirtualtoPTEAddressUser { vaddr -- pteaddr }
	// fast path -- use only when you know FOR SURE that the PTE is present,
	// i.e. in working set trimming.

	if (DEBUGCHECKS)
		if (vaddr@ MMHIGHESTUSERADDRESS >)
			vaddr@ "MmVirtualtoPTEAddressUser: used on system address 0x%08x\n" KeCrash
		end
	end

	vaddr@ PAGESHIFT >> 2 << PAGETABLE + pteaddr!
end

fn MmVirtualtoPTEAddress { vaddr -- pteaddr }
	// get the address of a PTE based on a vaddr.

	if (DEBUGCHECKS)
		if (vaddr@ MMLOWESTSYSTEMADDRESS <)
			vaddr@ "MmVirtualtoPTEAddress: used on user address 0x%08x\n" KeCrash
		end
	end

	vaddr@ PAGESHIFT >> 2 << PAGETABLE + pteaddr!
end

fn MmVirtualAddressIsValid { vaddr -- isvalid }
	auto pteaddr
	vaddr@ 22 >> 2 << PAGEDIRECTORY + pteaddr!

	if (pteaddr@@ PTE_V & ~~)
		0 isvalid!
		return
	end

	vaddr@ PAGESHIFT >> 2 << PAGETABLE + pteaddr!

	pteaddr@@ PTE_V & isvalid!
end

fn MmPTEInterpret { pteaddr -- phyaddr flags ok }
	// interpret arch-specific PTE contents into physical address and generic
	// flags. returns -1 if the PTE is not valid.

	0 ok!

	auto pte
	pteaddr@@ pte!

	if (pte@ PTE_V & ~~)
		0 flags!
		-1 ok!
		return
	end

	// fox32 PTEs happen to line up with the generic PTE flags, so
	// just mask those off and return them directly.
	pte@ 3 & flags!
	pte@ 12 >> PAGESHIFT << phyaddr!
end

fn MmPTEUpdateByVirtual { phyaddr flags vaddr -- oldphyaddr oldflags }
	auto pteaddr
	vaddr@ PAGESHIFT >> 2 << PAGETABLE + pteaddr!

	phyaddr@ // phyaddr
	flags@ // flags
	pteaddr@ // pteaddr
	MmPTEUpdate oldflags! oldphyaddr!
end

fn MmPTEIsZero { pte -- iszero }
	if (pte@ ~~)
		1 iszero!
	end elseif (pte@ PTE_KERNEL_ZERO ==)
		1 iszero!
	end else
		0 iszero!
	end
end

fn MmPTEUpdate { phyaddr flags pteaddr -- oldphyaddr oldflags }
	// update a PTE based on a physical address and generic flags. this could
	// do a number of things:

	if (pteaddr@ PAGETABLE < pteaddr@ PAGETABLETOP >= ||)
		phyaddr@ PAGESHIFT >> 12 << flags@ 3 & | pteaddr@!
		return
	end

	auto vaddr
	pteaddr@ PAGETABLE - 2 >> PAGESHIFT << vaddr!

	auto pte
	pteaddr@@ pte!

	pte@ 3 & oldflags!
	pte@ 12 >> PAGESHIFT << oldphyaddr!

	phyaddr@ PAGESHIFT >> 12 << flags@ 3 & | pte!

	pte@ pteaddr@!

	vaddr@ PAGESHIFT >> // vpn
	HALfox32TLBFlush
end

fn MmPTESet { pte pteaddr -- }
	if (pteaddr@ PAGETABLE < pteaddr@ PAGETABLETOP >= ||)
		pte@ pteaddr@!
		return
	end

	auto vaddr
	pteaddr@ PAGETABLE - 2 >> PAGESHIFT << vaddr!

	pte@ pteaddr@!

	vaddr@ PAGESHIFT >> // vpn
	HALfox32TLBFlush
end

fn MmPTEInitializePageTable { vaddr pfdbe process -- }
	auto ptecount

	auto ok

	0 // pri
	vaddr@ PAGETABLE - PAGESHIFT >> 22 << // vaddr
	process@ // process
	MmProcessPTECountGet ok! ptecount!

	if (DEBUGCHECKS)
		if (ok@)
			"MmPTEInitializePageTable\n" KeCrash
		end
	end

	ptecount@ pfdbe@ MmPageFrameEntryPageTable_PTECountTableEntry + !
	0 pfdbe@ MmPageFrameEntryPageTable_HoldCount + !
end

fn MmPTESetDirty { pteaddr -- }
	pteaddr@@ PTE_D | // pte
	pteaddr@ // pteaddr
	MmPTESet
end