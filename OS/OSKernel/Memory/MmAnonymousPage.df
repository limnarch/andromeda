//
// Implements anonymous page management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "MmInternal.h"

var MmAnonymousPageCount 0
public MmAnonymousPageCount

fn (MmEvictionFunction) MiAnonymousEvictionFunction { pfdbe -- }
	auto pte
	pfdbe@ MiPageFrameEntryAnonymous_SwapPTE + @ pte!

	auto ppte
	pfdbe@ MiPageFrameEntryAnonymous_PrototypePTE + @ ppte!

	auto ef
	pfdbe@ MiPageFrameEntryEvictable_EvictionFlagsB + gb ef!

	// remember the location of this page in swap by writing that to the PTE,
	// which may be in a section object's prototype page table in the case of
	// a shared anonymous page, or in the process's page table in the case of
	// a private anonymous page.

	auto ptpfdbe

	if (ef@ MMEVICTFLAG_PRIVATE &)
		// this is a private page. these are tracked in real page tables, so
		// we need to do some accounting with those.

		// private pages have physical prototype PTE pointers, so we
		// have to map the page table in now since it may not belong to
		// this process. note that the page table may actually be the
		// page directory if this pageframe is a page table itself.

		auto qp
		ppte@ MiMapQuickPage qp!

		auto rppte
		qp@ ppte@ PAGEOFFSETMASK & + rppte!

		pte@ rppte@!

		qp@ MiUnmapQuickPage

		if (pfdbe@ MiPageFrameEntryAnonymous_Process + @ PsSystemProcess@ ~=)
			// dereference the page table. this may allow the page table to be
			// swapped out as well.

			ppte@ PAGESHIFT >> MiPageFrameEntry_SIZEOF * MiPageFrameDatabase@ + ptpfdbe!

			ptpfdbe@ MmEvictablePageDereference drop
		end
	end else
		pte@ ppte@!
	end

	1 MmAnonymousPageCount -=
end

fn MiAnonymousPageGet { pteaddr pri -- pfdbe ok }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"MiAnonymousPageGet: ipl != IPLDPC\n" KeCrash
		end
	end

	// caller must set PRIVATE flag in pfdbe if applicable.

	// caller must also set MMEVICTFLAG_MODIFIED and set SwapPageNumber to
	// MMSWAPPAGE_NONE if this isn't a demand-zero page.

	0 // flags
	MMEVICTTYPE_ANON // evictabletype
	pri@ // priority
	MmEvictablePageGet ok! pfdbe!

	if (ok@)
		return
	end

	SWAPPTE_DEMANDZERO pfdbe@ MiPageFrameEntryAnonymous_SwapPTE + !

	pteaddr@ pfdbe@ MiPageFrameEntryAnonymous_PrototypePTE + !

	1 MmAnonymousPageCount KeInterlockedIncrement drop
end

fn MiAnonymousPageAlloc { pteaddr pri -- pfdbe }
	// no error status since this operation is infallible if commit has been
	// charged.

	auto ipl
	IPLDPC KeIPLRaise ipl!

	0 // process
	pri@ CANBLOCK | // priority
	MmPageWait drop drop

	pteaddr@ // pteaddr
	pri@ // pri
	MiAnonymousPageGet drop pfdbe!

	ipl@ KeIPLLower
end

fn MiAnonymousPageDeleteByPTE { deletepte pteaddr vaddr process -- }
	auto pfdbe

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto capturedpte
	pteaddr@@ capturedpte!

	if (capturedpte@ MiPTEIsZero ~~)
		auto deref
		1 deref!

		if (capturedpte@ PTE_V &)
			auto phyaddr
			pteaddr@ MiPTEInterpret drop drop phyaddr!

			phyaddr@ PAGESHIFT >> MiPageFrameEntry_SIZEOF * MiPageFrameDatabase@ + pfdbe!

			// we assume here that there's no associated process, since a
			// process PTE is only valid when it's in the working set, and we
			// ALWAYS trim the range out of the working set before we unmap.

			if (DEBUGCHECKS)
				if (process@)
					"MiAnonymousPageDeleteByPTE: valid page found in process PTE\n" KeCrash
				end
			end

			0 pteaddr@!

			pfdbe@ MmEvictablePageReference drop

			ipl@ KeIPLLower

			pfdbe@ MiAnonymousPageDelete

			pfdbe@ MmEvictablePageDereference drop
		end else
			// clear the PTE to indicate that it is not tracking any page
			// anymore.

			if (process@)
				0 // phyaddr
				0 // flags
				pteaddr@ // pteaddr
				MiPTEUpdate drop drop
			end else
				0 pteaddr@!
			end

			if (capturedpte@ PTE_INSWAP &)
				// this is a page in swap, free it right now.

				ipl@ KeIPLLower

				0 deref!

				capturedpte@ IOSwapPageFreePTE
			end elseif (capturedpte@ PTE_TRANSITION &)
				// TRANSITION bit is set, look up page and figure out what to
				// do with it.

				capturedpte@ PAGENUMBERMASK & PAGESHIFT >> MiPageFrameEntry_SIZEOF * MiPageFrameDatabase@ + pfdbe!

				if (process@)
					// the caller specified a process, so this is a local PTE
					// for sure. we have to check if the page specified by this
					// PTE is PRIVATE or shared. if the page is PRIVATE, then
					// there are two cases here:
					//
					//   1. It has been trimmed from the working set and is
					//      in transition due to being on the standby list.
					//   2. It is currently being paged in by some other
					//      thread.
					//
					// in either case, we want to actually mark the page
					// deleted here. if this is case #1, then this is as simple
					// as it is and we're done. for case #2, this sounds
					// deadly, since the faulting thread will wake up and find
					// the page vanished out from under it. the trick here is
					// that page deletion doesn't actually occur until the
					// refcount drops to zero; all we do here is set a flag.
					// when the faulting thread wakes up, it sees the PTE
					// changed due to us clearing it a little bit ago, and
					// cleans up appropriately; the page is only deleted when
					// the faulting thread drops its reference to it.
					//
					// if the page is shared (non-PRIVATE), then this is
					// always a page that is currently undergoing page-in.
					// the reason is that when a shared page is trimmed from
					// the working set, the PTE is always zeroed out, not set
					// to TRANSITION; so there's only one TRANSITION case for
					// shared pages in local PTEs, which is ongoing page-in.
					// in this case, we actually don't want to do anything to
					// the page, because the page is tracked with a prototype
					// PTE that lives somewhere in a section object, not with
					// our local PTE, so its sufficient to just clear our local
					// PTE to indicate to the faulting thread that it got
					// unmapped, since the section object deletion routine will
					// take care of the page for real later.

					if (pfdbe@ MiPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_PRIVATE &)
						pfdbe@ MmEvictablePageReference drop

						if (pfdbe@ MiPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_IOINPROGRESS &)
							// don't delete the PTE, the faulting thread will
							// do that when it wakes up.

							0 deletepte!
						end

						ipl@ KeIPLLower

						pfdbe@ MiAnonymousPageDelete

						pfdbe@ MmEvictablePageDereference drop
					end else
						ipl@ KeIPLLower

						0 deletepte!
					end
				end else
					// there is no process specified, which means this is a
					// prototype PTE in a section object. in this case, finding
					// a TRANSITION PTE can only mean this page is undergoing
					// page-in. this is sort of an edge case where a mapping of
					// a section object is unmapped by one thread in a process
					// while another is faulting it in, causing the section
					// object to be deleted. read the comment above for why
					// marking the page deleted during that, isn't deadly.

					pfdbe@ MmEvictablePageReference drop

					ipl@ KeIPLLower

					pfdbe@ MiAnonymousPageDelete

					pfdbe@ MmEvictablePageDereference drop
				end
			end elseif (DEBUGCHECKS)
				capturedpte@ "MiAnonymousPageDeleteByPTE: strange PTE %08x\n" KeCrash
			end
		end

		if (deletepte@)
			// there was a PTE containing some information, so delete it.

			deref@ // deref
			pteaddr@ // pteaddr
			MiPTEDelete
		end
	end else
		ipl@ KeIPLLower
	end
end

fn MiAnonymousPageReferenceByPTE { dzpte evictflag refpfdbe process pri vaddr pteaddr localpteaddr -- pfdbe ok }
	// assumes caller already did a MmPageWait and determined that the PTE is
	// not valid if it wants to do its own processing in that case.

	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"MiAnonymousPageReference: ipl != IPLDPC\n" KeCrash
		end
	end

	auto phyaddr

	auto lockprocess
	0 lockprocess!

	if (localpteaddr@)
		if (pri@ SYSTEMSPACE &)
			PsSystemProcess@ lockprocess!
		end else
			KeProcessCurrent lockprocess!
		end

		if (localpteaddr@ -1 ==)
			// -1 is a special value that indicates we want to release locks
			// but we don't actually have a local PTE.

			0 localpteaddr!
		end
	end

	0 ok!

	auto capturedpte
	pteaddr@@ capturedpte!

	if (capturedpte@ PTE_V &)
		// already present, return

		pteaddr@ MiPTEInterpret ok! drop phyaddr!

		phyaddr@ PAGESHIFT >> MiPageFrameEntry_SIZEOF * MiPageFrameDatabase@ + pfdbe!

		pfdbe@ MmEvictablePageReference drop

		1 MmSoftPageFaultCount +=
	end elseif (capturedpte@ dzpte@ ==)
		// demand-zero PTE.

		if (dzpte@ PTE_KERNEL_DEMANDZERO ==)
			pteaddr@ // pte
			FREEFIRST pri@ | // pri
			MiAnonymousPageGet drop pfdbe!
		end else
			pteaddr@ // pte
			ZEROMUST pri@ | // pri
			MiAnonymousPageGet drop pfdbe!
		end

		pfdbe@ MiPageFrameEntryEvictable_EvictionFlagsB + gb evictflag@ | MMEVICTFLAG_MODIFIED |
		pfdbe@ MiPageFrameEntryEvictable_EvictionFlagsB + sb

		dzpte@ pfdbe@ MiPageFrameEntryAnonymous_SwapPTE + !

		1 MmSoftPageFaultCount +=

		if (evictflag@ MMEVICTFLAG_PRIVATE &)
			process@ pfdbe@ MiPageFrameEntryAnonymous_Process + !
			vaddr@ pfdbe@ MiPageFrameEntryAnonymous_VirtualAddress + !

			pfdbe@ MiPageFrameEntryAnonymous_PrototypePTE + @ MmVirtualToPhysical
			pfdbe@ MiPageFrameEntryAnonymous_PrototypePTE + !
		end

		if (refpfdbe@)
			refpfdbe@ MmEvictablePageReference drop
		end

		pfdbe@ MmPFDBEToPhysicalAddress phyaddr!

		// unconditionally setting the PTE writable is okay since this is
		// either a private fault where we're writing the PTE directly here,
		// in which case it will definitely be writable, or this is a shared
		// anon fault where we're writing the prototype PTE, in which case
		// these PTE flags are irrelevant.

		phyaddr@ // phyaddr
		PTE_V PTE_W | PTE_D | // flags
		pteaddr@ // pteaddr
		MiPTEUpdate drop drop
	end elseif (capturedpte@ PTE_TRANSITION &)
		// page is in transition.
		// if IO is in progress, wait for that to finish.

		if (DEBUGCHECKS)
			if (capturedpte@ PTE_KERNELSTACK &)
				if (process@)
					"Faulted on a TRANSITION system page\n" KeCrash
				end
			end
		end

		capturedpte@ PAGENUMBERMASK & phyaddr!
		phyaddr@ PAGESHIFT >> MiPageFrameEntry_SIZEOF * MiPageFrameDatabase@ + pfdbe!

		pfdbe@ MmEvictablePageReference drop

		if (pfdbe@ MiPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_IOINPROGRESS &)
			// IOINPROGRESS flag is set, so wait for IO completion.

			lockprocess@ // process
			pri@ CANBLOCK | // pri
			pfdbe@ // pfdbe
			MmEvictablePageWait ok!

			pfdbe@ MmEvictablePageDereference drop

			if (ok@)
				return
			end

			// say to refault so that the caller doesn't insert into the
			// working set since the owner of this IO is going to do that.

			STATUS_REFAULT ok!
		end elseif (vaddr@ PAGETABLE >= vaddr@ SYSPAGETABLE < &&)
			// this is a page table, so make it writable now, since we can't
			// tolerate taking write faults on PTEs.

			phyaddr@ // phyaddr
			PTE_V PTE_W | PTE_D | // flags
			pteaddr@ // pteaddr
			MiPTEUpdate drop drop
		end else
			phyaddr@ // phyaddr
			PTE_V // flags
			pteaddr@ // pteaddr
			MiPTEUpdate drop drop
		end
	end elseif (capturedpte@ PTE_INSWAP &)
		// page was written to swap and then evicted. we are responsible
		// for bringing it in now.

		if (DEBUGCHECKS)
			if (capturedpte@ PTE_KERNELSTACK &)
				if (process@)
					"Faulted on an INSWAP system page\n" KeCrash
				end
			end
		end

		pteaddr@ // pte
		pri@ FREEFIRST | // pri
		MiAnonymousPageGet drop pfdbe!

		pfdbe@ MiPageFrameEntryEvictable_EvictionFlagsB + gb evictflag@ |
		pfdbe@ MiPageFrameEntryEvictable_EvictionFlagsB + sb

		capturedpte@ pfdbe@ MiPageFrameEntryAnonymous_SwapPTE + !

		if (refpfdbe@)
			// caller gave us a PFDBE to reference in the case that the PTE
			// was INSWAP; the PFDBE is usually that of a page table.

			refpfdbe@ MmEvictablePageReference drop
		end

		pfdbe@ MmPFDBEToPhysicalAddress phyaddr!

		// mark the page as undergoing paging IO, so that collided threads can
		// wait for us to finish.

		pfdbe@ MmEvictablePageStartIO

		// create a transition PTE to indicate the ongoing IO with.

		auto transitionpte

		if (process@ PsSystemProcess@ ==)
			phyaddr@ PTE_TRANSITION | PTE_TLBHACK | transitionpte!
		end else
			phyaddr@ PTE_TRANSITION | transitionpte!
		end

		// set the transition PTE at both the real PTE (which may be either a
		// prototype PTE or a page table PTE) and the local PTE (which is only
		// ever a page table PTE).

		transitionpte@ pteaddr@!

		auto capturedlocalpte

		if (localpteaddr@)
			localpteaddr@@ capturedlocalpte!
			transitionpte@ localpteaddr@!
		end

		IPLAPC KeIPLLower

		if (evictflag@ MMEVICTFLAG_PRIVATE &)
			// private pages need some special treatment.

			if (vaddr@ PAGETABLE >= vaddr@ SYSPAGETABLE < &&)
				// page table pages need special initialization.

				vaddr@ // vaddr
				pfdbe@ // pfdbe
				process@ // process
				MiPTEInitializePageTable
			end else
				process@ pfdbe@ MiPageFrameEntryAnonymous_Process + !
				vaddr@ pfdbe@ MiPageFrameEntryAnonymous_VirtualAddress + !
			end

			// the prototype PTE address recorded in a private page is a
			// physical address in order to allow access from any context via
			// quick mapping, to allow reclamation to work correctly, since
			// these PTEs are located in page tables.

			pfdbe@ MiPageFrameEntryAnonymous_PrototypePTE + @ MmVirtualToPhysical
			pfdbe@ MiPageFrameEntryAnonymous_PrototypePTE + !
		end

		if (lockprocess@)
			lockprocess@ MmVADListUnlock
		end

		auto kflags
		IOKFLAG_PAGEIN kflags!

		if (pri@ SYSTEMSPACE &)
			IOKFLAG_SYSSPC kflags |=
		end

		// issue the page-in IO.
		// TODO streamline and unroll a lot of this stuff to avoid unnecessary
		// violence to the icache and give the ability to cluster page-ins in
		// a more general manner, which will allow reducing overhead of things
		// like VAD lookup and mutex locking...

		kflags@ // kflags
		pfdbe@ // pfdbe
		capturedpte@ // pte
		IOSwapPageReadPTE ok!

		if (lockprocess@)
			0 // alertable
			lockprocess@ // processobject
			MmVADListLock drop
		end

		IPLDPC KeIPLRaise drop

		pfdbe@ MmEvictablePageSatisfy

		if (ok@ ~~)
			// check that the PTE didn't get deleted.

			if (pteaddr@@ transitionpte@ ~=)
				// it got deleted. do NOT delete the pfdbe since it was
				// deleted already.

				STATUS_REFAULT ok!
			end

			if (localpteaddr@)
				if (localpteaddr@@ transitionpte@ ~=)
					// the local PTE was deleted, same basic case.

					STATUS_REFAULT ok!
				end
			end
		end elseif (pteaddr@@ transitionpte@ ==)
			// the PTE didn't get deleted, but there was an error, so reset it.
			// delete the pfdbe since that hasn't been done.

			// prevent the swap page from being freed.

			SWAPPTE_DEMANDZERO pfdbe@ MiPageFrameEntryAnonymous_SwapPTE + !

			// restore the old PTE.

			capturedpte@ pteaddr@!

			// mark the pfdbe for deletion.

			pfdbe@ MiAnonymousPageDelete
		end

		if (ok@)
			// in the case of any error, reset the local PTE.

			if (localpteaddr@)
				if (localpteaddr@@ transitionpte@ ==)
					capturedlocalpte@ pteaddr@!
				end
			end

			// if there was a pfdbe we were asked to reference, dereference
			// it since we didn't accomplish anything here.

			if (refpfdbe@)
				refpfdbe@ MmEvictablePageDereference drop
			end

			// dereference the pfdbe. if it was marked for deletion, this is
			// where it gets put on the free list.

			pfdbe@ MmEvictablePageDereference drop

			return
		end

		// we successfully performed a page-in, so increment the hard page
		// fault count.

		1 MmHardPageFaultCount +=

		// update the PTE to reflect the new location of the page in physical
		// memory.

		if (vaddr@ PAGETABLE >= vaddr@ SYSPAGETABLE < &&)
			// this is a page table, so make it writable now, since we can't
			// tolerate taking write faults on PTEs.

			phyaddr@ // phyaddr
			PTE_V PTE_W | PTE_D | // flags
			pteaddr@ // pteaddr
			MiPTEUpdate drop drop
		end else
			phyaddr@ // phyaddr
			PTE_V // flags
			pteaddr@ // pteaddr
			MiPTEUpdate drop drop
		end
	end elseif (DEBUGCHECKS)
		capturedpte@ "MiAnonymousPageReference: odd PTE %x\n" KeCrash
	end
end

fn MiAnonymousPageDelete { pfdbe -- }
	pfdbe@ MmEvictablePageDelete

	-1 MmAnonymousPageCount KeInterlockedIncrement drop

	if (pfdbe@ MiPageFrameEntryAnonymous_SwapPTE + @ PTE_INSWAP &)
		// free in swap
		pfdbe@ MiPageFrameEntryAnonymous_SwapPTE + @ IOSwapPageFreePTE
	end
end