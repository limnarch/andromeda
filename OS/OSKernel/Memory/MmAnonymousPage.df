//
// Implements anonymous page management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

var MmAnonymousPageCount 0
public MmAnonymousPageCount

fn (MmEvictionFunction) MmAnonymousEvictionFunction { pfdbe -- }
	auto pte
	pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + @ pte!

	auto ppte
	pfdbe@ MmPageFrameEntryAnonymous_PrototypePTE + @ ppte!

	auto ef
	pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb ef!

	pte@ ppte@!

	auto ptpfdbe

	if (ef@ MMEVICTFLAG_PRIVATE &)
		if (pfdbe@ MmPageFrameEntryAnonymous_Process + @ PsSystemProcess@ ~=)
			// dereference the page table.

			ppte@ IDENTITYSPACEMASK & PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + ptpfdbe!

			if (pte@ SWAPPTE_DEMANDZERO ==)
				// let it be known that this IF statement was the fix to a bug
				// that took me 2 weeks to resolve.

				1 // deref
				ppte@ // pteaddr
				pfdbe@ MmPageFrameEntryAnonymous_VirtualAddress + @ // vaddr
				pfdbe@ MmPageFrameEntryAnonymous_Process + @ // process
				MmPTEDelete drop
			end else
				ptpfdbe@ MmEvictablePageDereference drop
			end
		end
	end elseif (ef@ MMEVICTFLAG_PAGETABLE &)
		ppte@ IDENTITYSPACEMASK & PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + ptpfdbe!
		ptpfdbe@ MmEvictablePageDereference drop
	end

	1 MmAnonymousPageCount -=
end

fn MmAnonymousPageGet { pte pri -- pfdbe pfn ok }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"MmAnonymousPageGet: ipl != IPLDPC\n" KeCrash
		end
	end

	// caller must set COW flag in pfdbe if applicable.

	// caller must also set MMEVICTFLAG_MODIFIED and set SwapPageNumber to
	// MMSWAPPAGE_NONE if this isn't a demand-zero page.

	MMEVICTFLAG_WORKINGSET // flags
	MMEVICTTYPE_ANON // evictabletype
	pri@ // priority
	MmEvictablePageGet ok! pfn! pfdbe!

	if (ok@)
		return
	end

	SWAPPTE_DEMANDZERO pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + !

	pte@ pfdbe@ MmPageFrameEntryAnonymous_PrototypePTE + !

	auto rs
	HALCPUInterruptDisable rs!
	1 MmAnonymousPageCount +=
	rs@ HALCPUInterruptRestore
end

fn MmAnonymousPageAlloc { pte pri -- pfdbe pfn ok }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	pri@ CANBLOCK |
	MmPageWait ok! drop

	if (ok@)
		ipl@ KeIPLLower
		return
	end

	pte@ pri@ MmAnonymousPageGet ok! pfn! pfdbe!

	ipl@ KeIPLLower
end

fn MmAnonymousSwapIn { pri pte pno -- pfdbe pfn ok }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"MmAnonymousSwapIn: ipl != IPLDPC\n" KeCrash
		end
	end

	pte@ // pte
	pri@ FREEFIRST | // pri
	MmAnonymousPageGet ok! pfn! pfdbe!

	IPLLOW KeIPLLower

	if (ok@)
		return
	end

	auto kflags
	IOKFLAG_PAGEIN kflags!

	if (pri@ TRYFOREVER &)
		IOKFLAG_SWAPIN kflags |=
	end

	kflags@ // kflags
	pfn@ PAGESHIFT << IDENTITYSPACE | // pageframe
	pte@@ // pte
	IOSwapPageReadPTE ok!

	if (ok@)
		auto ipl
		IPLDPC KeIPLRaise ipl!

		pfdbe@ MmEvictablePageDereference drop

		ipl@ // ipl
		pfdbe@ // pfdbe
		MmAnonymousPageDelete

		return
	end

	pte@@ pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + !

	pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED ~ &
	pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb
end

fn MmAnonymousPageDelete { ipl pfdbe -- }
	pfdbe@ MmEvictablePageReference drop
	pfdbe@ MmEvictablePageDelete

	1 MmAnonymousPageCount -=

	ipl@ KeIPLLower

	if (pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + @ PTE_INSWAP &)
		// free in swap
		pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + @ IOSwapPageFreePTE
	end

	pfdbe@ MmEvictablePageDereference drop
end