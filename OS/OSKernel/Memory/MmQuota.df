//
// Implements job quota management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

var MmQuotaBlockListHead 0

fn MmQuotaBlockGetByUID { uid forkquotablock -- quotablock ok }
	0 ok!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	MmQuotaBlockListHead@ quotablock!

	while (quotablock@)
		if (quotablock@ MmQuotaBlock_UID + @ uid@ ==)
			quotablock@ MmQuotaBlockReference

			ipl@ KeIPLLower
			
			return
		end

		quotablock@ MmQuotaBlock_Next + @ quotablock!
	end

	ipl@ KeIPLLower

	// not found, fork the forkquotablock to create one for this UID

	if (forkquotablock@ ~~)
		-1 ok!
		return
	end

	uid@ // uid
	forkquotablock@ // quotablock
	MmQuotaBlockFork ok! quotablock!
end

fn MmQuotaBlockCreate { uid wsmax pghpmax vmmax heapmax -- quotablock ok }
	fnsection "PAGE$text"

	MmQuotaBlock_SIZEOF // bytes
	'Quot' // tag
	CANBLOCK // flags
	MmAllocWithTag ok! quotablock!

	if (ok@)
		return
	end

	uid@ wsmax@ pghpmax@ vmmax@ heapmax@ quotablock@ MmQuotaBlockInitialize ok!
end

fn MmQuotaBlockFork { uid quotablock -- newquotablock ok }
	fnsection "PAGE$text"

	MmQuotaBlock_SIZEOF // bytes
	'Quot' // tag
	CANBLOCK // flags
	MmAllocWithTag ok! newquotablock!

	if (ok@)
		return
	end

	uid@ // uid
	quotablock@ MmQuotaBlock_WorkingSetMax + @ // wsmax
	quotablock@ MmQuotaBlock_PagedPoolMax + @ // pghpmax
	quotablock@ MmQuotaBlock_VMMax + @ // vmmax
	quotablock@ MmQuotaBlock_PoolMax + @ // heapmax
	newquotablock@ // quotablock
	MmQuotaBlockInitialize ok!
end

fn MmQuotaBlockInitialize { uid wsmax pghpmax vmmax heapmax quotablock -- ok }
	0 ok!

	1 quotablock@ MmQuotaBlock_References + !
	uid@ quotablock@ MmQuotaBlock_UID + !

	0 quotablock@ MmQuotaBlock_PoolUsed + !
	heapmax@ quotablock@ MmQuotaBlock_PoolMax + !

	0 quotablock@ MmQuotaBlock_VMUsed + !
	vmmax@ quotablock@ MmQuotaBlock_VMMax + !

	0 quotablock@ MmQuotaBlock_PagedPoolUsed + !
	pghpmax@ quotablock@ MmQuotaBlock_PagedPoolMax + !

	0 quotablock@ MmQuotaBlock_WorkingSetUsed + !
	wsmax@ quotablock@ MmQuotaBlock_WorkingSetMax + !

	0 quotablock@ MmQuotaBlock_Prev + !

	auto rs
	HALCPUInterruptDisable rs!

	auto h
	MmQuotaBlockListHead@ h!

	h@ quotablock@ MmQuotaBlock_Next + !

	if (h@)
		quotablock@ h@ MmQuotaBlock_Prev + !
	end

	quotablock@ MmQuotaBlockListHead!

	rs@ HALCPUInterruptRestore
end

fn MmQuotaBlockReference { quotablock -- }
	auto rs
	HALCPUInterruptDisable rs!

	if (DEBUGCHECKS)
		if (quotablock@ MmQuotaBlock_References + @ 0xFFFFFFFF ==)
			"MmQuotaBlockReference: overflow!\n" KeCrash
		end
	end

	1 quotablock@ MmQuotaBlock_References + +=

	rs@ HALCPUInterruptRestore
end

fn MmQuotaBlockDereference { quotablock -- }
	auto rs
	HALCPUInterruptDisable rs!

	auto oldcount
	quotablock@ MmQuotaBlock_References + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"MmQuotaBlockDereference: references<0\n" KeCrash
		end
	end

	oldcount@ 1 - quotablock@ MmQuotaBlock_References + !

	rs@ HALCPUInterruptRestore

	if (oldcount@ 1 ==)
		// got dereferenced to 0, delete

		HALCPUInterruptDisable rs!

		auto ls
		auto ns

		quotablock@ MmQuotaBlock_Prev + @ ls!
		quotablock@ MmQuotaBlock_Next + @ ns!

		if (ls@)
			ns@ ls@ MmQuotaBlock_Next + !
		end else
			ns@ MmQuotaBlockListHead!
		end

		if (ns@)
			ls@ ns@ MmQuotaBlock_Prev + !
		end

		rs@ HALCPUInterruptRestore

		quotablock@ MmFree
	end
end

fn MmQuotaChargeBuffer { buffersize -- ok }
	// helper function for charging heap quota for query syscalls

	buffersize@ MmChargeBytesGet // charge
	KeProcessCurrent PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ // quotablock
	MmQuotaBlockCharge ok!
end

fn MmQuotaUnchargeBuffer { buffersize -- }
	buffersize@ MmChargeBytesGet // charge
	KeProcessCurrent PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ // quotablock
	MmQuotaBlockUncharge
end

fn MmQuotaBlockCharge { charge quotablock -- ok }
	if (charge@ z<)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	0 ok!

	auto rs
	HALCPUInterruptDisable rs!

	auto heapmax
	quotablock@ MmQuotaBlock_PoolMax + @ heapmax!

	auto oldcharge
	quotablock@ MmQuotaBlock_PoolUsed + @ oldcharge!

	if (oldcharge@ charge@ + heapmax@ >)
		rs@ HALCPUInterruptRestore

		STATUS_QUOTA_EXCEEDED ok!

		return
	end

	oldcharge@ charge@ + quotablock@ MmQuotaBlock_PoolUsed + !

	rs@ HALCPUInterruptRestore
end

fn MmQuotaBlockUncharge { charge quotablock -- }
	auto rs
	HALCPUInterruptDisable rs!

	auto oldcharge
	quotablock@ MmQuotaBlock_PoolUsed + @ oldcharge!

	if (DEBUGCHECKS)
		if (charge@ oldcharge@ >)
			charge@
			oldcharge@
			"MmQuotaBlockUncharge: attempt to uncharge more than was charged (oldcharge=%d charge=%d)\n" KeCrash
		end
	end

	oldcharge@ charge@ - quotablock@ MmQuotaBlock_PoolUsed + !

	rs@ HALCPUInterruptRestore
end

fn MmQuotaBlockChargeWS { charge quotablock -- ok }
	if (charge@ z<)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	0 ok!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto commitlimit
	MmPhysicalCommitLimit@ commitlimit!

	auto commitused
	MmPhysicalCommitUsage@ commitused!

	if (commitused@ charge@ + commitlimit@ >)
		ipl@ KeIPLLower

		STATUS_PHYSICAL_COMMIT_EXCEEDED ok!

		return
	end

	auto wsmax
	quotablock@ MmQuotaBlock_WorkingSetMax + @ wsmax!

	auto oldcharge
	quotablock@ MmQuotaBlock_WorkingSetUsed + @ oldcharge!

	if (oldcharge@ charge@ + wsmax@ >)
		ipl@ KeIPLLower

		STATUS_WS_QUOTA_EXCEEDED ok!

		return
	end

	oldcharge@ charge@ + quotablock@ MmQuotaBlock_WorkingSetUsed + !
	commitused@ charge@ + MmPhysicalCommitUsage!

	ipl@ KeIPLLower
end

fn MmQuotaBlockUnchargeWS { charge quotablock -- }
	auto rs
	HALCPUInterruptDisable rs!

	auto oldcharge
	quotablock@ MmQuotaBlock_WorkingSetUsed + @ oldcharge!

	auto commitused
	MmPhysicalCommitUsage@ commitused!

	if (DEBUGCHECKS)
		if (charge@ oldcharge@ >)
			charge@
			oldcharge@
			"MmQuotaBlockUnchargeWS: attempt to uncharge more than was charged (oldcharge=%d charge=%d)\n" KeCrash
		end

		if (charge@ commitused@ >)
			commitused@
			charge@
			"MmQuotaBlockUnchargeWS: attempt to uncharge more commit than was charged %d > %d\n" KeCrash
		end
	end

	oldcharge@ charge@ - quotablock@ MmQuotaBlock_WorkingSetUsed + !
	commitused@ charge@ - MmPhysicalCommitUsage!

	rs@ HALCPUInterruptRestore
end

fn MmQuotaBlockChargeVMNoExtend { charge quotablock -- ok }
	if (DEBUGCHECKS)
		if (charge@ PAGEOFFSETMASK &)
			"MmQuotaBlockChargeVM: charge isn't aligned to page size\n" KeCrash
		end
	end

	if (charge@ z<)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	PAGESHIFT charge >>=

	0 ok!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto vmmax
	quotablock@ MmQuotaBlock_VMMax + @ vmmax!

	auto oldcharge
	quotablock@ MmQuotaBlock_VMUsed + @ oldcharge!

	if (oldcharge@ charge@ PAGESHIFT << + vmmax@ >)
		ipl@ KeIPLLower

		STATUS_VM_QUOTA_EXCEEDED ok!

		return
	end

	oldcharge@ charge@ PAGESHIFT << + quotablock@ MmQuotaBlock_VMUsed + !

	auto commitlimit
	MmCommitLimit@ commitlimit!

	auto commitused
	MmCommitUsage@ commitused!

	if (commitused@ charge@ + commitlimit@ >)
		// uncharge quota
		charge@ PAGESHIFT << quotablock@ MmQuotaBlock_VMUsed + -=

		ipl@ KeIPLLower

		STATUS_VM_QUOTA_EXCEEDED ok!

		return
	end

	commitused@ charge@ + MmCommitUsage!

	ipl@ KeIPLLower
end

fn MmQuotaBlockChargeVM { charge quotablock -- ok }
	if (DEBUGCHECKS)
		if (charge@ PAGEOFFSETMASK &)
			"MmQuotaBlockChargeVM: charge isn't aligned to page size\n" KeCrash
		end
	end

	if (charge@ z<)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	PAGESHIFT charge >>=

	0 ok!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto vmmax
	quotablock@ MmQuotaBlock_VMMax + @ vmmax!

	auto oldcharge
	quotablock@ MmQuotaBlock_VMUsed + @ oldcharge!

	if (oldcharge@ charge@ PAGESHIFT << + vmmax@ >)
		ipl@ KeIPLLower

		STATUS_VM_QUOTA_EXCEEDED ok!

		return
	end

	oldcharge@ charge@ PAGESHIFT << + quotablock@ MmQuotaBlock_VMUsed + !

	auto commitlimit
	MmCommitLimit@ commitlimit!

	auto commitused
	MmCommitUsage@ commitused!

	while (commitused@ charge@ + commitlimit@ >)
		charge@ IOSwapFileRequestExpansion ok!

		if (ok@)
			// uncharge quota
			charge@ PAGESHIFT << quotablock@ MmQuotaBlock_VMUsed + -=

			ipl@ KeIPLLower

			return
		end

		MmCommitLimit@ commitlimit!
		MmCommitUsage@ commitused!
	end

	commitused@ charge@ + MmCommitUsage!

	ipl@ KeIPLLower
end

fn MmQuotaBlockUnchargeVM { charge quotablock -- }
	if (DEBUGCHECKS)
		if (charge@ PAGEOFFSETMASK &)
			"MmQuotaBlockUnchargeVM: charge isn't aligned to page size\n" KeCrash
		end
	end

	auto rs
	HALCPUInterruptDisable rs!

	auto oldcharge
	quotablock@ MmQuotaBlock_VMUsed + @ oldcharge!

	auto commitused
	MmCommitUsage@ commitused!

	if (DEBUGCHECKS)
		if (charge@ oldcharge@ >)
			"MmQuotaBlockUnchargeVM: attempt to uncharge more than was charged\n" KeCrash
		end

		if (charge@ PAGESHIFT >> commitused@ >)
			commitused@
			charge@ PAGESHIFT >>
			"MmQuotaBlockUnchargeVM: attempt to uncharge more commit than was charged %d > %d\n" KeCrash
		end
	end

	oldcharge@ charge@ - quotablock@ MmQuotaBlock_VMUsed + !
	commitused@ charge@ PAGESHIFT >> - MmCommitUsage!

	rs@ HALCPUInterruptRestore
end

fn MmQuotaBlockChargePaged { charge quotablock -- ok }
	if (charge@ z<)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	0 ok!

	auto rs
	HALCPUInterruptDisable rs!

	auto phmax
	quotablock@ MmQuotaBlock_PagedPoolMax + @ phmax!

	auto oldcharge
	quotablock@ MmQuotaBlock_PagedPoolUsed + @ oldcharge!

	if (oldcharge@ charge@ + phmax@ >)
		rs@ HALCPUInterruptRestore

		STATUS_PAGED_QUOTA_EXCEEDED ok!

		return
	end

	oldcharge@ charge@ + quotablock@ MmQuotaBlock_PagedPoolUsed + !

	rs@ HALCPUInterruptRestore
end

fn MmQuotaBlockUnchargePaged { charge quotablock -- }
	auto rs
	HALCPUInterruptDisable rs!

	auto oldcharge
	quotablock@ MmQuotaBlock_PagedPoolUsed + @ oldcharge!

	if (DEBUGCHECKS)
		if (charge@ oldcharge@ >)
			"MmQuotaBlockUnchargePaged: attempt to uncharge more than was charged\n" KeCrash
		end
	end

	oldcharge@ charge@ - quotablock@ MmQuotaBlock_PagedPoolUsed + !

	rs@ HALCPUInterruptRestore
end

fn MmSetQuota { quota quotablock -- }
	// set new limits on the quotablock.

	quota@ OSQuota_Pool + @ quotablock@ MmQuotaBlock_PoolMax + !
	quota@ OSQuota_VirtualMemory + @ quotablock@ MmQuotaBlock_VMMax + !
	quota@ OSQuota_PagedPool + @ quotablock@ MmQuotaBlock_PagedPoolMax + !
	quota@ OSQuota_WorkingSet + @ quotablock@ MmQuotaBlock_WorkingSetMax + !
end

fn MmQuotaQuery { query quotablock -- }
	query@ // ptr
	OSQuotaInformation_SIZEOF // size
	0 // word
	memset

	quotablock@ MmQuotaBlock_PoolUsed + @ query@ OSQuotaInformation_PoolUsed + !
	quotablock@ MmQuotaBlock_PoolMax + @ query@ OSQuotaInformation_PoolMaximum + !

	quotablock@ MmQuotaBlock_VMUsed + @ query@ OSQuotaInformation_VirtualMemoryUsed + !
	quotablock@ MmQuotaBlock_VMMax + @ query@ OSQuotaInformation_VirtualMemoryMaximum + !

	quotablock@ MmQuotaBlock_PagedPoolUsed + @ query@ OSQuotaInformation_PagedPoolUsed + !
	quotablock@ MmQuotaBlock_PagedPoolMax + @ query@ OSQuotaInformation_PagedPoolMaximum + !

	quotablock@ MmQuotaBlock_WorkingSetUsed + @ query@ OSQuotaInformation_WorkingSetUsed + !
	quotablock@ MmQuotaBlock_WorkingSetMax + @ query@ OSQuotaInformation_WorkingSetMaximum + !
end

#ifdef DEBUGCHECKS

fn MmQuotaBlockPrint { quotablock -- }
	quotablock@ MmQuotaBlock_PoolMax + @
	quotablock@ MmQuotaBlock_PoolUsed + @       " POOL = %d/%i bytes\n" Printf

	quotablock@ MmQuotaBlock_PagedPoolMax + @
	quotablock@ MmQuotaBlock_PagedPoolUsed + @  " PGPL = %d/%i pages\n" Printf

	quotablock@ MmQuotaBlock_VMMax + @
	quotablock@ MmQuotaBlock_VMUsed + @         " VM   = %d/%i bytes\n" Printf

	quotablock@ MmQuotaBlock_References + @     " REFS = %d\n" Printf

	quotablock@ MmQuotaBlock_WorkingSetMax + @
	quotablock@ MmQuotaBlock_WorkingSetUsed + @ " WS   = %d/%i pages\n" Printf
end

#endif