#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn MmWorkingSetLock { processobject -- ok }
	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	processobject@ PsProcess_WorkingSetMutex + // object
	KeThreadWaitForObject ok!
end

fn MmWorkingSetTryLock { processobject -- ok }
	KERNELMODE // waitmode
	0 // alertable
	0 // timeout
	processobject@ PsProcess_WorkingSetMutex + // object
	KeThreadWaitForObject ok!
end

fn MmWorkingSetUnlock { processobject -- }
	processobject@ PsProcess_WorkingSetMutex + KeMutexRelease drop
end

fn MmWorkingSetListInitialize { process -- ok }
	"MmWorkingSetMutex" // name
	KERNELMODE // mode
	process@ PsProcess_WorkingSetMutex + // mutex
	KeMutexInitialize ok!

	if (DEBUGCHECKS)
		if (ok@)
			"MmWorkingSetInitialize: couldn't initialize MmWorkingSetMutex\n" KeCrash
		end
	end

	0 process@ PsProcess_WorkingSetSize + !
	MMWORKINGSETDEFAULTMINIMUM process@ PsProcess_WorkingSetMinimum + !
	MMWORKINGSETDEFAULTMAXIMUM process@ PsProcess_WorkingSetMaximum + !

	0 process@ PsProcess_WorkingSetFreeListHead + !
	0 process@ PsProcess_WorkingSetMaximumIndex + !
	0 process@ PsProcess_WorkingSetReplacementIndex + !

	process@ PsProcess_WorkingSetListPointers + // ptr
	WORKINGSETLISTCOUNT 4 * // size
	0 // word
	memset
end