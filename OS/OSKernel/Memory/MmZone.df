//
// Implements a fast allocator for fixed size memory blocks.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OS.h"

fn MmZoneInitialize { blocksize blockcount zone zoneheader -- ok }
	if (DEBUGCHECKS)
		if (blocksize@ 3 &)
			blocksize@ "MmZoneInitialize: unaligned block size (%d bytes)\n" KeCrash
		end

		if (blockcount@ 1 <)
			blockcount@ "MmZoneInitialize: zone too few blocks (%d)\n" KeCrash
		end

		if (blocksize@ MmZoneFreeBlock_SIZEOF <)
			blocksize@ "MmZoneInitialize: zone blocks too small (%d bytes)\n" KeCrash
		end
	end

	zone@ zoneheader@ MmZoneHeader_Zone + !

	0 zoneheader@ MmZoneHeader_FreeListHead + !

	// initialize the zone blocks

	while (blockcount@)
		zoneheader@ MmZoneHeader_FreeListHead + @ zone@ MmZoneFreeBlock_NextFree + !
		zone@ zoneheader@ MmZoneHeader_FreeListHead + !

		1 blockcount -=
		blocksize@ zone +=
	end
end

fn MmZoneAllocate { zoneheader -- ptr ok }
	// assumes caller took care of any necessary synchronization.

	zoneheader@ MmZoneHeader_FreeListHead + @ ptr!

	if (ptr@ ~~)
		STATUS_NO_MEMORY ok!
		return
	end

	ptr@ MmZoneFreeBlock_NextFree + @ zoneheader@ MmZoneHeader_FreeListHead + !

	0 ok!
end

fn MmZoneFree { ptr zoneheader -- }
	// assumes caller took care of any necessary synchronization.

	zoneheader@ MmZoneHeader_FreeListHead + @ ptr@ MmZoneFreeBlock_NextFree + !
	ptr@ zoneheader@ MmZoneHeader_FreeListHead + !
end