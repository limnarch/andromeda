//
// Implements allocation of private virtual memory for userspace.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

fn MmAllocateProcessObject { length startva processobject pageprotection flags -- realva ok }
	if (pageprotection@ PAGEACCESS_WRITECOPY &)
		// makes no sense for private memory

		STATUS_INVALID_ARGUMENT ok!

		return
	end
end

fn MmAllocate { length startva processhandle pageprotection flags -- realva ok }
	auto access
	auto processobject

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	length@ // length
	startva@ // startva
	processobject@ // processobject
	pageprotection@ // pageprotection
	flags@ // flags
	MmAllocateProcessObject ok! realva!

	processobject@ ObObjectDereferenceByPointer drop
end