//
// Implements the zero page worker thread.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

var MmOkToUnwire 0
public MmOkToUnwire

fn MmZeroPageWorker { -- }
	// the fate of the idle thread is to endlessly spin and check for page
	// frames in the free list. if it finds any, it zeroes them out and places
	// them on the zero list. if it doesn't, it halts the processor until next
	// interrupt.

	1 MmOkToUnwire!

	while (1)
		auto pfdbe
		MmPageFreeListHead@ pfdbe!

		if (pfdbe@)
			// there's a page, zero it

			auto rs
			HALCPUInterruptDisable rs!

			MmPageFreeListHead@ pfdbe!

			// make sure the free list didnt become empty in that brief timespan

			if (pfdbe@ ~~)
				rs@ HALCPUInterruptRestore

				continue
			end

			// yoink off the list

			pfdbe@ MmPageFrameEntryFree_Next + @ MmPageFreeListHead!
			0 pfdbe@ MmPageFrameEntryFree_Next + !

			1 MmPageFreeCount -=

			rs@ HALCPUInterruptRestore

			// zero out this page frame

			pfdbe@ MmPageFrameDatabase@ - MmPageFrameEntry_SIZEOF / PAGESHIFT << IDENTITYSPACE | // ptr
			PAGESIZE // size
			0 // word
			memset

			HALCPUInterruptDisable rs!

			// place on zero list

			MmPageZeroListHead@ pfdbe@ MmPageFrameEntryFree_Next + !
			pfdbe@ MmPageZeroListHead!

			1 MmPageFreeCount +=

			auto ipl

			if (MmPageFreeCount@ MmEvictablePageCount@ + MMNORMALTHRESH ==)
				IPLDPC KeIPLRaise ipl!
				rs@ HALCPUInterruptRestore

				0 // priboost
				MmEventPageAvailable // event
				KeEventSignal

				ipl@ KeIPLLower
			end elseif (MmPageFreeCount@ MmEvictablePageCount@ + MMNORMALTHRESH <)
				IPLDPC KeIPLRaise ipl!
				rs@ HALCPUInterruptRestore

				0 // priboost
				MmEventMSPageAvailable // event
				KeEventSignal

				ipl@ KeIPLLower
			end else
				rs@ HALCPUInterruptRestore
			end
		end else
			// there are no free list pages for now, halt

			HALCPUHalt
		end
	end
end