//
// Implements the zero page worker thread.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

#include "MmInternal.h"

var MiOkToUnwire 0
public MiOkToUnwire

fn MmZeroPageWorker { -- }
	// The fate of the idle thread is to endlessly spin and check for page
	// frames in the free list. If it finds any, it zeroes them out and places
	// them on the zero list. If it doesn't, it halts the processor until next
	// interrupt.

	1 MiOkToUnwire!

	while (1)
		if (MiFreeListCount@ 200 >=)
			// More than 200 pages have accumulated on the free list.
			// Zero them out and place them on the zeroed list.

			MiZeroFreePages
		end

		HALCPUHalt
	end
end

fn MiZeroFreePages { -- }
	auto zerocount
	MiFreeListCount@ zerocount!

	auto pooladdr
	MiZeroingPage@ pooladdr!

	auto pteaddr
	pooladdr@ MmVirtualtoPTEAddress pteaddr!

	while (zerocount@)
		auto ipl
		IPLDPC KeIPLRaise ipl!

		auto pfdbe
		MiPageFreeListHead@ pfdbe!

		if (pfdbe@ ~~)
			ipl@ KeIPLLower

			break
		end

		// yoink off the list

		pfdbe@ MiPageFrameEntryFree_Next + @ MiPageFreeListHead!
		0 pfdbe@ MiPageFrameEntryFree_Next + !

		1 MmAvailablePageCount -=
		1 MiFreeListCount -=

		ipl@ KeIPLLower

		pfdbe@ MiPageFrameDatabase@ - MiPageFrameEntry_SIZEOF / PAGESHIFT << // phyaddr
		PTE_V PTE_W | PTE_NC | // flags
		pteaddr@ // pteaddr
		MiPTEUpdate drop drop

		// zero out this page frame

		pooladdr@ // ptr
		PAGESIZE // size
		0 // word
		memset

		IPLDPC KeIPLRaise ipl!

		// place on zero list

		MiPageZeroListHead@ pfdbe@ MiPageFrameEntryFree_Next + !
		pfdbe@ MiPageZeroListHead!

		1 MmAvailablePageCount +=
		1 MiZeroListCount +=

		// make sure that the events are signalled correctly.

		if (MmAvailablePageCount@ MMNORMALTHRESH ==)
			0 // priboost
			MiPageAvailableEvent // event
			KeEventSignal
		end elseif (MmAvailablePageCount@ MMNORMALTHRESH <)
			0 // priboost
			MiMustSucceedEvent // event
			KeEventSignal
		end

		ipl@ KeIPLLower

		1 zerocount -=
	end
end