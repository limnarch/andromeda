//
// Implements page directory management for the limn2600 architecture.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OSStatus.h"

fn MmPageDirectoryDestroy { process -- }
	auto pagemap
	process@ KeProcess_PageDirectory + @ pagemap!

	auto pfdbe
	pagemap@ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!

	// MmAnonymousPageDelete wants to be entered at IPLDPC...

	auto ipl
	IPLDPC KeIPLRaise ipl!

	pfdbe@ MmEvictablePageDereference drop

	if (DEBUGCHECKS)
		auto count
		PAGESIZE 3 >> count!

		auto ptr
		pagemap@ IDENTITYSPACE | ptr!
	
		while (count@)
			auto pde
			ptr@@ pde!

			if (pde@)
				auto ptpfdbe
				pde@ 5 >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + ptpfdbe!

				PAGESIZE 2 >> count!

				auto ptptr
				pde@ 5 >> PAGESHIFT << IDENTITYSPACE | ptptr!

				while (count@)
					if (ptptr@@)
						ptptr@@
						ptpfdbe@ MmPageFrameEntryPageTable_PTECount + @
						ptpfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi
						pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi
						pde@ ptptr@ 2 >> 1023 & 22 << "MmPageDirectoryDestroy: %x: broken %x (%d, %d, %d) %x\n" KeCrash
					end

					1 count -=
					4 ptptr +=
				end

				ptpfdbe@ MmPageFrameEntryPageTable_HoldCount + @
				ptpfdbe@ MmPageFrameEntryPageTable_PTECount + @
				ptpfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi
				pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi
				pde@ ptr@ 2 >> 1023 & 22 << "MmPageDirectoryDestroy: %x: broken %x (%d, %d, %d, %d)\n" KeCrash
			end

			1 count -=
			4 ptr +=
		end
	end

	if (DEBUGCHECKS)
		if (pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi)
			pfdbe@ MmPageFrameEntryEvictable_ReferencesI + gi
			"MmPageDirectoryDestroy: page directory had %d references\n" KeCrash
		end
	end

	ipl@ // ipl
	pfdbe@ // pfdbe
	MmAnonymousPageDelete

	// ...but it leaves at the provided IPL

	PAGESIZE // charge
	process@ PsProcess_QuotaBlock + @ // quotablock
	MmQuotaBlockUnchargeVM

	PAGESIZE // charge
	process@ PsProcess_QuotaBlock + @ // quotablock
	MmQuotaBlockUncharge
end

fn MmPageDirectoryAlloc { process -- pdir ok }
	PAGESIZE // charge
	process@ PsProcess_QuotaBlock + @ // quotablock
	MmQuotaBlockChargeVM ok!

	if (ok@)
		return
	end

	PAGESIZE // charge
	process@ PsProcess_QuotaBlock + @ // quotablock
	MmQuotaBlockCharge ok!

	if (ok@)
		PAGESIZE // charge
		process@ PsProcess_QuotaBlock + @ // quotablock
		MmQuotaBlockUnchargeVM

		return
	end

	auto pfdbe
	process@ KeProcess_PageDirectory + // pte
	ZEROMUST // priority
	MmAnonymousPageAlloc ok! pdir! pfdbe!

	if (ok@)
		PAGESIZE // charge
		process@ PsProcess_QuotaBlock + @ // quotablock
		MmQuotaBlockUnchargeVM

		PAGESIZE // charge
		process@ PsProcess_QuotaBlock + @ // quotablock
		MmQuotaBlockUncharge

		return
	end

	pfdbe@ // pfdbe
	0 // process
	MmEvictablePageModify

	PAGESHIFT pdir <<=

	pdir@ IDENTITYSPACE | 2048 + // dest
	HALPlatformKernelPageDirectory@ IDENTITYSPACE | 2048 + // src
	2048 // size
	memcpy
end

fn MmPageDirectorySwapIn { process -- }
	auto pfdbe

	if (process@ KeProcess_PageDirectory + @ PTE_INSWAP &)
		IPLLOW KeIPLLower

		auto ok
		auto pt

		TRYFOREVER // priority
		process@ KeProcess_PageDirectory + // pte
		process@ KeProcess_PageDirectory + @ PAGESHIFT >> // pno
		MmAnonymousSwapIn ok! pt! pfdbe!

		if (ok@)
			ok@ "MmPageDirectorySwapIn: failed (%i)\n" KeCrash
		end

		pt@ PAGESHIFT << process@ KeProcess_PageDirectory + !

		IPLDPC KeIPLRaise drop
	end else
		process@ KeProcess_PageDirectory + @ PAGESHIFT >> MmPageFrameEntry_SIZEOF * MmPageFrameDatabase@ + pfdbe!
		
		pfdbe@ MmEvictablePageReference drop
	end

	if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED & ~~)
		pfdbe@ // pfdbe
		0 // process
		MmEvictablePageModify
	end
end