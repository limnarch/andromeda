//
// Implements page frame allocation.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALResource.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Process.h"

#include "<inc>/Object.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

#include "MmInternal.h"

fn MmPFDBEToPhysicalAddress { pfdbe -- phyaddr }
	pfdbe@ MiPageFrameDatabase@ - MiPageFrameEntry_SIZEOF / PAGESHIFT << phyaddr!
end

fn MmKflagToPriority { kflags -- pri }
	0 pri!

	if (kflags@ IOKFLAG_SWAPOUT &)
		MUSTSUCCEED pri!
	end elseif (kflags@ IOKFLAG_URGENT &)
		MUSTSUCCEEDL2 pri!
	end

	if (kflags@ IOKFLAG_SYSSPC &)
		SYSTEMSPACE pri |=
	end
end

fn MmPageGet { priority -- pfdbe ok }
	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"MmPageGet: ipl != IPLDPC\n" KeCrash
		end
	end

	0 ok!

	if (priority@ 0xFF & FREEFIRST ==)
		// attempt to get a page from the free list first.
		// if its empty, try to get one from the zero list.

		MiPageFreeListHead@ pfdbe!

		if (pfdbe@)
			pfdbe@ MiPageFrameEntryFree_Next + @ MiPageFreeListHead!
			0 pfdbe@ MiPageFrameEntryFree_Next + !

			1 MmPageFreeCount -=
		end else
			// resort to a zero page

			MiPageZeroListHead@ pfdbe!

			if (pfdbe@)
				pfdbe@ MiPageFrameEntryFree_Next + @ MiPageZeroListHead!
				0 pfdbe@ MiPageFrameEntryFree_Next + !

				1 MmPageFreeCount -=
			end
		end
	end elseif (priority@ 0xFF & ZEROMUST ==)
		// attempt to get one from the zero list first.
		// if its empty, get one from the free list, and zero it out.

		MiPageZeroListHead@ pfdbe!

		if (pfdbe@)
			pfdbe@ MiPageFrameEntryFree_Next + @ MiPageZeroListHead!
			0 pfdbe@ MiPageFrameEntryFree_Next + !

			1 MmPageFreeCount -=
		end else
			// resort to a free page

			MiPageFreeListHead@ pfdbe!

			if (pfdbe@)
				pfdbe@ MiPageFrameEntryFree_Next + @ MiPageFreeListHead!
				0 pfdbe@ MiPageFrameEntryFree_Next + !

				1 MmPageFreeCount -=

				// zero the free page out

				0 // offset
				pfdbe@ MmPFDBEToPhysicalAddress // phyaddr
				MmPageFrameZero
			end
		end
	end elseif (DEBUGCHECKS)
		priority@ "MmPageGet: unknown priority %d\n" KeCrash
	end

	if (pfdbe@ ~~)
		// none in free or zero list, get one from standby list

		MiEvictSinglePage ok! pfdbe!

		if (ok@ ~~)
			if (priority@ 0xFF & ZEROMUST ==)
				// zero out the standby page

				0 // offset
				pfdbe@ MmPFDBEToPhysicalAddress // phyaddr
				MmPageFrameZero
			end
		end
	end

	if (MmEvictablePageCount@ MmPageFreeCount@ + MmPageFreeCountLow@ <)
		0 // priboost
		MiEventLowMemory // event
		KeEventSignal
	end
end

fn MmPageWait { process priority -- waited ok }
	// wait until the appropriate available page threshold is reached.
	// will never return an error status if CANBLOCK is specified.

	if (DEBUGCHECKS)
		if (KeIPLCurrentGet IPLDPC ~=)
			"MmPageWait: ipl != IPLDPC\n" KeCrash
		end
	end

	0 waited!

	if (MmPageFreeCount@ MmEvictablePageCount@ + MMNORMALTHRESH >=)
		0 ok!

		return
	end

	auto wprocess
	KeThreadCurrent@ KeThread_Process + @ wprocess!

	auto blockon

	if (priority@ MUSTSUCCEED &)
		// CANBLOCK page allocations have different wait rules if MUSTSUCCEED
		// is also specified:

		MMMUSTSUCCEEDTHRESH blockon!
	end elseif (priority@ MUSTSUCCEEDL2 &)
		MMMUSTSUCCEEDL2THRESH blockon!
	end elseif (priority@ POOLALLOC &)
		MMPOOLTHRESH blockon!
	end else
		// normal rules:
		MMNORMALTHRESH blockon! // don't dip into MUSTSUCCEED page pool
	end

	if (KeThreadCurrent@ PsThread_MemoryPrivilegedCount + @)
		MMMUSTSUCCEEDTHRESH blockon!
	end

	if (priority@ CANBLOCK & ~~)
		// check this now instead of doing it every iteration in the while
		// loop

		if (MmPageFreeCount@ MmEvictablePageCount@ + blockon@ <)
			STATUS_NO_MEMORY ok!

			return
		end
	end

	auto timeouts
	600 timeouts!

	auto event

	if (blockon@ MMNORMALTHRESH >=)
		MiEventPageAvailable event!
	end else
		MiEventMSPageAvailable event!
	end

	while (MmPageFreeCount@ MmEvictablePageCount@ + blockon@ <)
		event@ KeEventReset drop

		IPLAPC KeIPLLower

		if (process@)
			process@ MmVADListUnlock
		end

		1 waited!

		KERNELMODE // waitmode
		0 // alertable
		100 // timeout
		event@ // object
		KeThreadWaitForObject ok!

		if (process@)
			0 // alertable
			process@ // processobject
			MmVADListLock drop
		end

		IPLDPC KeIPLRaise drop

		if (ok@)
			if (ok@ STATUS_WAIT_TIMEOUT ==)
				if (timeouts@ ~~)
					MmModifiedPageCount@
					MmPageFreeCount@
					MmEvictablePageCount@
					"Many timeouts, MPW is likely deadlocked (evic=%d,free=%d,mod=%d)\n" KeCrash
				end

				1 timeouts -=

				// recheck this since it may have changed

				if (KeThreadCurrent@ PsThread_MemoryPrivilegedCount + @)
					MMMUSTSUCCEEDTHRESH blockon!
					MiEventMSPageAvailable event!
				end
			end else
				return
			end
		end else
			600 timeouts!
		end
	end

	0 ok!
end

fn MiPageFreeByEntry { pfdbe -- }
	// insert a page frame into the free list

	auto ipl
	IPLDPC KeIPLRaise ipl!

	MiPageFreeListHead@ pfdbe@ MiPageFrameEntryFree_Next + !
	pfdbe@ MiPageFreeListHead!

	1 MmPageFreeCount +=

	if (MmPageFreeCount@ MmEvictablePageCount@ + MMNORMALTHRESH ==)
		0 // priboost
		MiEventPageAvailable // event
		KeEventSignal
	end elseif (MmPageFreeCount@ MmEvictablePageCount@ + MMNORMALTHRESH <)
		0 // priboost
		MiEventMSPageAvailable // event
		KeEventSignal
	end

	ipl@ KeIPLLower
end

fn MmPageFrameZero { offset phyaddr -- }
	// zero out a page frame, starting at the given offset.

	auto vaddr

	auto ipl
	IPLDPC KeIPLRaise ipl!

	phyaddr@ MiMapQuickPage vaddr!

	vaddr@ offset@ + // ptr
	PAGESIZE offset@ - // sz
	0 // word
	memset

	vaddr@ MiUnmapQuickPage

	ipl@ KeIPLLower
end