//
// Implements memory descriptor lists (MDLs) and page locking, as well as
// mapping of user buffers into system space.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OSStatus.h"

fn MmMDLInitialize { length vaddr mdl -- }
	vaddr@ mdl@ MmMDLHeader_VirtualAddress + !
	length@ mdl@ MmMDLHeader_Length + !

	0 mdl@ MmMDLHeader_Flags + !

	0 mdl@ MmMDLHeader_MappedAddress + !
end

fn MmMDLLock { mdl -- ok }
	// lock all of the pages described by the MDL into memory, resources
	// permitting. must be done in the context of the process whose buffer it
	// is.

	if (DEBUGCHECKS)
		if (mdl@ MmMDLHeader_Flags + @ MMMDL_LOCKED &)
			"MmMDLLock: double lock\n" KeCrash
		end
	end

	// touch all of the pages until their PTE is valid. call MmMDLUnlock to
	// clean up the partial lock if we fail at any point.

	// stub
end

fn MmMDLUnlock { mdl -- }
	// unlock all of the pages described by the MDL.

	if (DEBUGCHECKS)
		if (mdl@ MmMDLHeader_Flags + @ MMMDL_LOCKED & ~~)
			"MmMDLUnlock: not locked\n" KeCrash
		end
	end

	// stub
end

fn MmMDLMap { mdl -- vaddr ok }
	// map the page frames into system space that are locked by the MDL.

	if (DEBUGCHECKS)
		if (mdl@ MmMDLHeader_Flags + @ MMMDL_LOCKED & ~~)
			"MmMDLMap: not locked\n" KeCrash
		end

		if (mdl@ MmMDLHeader_Flags + @ MMMDL_MAPPED &)
			"MmMDLMap: double map\n" KeCrash
		end
	end

	// stub
end

fn MmMDLUnmap { mdl -- }
	// unmap the page frames from system space that are locked by the MDL.

	if (DEBUGCHECKS)
		if (mdl@ MmMDLHeader_Flags + @ MMMDL_LOCKED & ~~)
			"MmMDLUnmap: not locked\n" KeCrash
		end

		if (mdl@ MmMDLHeader_Flags + @ MMMDL_MAPPED & ~~)
			"MmMDLUnmap: not mapped\n" KeCrash
		end
	end

	// stub
end