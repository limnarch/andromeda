//
// Implements management routines for the executive process object.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<inc>/Console.h"

#include "<ll>/OSDLL/OS.h"

fn PsProcessSignalObject { signal processobject -- ok }
	if (processobject@ PsSystemProcess@ ==)
		STATUS_FORBIDDEN_OPERATION ok!
		return
	end

	1 // needsthread
	processobject@ // processobject
	PsProcessCreateDeleteAcquireCheck ok!

	if (ok@)
		return
	end

	if (signal@ OSSIGNAL_KILL ==)
		137 processobject@ KeProcess_KilledStatus + !
	end

	signal@ // signal
	processobject@ // process
	KeProcessSignal ok!

	processobject@ PsProcessCreateDeleteUnlock
end

fn PsProcessSignal { signal processhandle -- ok }
	auto obj
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		return
	end

	access@ ACCESS_EXEC SeCheckAccess ok!

	if (ok@)
		obj@ ObObjectDereferenceByPointer drop

		return
	end

	signal@ // signal
	obj@ // processobject
	PsProcessSignalObject ok!

	obj@ ObObjectDereferenceByPointer drop
end

fn PsProcessReadStatusObject { processobject -- status ok }
	if (processobject@ KeProcess_Terminated + @ ~~)
		STATUS_ALIVE ok!
		return
	end

	0 ok!
	processobject@ KeProcess_KilledStatus + @ status!
end

fn PsProcessReadStatus { processhandle -- status ok }
	auto obj
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		return
	end

	access@ ACCESS_READ SeCheckAccess ok!

	if (ok@)
		obj@ ObObjectDereferenceByPointer drop

		return
	end

	obj@ PsProcessReadStatusObject ok! status!

	obj@ ObObjectDereferenceByPointer drop
end

fn PsProcessCreateDeleteLock { processobject -- ok }
	KERNELMODE // waitmode
	1 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	processobject@ PsProcess_ThreadCreateDeleteMutex + // object
	KeThreadWaitForObject ok!
end

fn PsProcessCreateDeleteUnlock { processobject -- }
	0 processobject@ PsProcess_ThreadCreateDeleteMutex + KeMutexRelease drop
end

fn PsProcessCreateDeleteAcquireCheck { needsthread processobject -- ok }
	processobject@ PsProcessCreateDeleteLock ok!

	if (ok@)
		return
	end

	if (processobject@ KeProcess_Terminated + @)
		processobject@ PsProcessCreateDeleteUnlock

		STATUS_PROCESS_IS_TERMINATED ok!

		return
	end

	if (DEBUGCHECKS)
		if (processobject@ PsProcess_CleanedUp + @)
			"PsProcessCreateDeleteAcquireCheck: process cleaned up?\n" KeCrash
		end
	end

	if (needsthread@)
		if (processobject@ KeProcess_SignalThread + @ ~~)
			// there will always be a signal thread so long as there's at
			// least one thread, so this means the process either has no
			// threads anymore or it has never been given one.

			processobject@ PsProcessCreateDeleteUnlock

			STATUS_PROCESS_NO_THREAD ok!

			return
		end
	end
end

fn PsProcessReferenceByPID { pid -- processobject ok }
	PsProcessTable@ ExHandleTableLockShared ok!

	if (ok@)
		return
	end

	auto entryptr

	pid@ // handle
	PsProcessTable@ // handletable
	1 // locked
	ExHandleLookup ok! entryptr!

	if (ok@)
		PsProcessTable@ ExHandleTableUnlock

		return
	end

	entryptr@@ processobject!

	if (processobject@ ObObjectType PsProcessObjectType@ ~=)
		// actually a thread. no bueno

		PsProcessTable@ ExHandleTableUnlock

		STATUS_INVALID_HANDLE ok!

		return
	end

	if (processobject@ ObObjectNonpagedHeader ObNonpagedHeader_PointerCount + @ ~~)
		// see function ObObjectDereferenceByPointer for an explanation on
		// this check.

		PsProcessTable@ ExHandleTableUnlock

		STATUS_PROCESS_IS_TERMINATED ok!

		return
	end

	processobject@ ObObjectReferenceByPointer drop

	PsProcessTable@ ExHandleTableUnlock
end

fn PsProcessOpenByPID { access pid -- processhandle ok }
	auto processobject
	pid@ PsProcessReferenceByPID ok! processobject!

	if (ok@)
		return
	end

	0 // nocheck
	access@ // access
	processobject@ // object
	KeProcessCurrent // process
	ObObjectOpenProcess ok! processhandle!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop
	end
end

fn PsProcessInformationQueryObject { processobject query -- ok }
	0 ok!

	query@ // ptr
	OSProcessInformation_SIZEOF // size
	0 // word
	memset

	processobject@ PsProcess_PID + @ query@ OSProcessInformation_PID + !
	processobject@ PsProcess_ParentPID + @ query@ OSProcessInformation_ParentPID + !

	if (processobject@ ObObjectName)
		query@ OSProcessInformation_Name + // dest
		processobject@ ObObjectName // src
		OBNAMEMAX 1 - // max
		strncpy
	end else
		0 query@ OSProcessInformation_Name + sb
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto consoleobject
	processobject@ PsProcess_ConsoleObject + @ consoleobject!

	if (consoleobject@)
		if (consoleobject@ ObObjectName)
			query@ OSProcessInformation_ConsoleName + // dest
			consoleobject@ ObObjectName // src
			OBNAMEMAX 1 - // max
			strncpy
		end else
			0 query@ OSProcessInformation_ConsoleName + sb
		end
	end else
		0 query@ OSProcessInformation_ConsoleName + sb
	end

	ipl@ KeIPLLower

	processobject@ PsProcess_UID + @ query@ OSProcessInformation_OwningUID + !
	processobject@ PsProcess_GID + @ query@ OSProcessInformation_OwningGID + !

	auto rs
	HALCPUInterruptDisable rs!

	auto signalthread
	processobject@ KeProcess_SignalThread + @ signalthread!

	if (signalthread@)
		// report the signalthread's scheduling status
		signalthread@ KeThread_Status + @ query@ OSProcessInformation_Status + !
		signalthread@ KeThread_Priority + @ query@ OSProcessInformation_Priority + !
		rs@ HALCPUInterruptRestore
	end else
		rs@ HALCPUInterruptRestore
		0 query@ OSProcessInformation_Priority + !
		0 query@ OSProcessInformation_Status + !
	end

	processobject@ KeProcess_Terminated + @ query@ OSProcessInformation_Terminated + !
	processobject@ KeProcess_KilledStatus + @ query@ OSProcessInformation_ExitStatus + !

	processobject@ PsProcess_WorkingSetSize + @ query@ OSProcessInformation_WorkingSetSize + !
	processobject@ PsProcess_PageFaultCount + @ query@ OSProcessInformation_PageFaultCount + !

	processobject@ KeProcess_UserTimeMs + @ query@ OSProcessInformation_UserTimeMs + !
	processobject@ KeProcess_SystemTimeMs + @ query@ OSProcessInformation_SystemTimeMs + !
	processobject@ KeProcess_DPCTimeMs + @ query@ OSProcessInformation_DPCTimeMs + !
end

fn PsProcessInformationQuery { processhandle query -- ok }
	auto processobject

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! drop

	if (ok@)
		return
	end

	processobject@ // processobject
	query@ // query
	PsProcessInformationQueryObject ok!

	processobject@ ObObjectDereferenceByPointer drop
end

fn PsProcessInformationQueryByPID { pid query -- ok }
	auto processobject
	pid@ PsProcessReferenceByPID ok! processobject!

	if (ok@)
		return
	end

	processobject@ // object
	KeProcessCurrent // process
	SeCheckAccessObjectOwnerX ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	processobject@ // processobject
	query@ // query
	PsProcessInformationQueryObject ok!

	processobject@ ObObjectDereferenceByPointer drop
end

fn PsProcessQueryAll { buffer maxquery -- count ok }
	PsProcessListLock ok!

	if (ok@)
		return
	end

	auto process
	PsProcessListHead@ process!

	0 count!

	while (process@)
		if (maxquery@ ~~)
			break
		end

		process@ // processobject
		buffer@ // query
		PsProcessInformationQueryObject ok!

		if (ok@)
			PsProcessListUnlock

			return
		end

		1 count +=
		1 maxquery -=
		OSProcessInformation_SIZEOF buffer +=
		process@ PsProcess_GlobalListNext + @ process!
	end

	PsProcessListUnlock
end

fn PsProcessSignalActivation { activationstatus -- ok }
	auto curproc
	KeProcessCurrent curproc!

	if (curproc@ PsProcess_ActivationStatus + @)
		STATUS_ALIVE ok!
		return
	end

	activationstatus@ curproc@ PsProcess_ActivationStatus + !

	curproc@ PsProcessCreateDeleteLock ok!

	if (ok@)
		return
	end

	auto activationblock
	curproc@ PsProcess_ActivationBlock + @ activationblock!

	if (activationblock@ ~~)
		-1 curproc@ PsProcess_ActivationBlock + !
	end elseif (activationblock@ -1 ~=)
		0 // priboost
		activationblock@ PsProcessActivationBlock_Event + // event
		KeEventSignal
	end

	curproc@ PsProcessCreateDeleteUnlock
end

fn PsProcessWaitForActivationObject { timeout processobject -- activationstatus ok }
	auto activationblock

	processobject@ PsProcessCreateDeleteLock ok!

	if (ok@)
		return
	end

	processobject@ PsProcess_ActivationBlock + @ activationblock!

	if (activationblock@ ~~)
		PsProcessActivationBlock_SIZEOF // bytes
		'PsAc' // tag
		CANBLOCK // flags
		MmAllocWithTag ok! activationblock!

		0 // signaled
		OSEVENT_NOTIF // type
		"PsProcessActivationEvent" // name
		activationblock@ PsProcessActivationBlock_Event + // event
		KeEventInitialize

		0 activationblock@ PsProcessActivationBlock_References + !

		activationblock@ processobject@ PsProcess_ActivationBlock + !
	end elseif (activationblock@ -1 ==)
		processobject@ PsProcessCreateDeleteUnlock

		processobject@ PsProcess_ActivationStatus + @ activationstatus!

		return
	end

	1 activationblock@ PsProcessActivationBlock_References + +=

	processobject@ PsProcessCreateDeleteUnlock

	USERMODE // waitmode
	1 // alertable
	timeout@ // timeout
	activationblock@ PsProcessActivationBlock_Event + // object
	KeThreadWaitForObject ok!

	KeThreadCurrent@ KeThreadIgnoreKill drop
	processobject@ PsProcessCreateDeleteLock drop

	1 activationblock@ PsProcessActivationBlock_References + -=

	if (activationblock@ PsProcessActivationBlock_References + @ ~~)
		activationblock@ MmFree
		-1 processobject@ PsProcess_ActivationBlock + !
	end

	processobject@ PsProcessCreateDeleteUnlock
	KeThreadCurrent@ KeThreadAcceptKill drop

	if (ok@)
		return
	end

	processobject@ PsProcess_ActivationStatus + @ activationstatus!
end

fn PsProcessWaitForActivation { timeout processhandle -- activationstatus ok }
	auto processobject

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! drop

	if (ok@)
		return
	end

	timeout@ // timeout
	processobject@ // processobject
	PsProcessWaitForActivationObject ok! activationstatus!

	processobject@ ObObjectDereferenceByPointer drop
end

fn PsProcessMaskSignal { signal processhandle -- ok }
	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	signal@ // signal
	processobject@ // process
	KeProcessMaskSignal ok!

	processobject@ ObObjectDereferenceByPointer drop
end

fn PsProcessUnmaskSignal { signal processhandle -- ok }
	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	signal@ // signal
	processobject@ // process
	KeProcessUnmaskSignal ok!

	processobject@ ObObjectDereferenceByPointer drop
end

fn PsProcessSetConsoleGroup { filehandle processhandle -- ok }
	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto consoleobject
	ACCESS_READ // permissions
	filehandle@ // filehandle
	CoConsoleByFileHandle ok! consoleobject!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	processobject@ // process
	consoleobject@ // console
	CoConsoleInsertProcess ok!

	consoleobject@ ObObjectDereferenceByPointer drop
	processobject@ ObObjectDereferenceByPointer drop
end

fn PsProcessClearConsoleGroup { processhandle -- ok }
	SYSTEMPERMISSION_DETACHCONSOLE // permission
	KeProcessCurrent // process
	SeProcessCheckPermission ok!

	if (ok@)
		return
	end

	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	processobject@ // process
	CoConsoleRemoveProcess ok!

	processobject@ ObObjectDereferenceByPointer drop
end