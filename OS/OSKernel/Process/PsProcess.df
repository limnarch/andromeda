#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALDebug.h"

fn PsProcessSignalObject { signal processobject -- ok }
	1 // needsthread
	processobject@ // processobject
	PsProcessCreateDeleteAcquireCheck ok!

	if (ok@)
		return
	end

	signal@ // signal
	processobject@ // process
	KeProcessSignal ok!

	processobject@ PsProcessCreateDeleteUnlock
end

fn PsProcessSignal { signal processhandle -- ok }
	auto obj
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		return
	end

	signal@ // signal
	obj@ // processobject
	PsProcessSignalObject ok!

	obj@ ObObjectDereferenceByPointer drop
end

fn PsProcessReadStatusObject { processobject -- status ok }
	if (processobject@ KeProcess_Terminated + @ ~~)
		STATUS_ALIVE ok!
		return
	end

	0 ok!
	processobject@ KeProcess_KilledStatus + @ status!
end

fn PsProcessReadStatus { processhandle -- status ok }
	auto obj
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		return
	end

	obj@ PsProcessReadStatusObject ok! status!

	obj@ ObObjectDereferenceByPointer drop
end

fn PsProcessCreateDeleteLock { processobject -- ok }
	1 // alertable
	0 // nowait
	processobject@ PsProcess_ThreadCreateDeleteRwLock + // rwlock
	ExRwLockAcquireExclusive ok!
end

fn PsProcessCreateDeleteLockShared { processobject -- ok }
	1 // alertable
	0 // nowait
	0 // canstarve
	processobject@ PsProcess_ThreadCreateDeleteRwLock + // rwlock
	ExRwLockAcquireShared ok!
end

fn PsProcessCreateDeleteAcquireCheck { needsthread processobject -- ok }
	processobject@ PsProcessCreateDeleteLockShared ok!

	if (ok@)
		return
	end

	if (processobject@ KeProcess_Terminated + @)
		processobject@ PsProcessCreateDeleteUnlock

		STATUS_PROCESS_IS_TERMINATED ok!

		return
	end

	if (DEBUGCHECKS)
		if (processobject@ PsProcess_CleanedUp + @)
			"PsProcessCreateDeleteAcquireCheck: process cleaned up?\n" KeCrash
		end
	end

	if (needsthread@)
		if (processobject@ KeProcess_SignalThread + @ ~~)
			// there will always be a signal thread so long as there's at
			// least one thread, so this means the process either has no
			// threads anymore or it has never been given one.

			processobject@ PsProcessCreateDeleteUnlock

			STATUS_PROCESS_NO_THREAD ok!

			return
		end
	end
end

fn PsProcessCreateDeleteUnlock { processobject -- }
	processobject@ PsProcess_ThreadCreateDeleteRwLock + ExRwLockRelease
end

fn PsProcessLookupPID { pid -- processobject ok }
	PsProcessTable@ ExHandleTableLockShared ok!

	if (ok@)
		return
	end

	auto entryptr

	pid@ // handle
	PsProcessTable@ // handletable
	1 // locked
	ExHandleLookup ok! entryptr!

	if (ok@)
		PsProcessTable@ ExHandleTableUnlock

		return
	end

	entryptr@@ processobject!

	processobject@ ObObjectReferenceByPointer drop

	PsProcessTable@ ExHandleTableUnlock
end