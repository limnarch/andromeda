#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALDebug.h"

fn PsProcessSignalObject { signal processobject -- ok }
	signal@ // signal
	processobject@ // process
	KeProcessSignal ok!
end

fn PsProcessSignal { signal processhandle -- ok }
	auto obj

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! obj! drop

	if (ok@)
		return
	end

	signal@ // signal
	obj@ // processobject
	PsProcessSignalObject ok!

	obj@ ObObjectDereferenceByPointer drop
end

fn PsProcessReadStatusObject { processobject -- status ok }
	if (processobject@ KeProcess_Terminated + @ ~~)
		STATUS_ALIVE ok!
		return
	end

	0 ok!
	processobject@ KeProcess_KilledStatus + @ status!
end

fn PsProcessReadStatus { processhandle -- status ok }
	auto obj

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! obj! drop

	if (ok@)
		return
	end

	obj@ PsProcessReadStatusObject ok! status!

	obj@ ObObjectDereferenceByPointer drop
end

fn PsProcessCreateDeleteLock { processobject -- ok }
	1 // alertable
	0 // nowait
	processobject@ PsProcess_ThreadCreateDeleteRwLock + // rwlock
	ExRwLockAcquireExclusive ok!
end

fn PsProcessCreateDeleteLockShared { processobject -- ok }
	1 // alertable
	0 // nowait
	0 // canstarve
	processobject@ PsProcess_ThreadCreateDeleteRwLock + // rwlock
	ExRwLockAcquireShared ok!
end

fn PsProcessCreateDeleteAcquireCheck { processobject -- ok }
	processobject@ PsProcessCreateDeleteLockShared ok!

	if (processobject@ KeProcess_Terminated + @)
		processobject@ PsProcessCreateDeleteUnlock

		STATUS_PROCESS_IS_TERMINATED ok!

		return
	end
end

fn PsProcessCreateDeleteUnlock { processobject -- }
	processobject@ PsProcess_ThreadCreateDeleteRwLock + ExRwLockRelease
end

fn PsProcessLookupPID { pid -- processobject ok }
	PsProcessTable@ ExHandleTableLockShared ok!

	if (ok@)
		return
	end

	auto entryptr

	pid@ // handle
	PsProcessTable@ // handletable
	1 // locked
	ExHandleLookup ok! entryptr!

	if (ok@)
		PsProcessTable@ ExHandleTableUnlock

		return
	end

	entryptr@@ processobject!

	processobject@ ObObjectReferenceByPointer drop

	PsProcessTable@ ExHandleTableUnlock
end