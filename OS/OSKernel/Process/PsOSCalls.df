//
// Implements the system calls for the process subsystem.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Object.h"

#include "<inc>/Memory.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "PsInternal.h"

fn OSProcessCreate { quotauid sectionhandle creationflags permissions name -- processhandle ok }
	fnsection "PAGE$text"

	auto kname
	OBNAMEMAX // max
	name@ // string
	ExCallGetString ok! kname!

	if (ok@)
		return
	end

	quotauid@ // quotauid
	sectionhandle@ // sectionhandle
	creationflags@ // creationflags
	permissions@ // permissions
	kname@ // name
	PsProcessCreate ok! processhandle!

	kname@ ExCallFreeString
end

fn OSProcessSignal { signal processhandle -- ok }
	fnsection "PAGE$text"

	signal@ processhandle@ PsProcessSignal ok!
end

fn OSProcessOpenByPID { access pid -- processhandle ok }
	fnsection "PAGE$text"

	access@ pid@ PsProcessOpenByPID ok! processhandle!
end

fn OSProcessQuery { processhandle query -- ok }
	fnsection "PAGE$text"

	auto kquery
	OSProcessInformation_SIZEOF alloc kquery!

	processhandle@ // processhandle
	kquery@ // query
	PsProcessInformationQuery ok!

	if (ok@)
		return
	end

	query@ // dest
	kquery@ // src
	OSProcessInformation_SIZEOF // size
	KeSafeCopyOut ok!
end

fn OSProcessQueryByPID { pid query -- ok }
	fnsection "PAGE$text"

	auto kquery
	OSProcessInformation_SIZEOF alloc kquery!

	pid@ // pid
	kquery@ // query
	PsProcessInformationQueryByPID ok!

	if (ok@)
		return
	end

	query@ // dest
	kquery@ // src
	OSProcessInformation_SIZEOF // size
	KeSafeCopyOut ok!
end

fn OSProcessReadStatus { processhandle -- status ok }
	fnsection "PAGE$text"

	processhandle@ PsProcessReadStatus ok! status!
end

fn OSProcessSignalActivation { activationstatus -- ok }
	fnsection "PAGE$text"

	activationstatus@ PsProcessSignalActivation ok!
end

fn OSProcessWaitForActivation { timeout processhandle -- activationstatus ok }
	fnsection "PAGE$text"

	timeout@ processhandle@ PsProcessWaitForActivation ok! activationstatus!
end

fn OSProcessExit { status -- }
	fnsection "PAGE$text"

	auto process
	KeProcessCurrent process!

	status@ process@ KeProcess_KilledStatus + !

	auto ok
	OSSIGNAL_KILL // signal
	process@ // process
	KeProcessSignal ok!

	if (ok@)
		ok@ "OSProcessExit: KeProcessSignal failed (%i)\n" KeCrash
	end
end

fn OSProcessCountQuery { -- count ok }
	fnsection "PAGE$text"

	0 ok!
	PsActiveProcessCount@ count!
end

fn OSProcessQueryAll { buffer maxquery -- count ok }
	fnsection "PAGE$text"

	PsActiveProcessCount@ maxquery@ min maxquery!

	maxquery@ OSProcessInformation_SIZEOF * MmQuotaChargeBuffer ok!

	if (ok@)
		return
	end

	auto kbuffer
	maxquery@ OSProcessInformation_SIZEOF * // bytes
	'PsQu' // tag
	CANBLOCK // flags
	MmAllocWithTag ok! kbuffer!

	if (ok@)
		maxquery@ OSProcessInformation_SIZEOF * MmQuotaUnchargeBuffer
		return
	end

	kbuffer@ // buffer
	maxquery@ // maxquery
	PsProcessQueryAll ok! count!

	if (ok@)
		kbuffer@ MmFree
		maxquery@ OSProcessInformation_SIZEOF * MmQuotaUnchargeBuffer
		return
	end

	buffer@ // dest
	kbuffer@ // src
	maxquery@ OSProcessInformation_SIZEOF * // size
	KeSafeCopyOut ok!

	kbuffer@ MmFree
	maxquery@ OSProcessInformation_SIZEOF * MmQuotaUnchargeBuffer
end

fn OSProcessSetConsoleGroup { filehandle processhandle -- ok }
	fnsection "PAGE$text"

	if (filehandle@ OSNONE ==)
		processhandle@ PsProcessClearConsoleGroup ok!
	end else
		filehandle@ processhandle@ PsProcessSetConsoleGroup ok!
	end
end

fn OSProcessBasePrioritySet { priority processhandle -- ok }
	fnsection "PAGE$text"

	priority@ processhandle@ PsProcessBasePrioritySet ok!
end

fn OSSetQuota { quota processhandle -- ok }
	fnsection "PAGE$text"

	SYSTEMPERMISSION_SETQUOTA // permission
	KeProcessCurrent // process
	SeProcessCheckPermission ok!

	if (ok@)
		return
	end

	auto kquota
	OSQuota_SIZEOF alloc kquota!

	kquota@ // dest
	quota@ // src
	OSQuota_SIZEOF // size
	KeSafeCopyIn ok!

	if (ok@)
		return
	end

	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	kquota@ // quota
	processobject@ PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ // quotablock
	MmSetQuota

	processobject@ ObObjectDereferenceByPointer drop
end

fn OSQuotaQuery { query processhandle -- ok }
	fnsection "PAGE$text"

	auto processobject
	auto access

	PsProcessObjectType@ // type
	processhandle@ // handle
	ObObjectReferenceByHandle ok! processobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_READ SeCheckAccess ok!

	if (ok@)
		processobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto kquery
	OSQuotaInformation_SIZEOF alloc kquery!

	kquery@ // ptr
	OSQuotaInformation_SIZEOF // size
	0 // word
	memset

	kquery@ // query
	processobject@ PsProcess_PagedArea + @ PsProcessPaged_QuotaBlock + @ // quotablock
	MmQuotaQuery

	query@ // dest
	kquery@ // src
	OSMemoryInformation_SIZEOF // size
	KeSafeCopyOut ok!

	processobject@ ObObjectDereferenceByPointer drop
end

fn OSThreadSetFilePermissions { filepermissions -- ok }
	fnsection "PAGE$text"

	filepermissions@ KeThreadCurrent@ PsThread_FileCreationPermissions + !
	0 ok!
end

fn OSThreadSleep { ms -- ok }
	fnsection "PAGE$text"

	ms@ // ms
	USERMODE // waitmode
	1 // alertable
	KeThreadSleep ok!
end

fn OSThreadCreate { context startfunc creationflags permissions name processhandle -- threadhandle ok }
	fnsection "PAGE$text"

	auto kname
	OBNAMEMAX // max
	name@ // string
	ExCallGetString ok! kname!

	if (ok@)
		return
	end

	startfunc@ // context1
	context@ // context2
	pointerof PsThreadUserEntry // startfunc
	creationflags@ // creationflags
	permissions@ // permissions
	kname@ // name
	processhandle@ // processhandle
	PsThreadCreate ok! threadhandle!

	kname@ ExCallFreeString
end

fn OSThreadTerminate { status threadhandle -- ok }
	fnsection "PAGE$text"

	status@ threadhandle@ PsThreadTerminate ok!
end

fn OSThreadSuspend { threadhandle -- ok }
	fnsection "PAGE$text"

	threadhandle@ PsThreadSuspend ok!
end

fn OSThreadResume { threadhandle -- ok }
	fnsection "PAGE$text"

	threadhandle@ PsThreadResume ok!
end

fn OSThreadReadStatus { threadhandle -- status ok }
	fnsection "PAGE$text"

	threadhandle@ PsThreadReadStatus ok! status!
end

fn OSThreadQuery { threadhandle query -- ok }
	fnsection "PAGE$text"

	auto kquery
	OSThreadInformation_SIZEOF alloc kquery!

	threadhandle@ // threadhandle
	kquery@ // query
	PsThreadInformationQuery ok!

	if (ok@)
		return
	end

	query@ // dest
	kquery@ // src
	OSThreadInformation_SIZEOF // size
	KeSafeCopyOut ok!
end

fn OSThreadSignal { signal threadhandle -- ok }
	fnsection "PAGE$text"

	signal@ threadhandle@ PsThreadSignal ok!
end

fn OSThreadMaskSignal { signal threadhandle -- ok }
	fnsection "PAGE$text"

	signal@ threadhandle@ PsThreadMaskSignal ok!
end

fn OSThreadDeliverOnWaitSignal { signal threadhandle -- ok }
	fnsection "PAGE$text"

	signal@ threadhandle@ PsThreadDeliverOnWaitSignal ok!
end

fn OSJobCreate { parentjobhandle signalonclose flags permissions name -- jobhandle ok }
	fnsection "PAGE$text"

	auto kname
	0 kname!

	if (name@)
		OBNAMEMAX // max
		name@ // string
		ExCallGetString ok! kname!

		if (ok@)
			return
		end
	end

	parentjobhandle@ // parentjobhandle
	signalonclose@ // signalonclose
	flags@ // flags
	permissions@ // permissions
	kname@ // name
	PsJobCreate ok! jobhandle!

	if (name@)
		kname@ ExCallFreeString
	end
end

fn OSJobAddProcess { processhandle jobhandle -- ok }
	fnsection "PAGE$text"

	processhandle@ jobhandle@ PsJobAddProcess ok!
end

fn OSJobRemoveProcess { processhandle -- ok }
	fnsection "PAGE$text"

	processhandle@ PsJobRemoveProcess ok!
end

fn OSJobSignal { propagate signal jobhandle -- ok }
	fnsection "PAGE$text"

	propagate@ signal@ jobhandle@ PsJobSignal ok!
end