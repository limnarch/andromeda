//
// Implements usermode entry.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

#include "PsInternal.h"

fn PsThreadUserEntry { context1 context2 -- }
	// this is the start function for every usermode thread ever.

	// copy TEB to userspace

	auto thread
	KeThreadCurrent@ thread!

	auto kteb
	OSThreadEnvironmentBlock_SIZEOF alloc kteb!

	kteb@ // ptr
	OSThreadEnvironmentBlock_SIZEOF // sz
	0 // word
	memset

	thread@ PsThread_StackHasGuardPage + @ kteb@ OSThreadEnvironmentBlock_StackHasGuardPage + !
	thread@ PsThread_StackTop + @ kteb@ OSThreadEnvironmentBlock_StackTop + !
	thread@ PsThread_StackBottom + @ kteb@ OSThreadEnvironmentBlock_StackBottom + !
	thread@ PsThread_TID + @ kteb@ OSThreadEnvironmentBlock_ThreadID + !

	thread@ PsThread_UTEB + @ // dest
	kteb@ // src
	OSThreadEnvironmentBlock_SIZEOF // size
	KeSafeCopyOut drop

	thread@ PsThread_UTEB + @ // teb
	PsOSDLLInformation PsOSDLLInfo_ExitFunction + @ // exitfunc
	context2@ // context
	KeThreadCurrent@ PsThread_StackTop + @ // ustack
	context1@ // entryfunc
	KeEnterUserMode

	// KeEnterUserMode should not return

	"PsThreadUserEntry\n" KeCrash
end

fn PsPrepareUsermode { trapframe -- }
	// called before the exception handler returns to usermode.
	// handles thread termination and signal dispatch.

	// called with all interrupts disabled, which is unique for code running
	// outside of Ke...

	auto process
	KeProcessCurrent process!

	auto thread
	KeThreadCurrent@ thread!

	while (1)
		// loop until there are no more events.

		if (process@ KeProcess_TerminatedB + gb
			thread@ KeThread_Signals + @ 1 OSSIGNAL_KILL << & ||)

			HALCPUInterruptEnable

			PsiThreadExit

			if (DEBUGCHECKS)
				"PsPrepareUsermode\n" KeCrash
			end
		end

		if (thread@ KeThread_SignalAcceptMask + @
			thread@ KeThread_SignalDeliverOnWaitMask + @ ~ &
			thread@ KeThread_Signals + @ &)

			HALCPUInterruptEnable

			PsOSDLLInformation PsOSDLLInfo_SignalDispatchFunction + @ // dispatchfunc
			trapframe@ // trapframe
			KeThreadDispatchSignal

			HALCPUInterruptDisable drop

			continue
		end

		if (thread@ KeThread_SuspendedB + gb)
			// suspend!

			HALCPUInterruptEnable

			KeThreadWaitSuspended

			HALCPUInterruptDisable drop

			continue
		end

		if (thread@ KeThread_UserAPCTriggeredB + gb)
			// a user APC was previously triggered, deliver it.

			0 thread@ KeThread_UserAPCTriggeredB + sb

			if (thread@ KeThread_UserAPCListHead + @)
				HALCPUInterruptEnable

				PsOSDLLInformation PsOSDLLInfo_APCDispatchFunction + @ // dispatchfunc
				trapframe@ // trapframe
				KeAPCDispatchQueueUser

				HALCPUInterruptDisable drop

				continue
			end
		end

		return
	end
end