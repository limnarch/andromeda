#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALDebug.h"

fn PsThreadResumeObject { threadobject -- }
	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (threadobject@ PsThread_Suspended + @)
		0 threadobject@ PsThread_Suspended + !
		QUEUEBACK threadobject@ KeThreadReady
	end

	ipl@ KeIPLLower
end

fn PsThreadResume { threadhandle -- ok }
	auto obj

	PsThreadObjectType@ // type
	threadhandle@ // handle
	ObObjectReferenceByHandle ok! obj! drop

	if (ok@)
		return
	end

	obj@ PsThreadResumeObject

	obj@ ObObjectDereferenceByPointer drop
end

fn PsThreadReadStatusObject { threadobject -- status ok }
	if (threadobject@ KeThread_Killed + @ ~~)
		STATUS_ALIVE ok!
		return
	end

	0 ok!
	threadobject@ KeThread_KilledStatus + @ status!
end

fn PsThreadReadStatus { threadhandle -- status ok }
	auto obj

	PsThreadObjectType@ // type
	threadhandle@ // handle
	ObObjectReferenceByHandle ok! obj! drop

	if (ok@)
		return
	end

	obj@ PsThreadReadStatusObject ok! status!

	obj@ ObObjectDereferenceByPointer drop
end