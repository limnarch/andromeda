//
// Implements management routines for the executive thread object.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALDebug.h"

#include "PsInternal.h"

fn PsThreadGetFilePermissions { threadobject -- filepermissions }
	threadobject@ PsThread_FileCreationPermissions + @ filepermissions!
end

fn PsThreadSuspend { threadhandle -- ok }
	fnsection "PAGE$text"

	auto obj
	auto access

	PsThreadObjectType@ // type
	threadhandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		return
	end

	access@ ACCESS_EXEC SeCheckAccess ok!

	if (ok@)
		obj@ ObObjectDereferenceByPointer drop

		return
	end

	obj@ KeThreadSuspend

	obj@ ObObjectDereferenceByPointer drop
end

fn PsThreadResume { threadhandle -- ok }
	fnsection "PAGE$text"

	auto obj
	auto access

	PsThreadObjectType@ // type
	threadhandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		return
	end

	access@ ACCESS_EXEC SeCheckAccess ok!

	if (ok@)
		obj@ ObObjectDereferenceByPointer drop

		return
	end

	obj@ KeThreadResume

	obj@ ObObjectDereferenceByPointer drop
end

fn PsThreadReadStatusObject { threadobject -- status ok }
	fnsection "PAGE$text"

	if (threadobject@ PsThread_TerminationEvent + KeDispatchHeader_Signaled + @ ~~)
		STATUS_ALIVE ok!
	end

	0 ok!
	threadobject@ KeThread_KilledStatus + @ status!
end

fn PsThreadReadStatus { threadhandle -- status ok }
	fnsection "PAGE$text"

	auto obj

	PsThreadObjectType@ // type
	threadhandle@ // handle
	ObObjectReferenceByHandle ok! obj! drop

	if (ok@)
		return
	end

	obj@ PsThreadReadStatusObject ok! status!

	obj@ ObObjectDereferenceByPointer drop
end

fn PsThreadInformationQueryObject { threadobject query -- ok }
	fnsection "PAGE$text"

	0 ok!

	query@ // ptr
	OSThreadInformation_SIZEOF // size
	0 // word
	memset

	threadobject@ KeThread_StatusB + gb query@ OSThreadInformation_Status + !
	threadobject@ KeThread_Signals + @ OSSIGNAL_KILL & query@ OSThreadInformation_Terminated + !
	threadobject@ KeThread_KilledStatus + @ query@ OSThreadInformation_ExitStatus + !

	threadobject@ KeThread_UserTimeMs + @ query@ OSThreadInformation_UserTimeMs + !
	threadobject@ KeThread_SystemTimeMs + @ query@ OSThreadInformation_SystemTimeMs + !
	threadobject@ KeThread_DPCTimeMs + @ query@ OSThreadInformation_DPCTimeMs + !
end

fn PsThreadInformationQuery { threadhandle query -- ok }
	fnsection "PAGE$text"

	auto threadobject

	PsThreadObjectType@ // type
	threadhandle@ // handle
	ObObjectReferenceByHandle ok! threadobject! drop

	if (ok@)
		return
	end

	threadobject@ // threadobject
	query@ // query
	PsThreadInformationQueryObject ok!

	threadobject@ ObObjectDereferenceByPointer drop
end

fn PsThreadSignalObject { signal threadobject -- ok }
	fnsection "PAGE$text"

	if (signal@ OSSIGNAL_KILL ==)
		137 threadobject@ KeThread_KilledStatus + !
	end

	signal@ // signal
	threadobject@ // thread
	KeThreadSignal ok!
end

fn PsThreadSignal { signal threadhandle -- ok }
	fnsection "PAGE$text"

	auto obj
	auto access

	PsThreadObjectType@ // type
	threadhandle@ // handle
	ObObjectReferenceByHandle ok! obj! access!

	if (ok@)
		return
	end

	access@ ACCESS_EXEC SeCheckAccess ok!

	if (ok@)
		obj@ ObObjectDereferenceByPointer drop

		return
	end

	signal@ // signal
	obj@ // threadobject
	PsThreadSignalObject ok!

	obj@ ObObjectDereferenceByPointer drop
end

fn PsThreadMaskSignal { signal threadhandle -- ok }
	fnsection "PAGE$text"

	auto threadobject
	auto access

	PsThreadObjectType@ // type
	threadhandle@ // handle
	ObObjectReferenceByHandle ok! threadobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		threadobject@ ObObjectDereferenceByPointer drop

		return
	end

	signal@ // signal
	threadobject@ // thread
	KeThreadMaskSignal ok!

	threadobject@ ObObjectDereferenceByPointer drop
end

fn PsThreadUnmaskSignal { signal threadhandle -- ok }
	fnsection "PAGE$text"

	auto threadobject
	auto access

	PsThreadObjectType@ // type
	threadhandle@ // handle
	ObObjectReferenceByHandle ok! threadobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE SeCheckAccess ok!

	if (ok@)
		threadobject@ ObObjectDereferenceByPointer drop

		return
	end

	signal@ // signal
	threadobject@ // thread
	KeThreadUnmaskSignal ok!

	threadobject@ ObObjectDereferenceByPointer drop
end