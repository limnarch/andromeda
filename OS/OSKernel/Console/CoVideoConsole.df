#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALArgs.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALConsole.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<inc>/Video.h"

#include "<inc>/Console.h"

#include "<ll>/OSDLL/OS.h"

var CoVideoConsole 0
public CoVideoConsole

var CoVideoConsoleFont 0

// set by keyboard driver (or whatever is feeding the video console)
var CoVideoConsoleRawBuffer 0
public CoVideoConsoleRawBuffer

var CoVideoConsoleScreenWidth 0
var CoVideoConsoleScreenHeight 0

var CoVideoConsoleFontWidth 0
var CoVideoConsoleFontHeight 0

var CoVideoConsoleColumns 0
var CoVideoConsoleRows 0

var CoVideoConsoleWindowWidth 0
var CoVideoConsoleWindowHeight 0

var CoVideoConsoleWindowX 0
var CoVideoConsoleWindowY 0

var CoVideoConsoleUpdateBuffer 0
var CoVideoConsoleOnScreenBuffer 0

var CoVideoConsoleUpdateCursorX 0
var CoVideoConsoleUpdateCursorY 0

var CoVideoConsoleOnScreenCursorX 0
var CoVideoConsoleOnScreenCursorY 0

var CoVideoConsoleIsDirty 0

var CoVideoConsoleDirtyX1 -1
var CoVideoConsoleDirtyY1 0

var CoVideoConsoleDirtyX2 0
var CoVideoConsoleDirtyY2 0

var CoVideoConsoleNeedsDraw 1

const VIDEOCONSOLEDEFAULTFG 0 // black
const VIDEOCONSOLEDEFAULTBG 15 // white

var CoVideoConsoleFG VIDEOCONSOLEDEFAULTFG
var CoVideoConsoleBG VIDEOCONSOLEDEFAULTBG

var CoVideoConsoleEscape 0

table CoVideoConsoleColorTable
	0x000000 // black
	0xFF0000 // red
	0x007300 // green
	0xFFFF00 // yellow
	0x0000A4 // blue
	0xFF00FF // magenta
	0x00FFFF // cyan
	0xB4B4B4 // light gray
	0x393939 // dark gray
	0xF68373 // light red
	0x7BFFBD // light green
	0xFFFFB4 // light yellow
	0xB4D5FF // light blue
	0xFF7BFF // light magenta
	0xB4FFFF // light cyan
	0xFFFFFF // white
endtable

buffer CoVideoConsoleOutputEvent KeEvent_SIZEOF

fn CoVideoConsoleInit { -- }
	if (CoVideoConsoleRawBuffer@ ~~)
		// no input device
		return
	end

	auto ok

	KVQuery ok! CoVideoConsoleScreenHeight! CoVideoConsoleScreenWidth!

	if (ok@)
		// no boot video
		return
	end

	auto font
	"VideoConsoleFont" // name
	KVFontGet ok! font!

	if (ok@)
		// no font
		return
	end

	font@ KVFontQuery CoVideoConsoleFontHeight! CoVideoConsoleFontWidth!

	font@ CoVideoConsoleFont!

	auto deviceobject

	pointerof CoVideoConsoleOutput // outputfunc
	0 // context
	CoVideoConsoleRawBuffer@ // rawbuffer
	0 // quotablock
	"ttyV0" // name
	SeSystemUser@ // owninguser
	ACCESS_OWNER_READ ACCESS_OWNER_WRITE | ACCESS_GROUP_READ | ACCESS_GROUP_WRITE | // permissions
	1 // permanent
	CoConsoleCreateObject ok! deviceobject! drop

	if (ok@)
		return
	end

	deviceobject@ IODeviceDirectoryInsert ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "CoVideoConsoleInit: failed to insert ttyV0 (%i)\n" KeCrash
		end
	end

	CoVideoConsoleScreenWidth@ CoVideoConsoleFontWidth@ / 80 min CoVideoConsoleColumns!
	CoVideoConsoleScreenHeight@ CoVideoConsoleFontHeight@ / 30 min CoVideoConsoleRows!

	auto buf
	CoVideoConsoleRows@ CoVideoConsoleColumns@ * 4 * // bytes
	'CoBf' // tag
	MmAllocWithTag ok! buf!

	if (ok@)
		ok@ "CoVideoConsoleInit: failed to create text buffers for ttyV0 (%i)\n" KeCrash
	end

	buf@ CoVideoConsoleUpdateBuffer!
	buf@ CoVideoConsoleRows@ CoVideoConsoleColumns@ * 2 * + CoVideoConsoleOnScreenBuffer!

	CoVideoConsoleUpdateBuffer@ CoVideoConsoleInitializeBuffer
	CoVideoConsoleOnScreenBuffer@ CoVideoConsoleInitializeBuffer

	CoVideoConsoleColumns@ CoVideoConsoleFontWidth@ * CoVideoConsoleWindowWidth!
	CoVideoConsoleRows@ CoVideoConsoleFontHeight@ * CoVideoConsoleWindowHeight!

	CoVideoConsoleScreenWidth@ 2 / CoVideoConsoleWindowWidth@ 2 / - CoVideoConsoleWindowX!
	CoVideoConsoleScreenHeight@ 2 / CoVideoConsoleWindowHeight@ 2 / - CoVideoConsoleWindowY!

	0 // signaled
	OSEVENT_SYNCH // type
	"CoVideoConsoleOutputEvent" // name
	CoVideoConsoleOutputEvent // event
	KeEventInitialize

	auto i
	0 i!

	while (i@ 16 <)
		[i@]CoVideoConsoleColorTable@ KVRGB24ToNative [i@]CoVideoConsoleColorTable!
		1 i +=
	end

	deviceobject@ IODeviceGetExtension CoVideoConsole!

	0 // context1
	0 // context2
	pointerof CoVideoConsoleDrawWorker // startfunc
	0 // creationflags
	ACCESS_OWNER_ALL // permissions
	"VideoConsoleDraw" // name
	PsSystemProcess@ // processobject
	PsThreadCreateObject ok! drop

	if (ok@)
		ok@ "CoVideoConsoleInit: couldn't create 'VideoConsoleDraw' thread (%i)\n" KeCrash
	end
end

const VIDEOCONSOLEWINDOWBGCOLOR 0xFFFFFF // white
const VIDEOCONSOLETITLEBGCOLOR  0xE0E0E0 // light gray
const VIDEOCONSOLEBGCOLOR       0x8ADFC9 // a shade of mint

const VIDEOCONSOLEDECOMARGINS 30 // pixel margin required for window decoration drawing

const VIDEOCONSOLETEXTMARGINS 8 // pixel margin between window border and text

fn CoVideoConsoleDrawTitleBar { x y w h -- }
	0x000000 KVRGB24ToNative // nativecolor
	x@ // x
	y@ // y
	w@ // w
	h@ // h
	KVDrawEmptyRectangle

	0x000000 KVRGB24ToNative // nativecolor
	x@ // x
	y@ // y
	w@ 1 - // w
	h@ // h
	KVDrawEmptyRectangle

	VIDEOCONSOLETITLEBGCOLOR KVRGB24ToNative // nativecolor
	x@ 1 + // x
	y@ 1 + // y
	w@ 2 - // w
	h@ 2 - // h
	KVDrawFilledRectangle

	0x000000 KVRGB24ToNative // nativecolor
	x@ // x
	y@ // y
	w@ 2 - // w
	h@ 1 - // h
	KVDrawEmptyRectangle

	auto color
	0xF1F1FF color!

	1 x +=
	1 y +=

	auto width
	w@ 2 - 64 / width!

	auto margin
	w@ 2 - width@ 64 * - margin!

	auto count
	64 count!

	while (count@)
		if (count@ 1 ==)
			margin@ width +=
		end

		color@ KVRGB24ToNative // nativecolor
		x@ // x
		y@ // y
		width@ // w
		h@ 2 - // h
		KVDrawFilledRectangle

		0x020100 color -=
		width@ x +=
		1 count -=
	end
end

fn CoVideoConsoleDraw { -- }
	// (re)draw the video console programmatically.
	auto deco
	1 deco!

	if (CoVideoConsoleScreenWidth@ CoVideoConsoleWindowWidth@ - VIDEOCONSOLEDECOMARGINS <)
		0 deco!
	end elseif (CoVideoConsoleScreenHeight@ CoVideoConsoleWindowHeight@ - VIDEOCONSOLEDECOMARGINS <)
		0 deco!
	end

	if (deco@)
		VIDEOCONSOLEBGCOLOR KVRGB24ToNative // nativecolor
		KVClearScreen

		// title bar

		CoVideoConsoleWindowX@ VIDEOCONSOLETEXTMARGINS - 1 - // x
		CoVideoConsoleWindowY@ VIDEOCONSOLETEXTMARGINS - 22 - // y
		CoVideoConsoleWindowWidth@ VIDEOCONSOLETEXTMARGINS 2 * + 2 + // w
		22 // h
		CoVideoConsoleDrawTitleBar

		// window body

		0x000000 KVRGB24ToNative // nativecolor
		CoVideoConsoleWindowX@ VIDEOCONSOLETEXTMARGINS - 1 - // x
		CoVideoConsoleWindowY@ VIDEOCONSOLETEXTMARGINS - 1 - // y
		CoVideoConsoleWindowWidth@ VIDEOCONSOLETEXTMARGINS 2 * + 1 + // w
		CoVideoConsoleWindowHeight@ VIDEOCONSOLETEXTMARGINS 2 * + 1 + // h
		KVDrawEmptyRectangle

		0x000000 KVRGB24ToNative // nativecolor
		CoVideoConsoleWindowX@ VIDEOCONSOLETEXTMARGINS - 1 - // x
		CoVideoConsoleWindowY@ VIDEOCONSOLETEXTMARGINS - 1 - // y
		CoVideoConsoleWindowWidth@ VIDEOCONSOLETEXTMARGINS 2 * + 2 + // w
		CoVideoConsoleWindowHeight@ VIDEOCONSOLETEXTMARGINS 2 * + 2 + // h
		KVDrawEmptyRectangle

		VIDEOCONSOLEWINDOWBGCOLOR KVRGB24ToNative // nativecolor
		CoVideoConsoleWindowX@ VIDEOCONSOLETEXTMARGINS - // x
		CoVideoConsoleWindowY@ VIDEOCONSOLETEXTMARGINS - // y
		CoVideoConsoleWindowWidth@ VIDEOCONSOLETEXTMARGINS 2 * + // w
		CoVideoConsoleWindowHeight@ VIDEOCONSOLETEXTMARGINS 2 * + // h
		KVDrawFilledRectangle

		0xB0B0B0 KVRGB24ToNative // nativecolor
		CoVideoConsoleWindowX@ VIDEOCONSOLETEXTMARGINS - // x
		CoVideoConsoleWindowY@ VIDEOCONSOLETEXTMARGINS - // y
		CoVideoConsoleWindowWidth@ VIDEOCONSOLETEXTMARGINS 2 * + 1 - // w
		CoVideoConsoleWindowHeight@ VIDEOCONSOLETEXTMARGINS 2 * + 1 - // h
		KVDrawEmptyRectangle

		0xD0D0D0 KVRGB24ToNative // nativecolor
		CoVideoConsoleWindowX@ VIDEOCONSOLETEXTMARGINS - // x
		CoVideoConsoleWindowY@ VIDEOCONSOLETEXTMARGINS - // y
		CoVideoConsoleWindowWidth@ VIDEOCONSOLETEXTMARGINS 2 * + 2 - // w
		CoVideoConsoleWindowHeight@ VIDEOCONSOLETEXTMARGINS 2 * + 2 - // h
		KVDrawEmptyRectangle

		0xB0B0B0 KVRGB24ToNative // nativecolor
		CoVideoConsoleWindowX@ VIDEOCONSOLETEXTMARGINS - 1 + // x
		CoVideoConsoleWindowY@ VIDEOCONSOLETEXTMARGINS - 1 + // y
		CoVideoConsoleWindowWidth@ VIDEOCONSOLETEXTMARGINS 2 * + 4 - // w
		CoVideoConsoleWindowHeight@ VIDEOCONSOLETEXTMARGINS 2 * + 4 - // h
		KVDrawEmptyRectangle

		0x000000 KVRGB24ToNative // nativecolor
		CoVideoConsoleWindowX@ VIDEOCONSOLETEXTMARGINS - 2 + // x
		CoVideoConsoleWindowY@ VIDEOCONSOLETEXTMARGINS - 2 + // y
		CoVideoConsoleWindowWidth@ VIDEOCONSOLETEXTMARGINS 2 * + 5 - // w
		CoVideoConsoleWindowHeight@ VIDEOCONSOLETEXTMARGINS 2 * + 5 - // h
		KVDrawEmptyRectangle
	end else
		VIDEOCONSOLEWINDOWBGCOLOR KVRGB24ToNative // nativecolor
		KVClearScreen
	end

	HALConsoleStolen
end

fn CoVideoConsoleInitializeBuffer { buf -- }
	buf@ // ptr
	CoVideoConsoleColumns@ CoVideoConsoleRows@ * 1 << // size
	VIDEOCONSOLEDEFAULTBG 28 << VIDEOCONSOLEDEFAULTFG 24 << |
	VIDEOCONSOLEDEFAULTBG 12 << VIDEOCONSOLEDEFAULTFG 8 << | | // word
	memset
end

fn CoVideoConsoleClear { -- }
	CoVideoConsoleUpdateBuffer@ CoVideoConsoleInitializeBuffer

	0 CoVideoConsoleDirtyX1!
	0 CoVideoConsoleDirtyY1!

	0 CoVideoConsoleUpdateCursorX!
	0 CoVideoConsoleUpdateCursorY!

	CoVideoConsoleColumns@ 1 - CoVideoConsoleDirtyX2!
	CoVideoConsoleRows@ 1 - CoVideoConsoleDirtyY2!

	VIDEOCONSOLEDEFAULTFG CoVideoConsoleFG!
	VIDEOCONSOLEDEFAULTBG CoVideoConsoleBG!

	1 CoVideoConsoleIsDirty!
end

fn CoVideoConsoleScroll { -- }
	CoVideoConsoleUpdateBuffer@ // dest
	CoVideoConsoleUpdateBuffer@ CoVideoConsoleColumns@ 1 << + // src
	CoVideoConsoleColumns@ CoVideoConsoleRows@ 1 - * 1 << // size
	memcpy

	CoVideoConsoleUpdateBuffer@ CoVideoConsoleColumns@ CoVideoConsoleRows@ 1 - * 1 << + // ptr
	CoVideoConsoleColumns@ 1 << // size
	VIDEOCONSOLEDEFAULTBG 28 << VIDEOCONSOLEDEFAULTFG 24 << |
	VIDEOCONSOLEDEFAULTBG 12 << VIDEOCONSOLEDEFAULTFG 8 << | | // word // word
	memset

	0 CoVideoConsoleDirtyX1!
	0 CoVideoConsoleDirtyY1!

	CoVideoConsoleColumns@ 1 - CoVideoConsoleDirtyX2!
	CoVideoConsoleRows@ 1 - CoVideoConsoleDirtyY2!

	1 CoVideoConsoleIsDirty!
end

fn CoVideoConsoleNewline { -- }
	0 CoVideoConsoleUpdateCursorX!
	1 CoVideoConsoleUpdateCursorY +=

	if (CoVideoConsoleUpdateCursorY@ CoVideoConsoleRows@ >=)
		CoVideoConsoleRows@ 1 - CoVideoConsoleUpdateCursorY!
		CoVideoConsoleScroll
	end

	1 CoVideoConsoleIsDirty!
end

fn CoVideoConsoleBackUp { -- }
	if (CoVideoConsoleUpdateCursorX@ 0 ==)
		if (CoVideoConsoleUpdateCursorY@)
			1 CoVideoConsoleUpdateCursorY -=
		end

		CoVideoConsoleColumns@ 1 - CoVideoConsoleUpdateCursorX!
	end else
		1 CoVideoConsoleUpdateCursorX -=
	end

	1 CoVideoConsoleIsDirty!
end

fn CoVideoConsoleRubout { -- }
	CoVideoConsoleBackUp
	' ' CoVideoConsolePutCharacter
	CoVideoConsoleBackUp
end

const PARAMCOUNT 4
table CoVideoConsoleEscapeParameters[PARAMCOUNT]

var CoVideoConsoleEscapeIndex 0

var CoVideoConsoleInverted 0

fn CoVideoConsoleSetColor { -- }
	auto color

	auto param0
	[0]CoVideoConsoleEscapeParameters@ param0!

	if (param0@ 0 ==)
		VIDEOCONSOLEDEFAULTFG CoVideoConsoleFG!
		VIDEOCONSOLEDEFAULTBG CoVideoConsoleBG!

		0 CoVideoConsoleInverted!

		return
	end elseif (param0@ 7 ==)
		if (CoVideoConsoleInverted@ ~~)
			CoVideoConsoleFG@ color!
			CoVideoConsoleBG@ CoVideoConsoleFG!
			color@ CoVideoConsoleBG!

			1 CoVideoConsoleInverted!
		end

		return
	end elseif (param0@ 39 ==)
		VIDEOCONSOLEDEFAULTFG CoVideoConsoleFG!
	end elseif (param0@ 49 ==)
		VIDEOCONSOLEDEFAULTBG CoVideoConsoleBG!
	end elseif (param0@ 30 >= param0@ 37 <= &&) // foreground, first 8
		param0@ 30 - CoVideoConsoleFG!
	end elseif (param0@ 40 >= param0@ 47 <= &&) // background, first 8
		param0@ 40 - CoVideoConsoleBG!
	end elseif (param0@ 90 >= param0@ 97 <= &&) // foreground, second 8
		param0@ 90 - 8 + CoVideoConsoleFG!
	end elseif (param0@ 100 >= param0@ 107 <= &&) // background, second 8
		param0@ 100 - 8 + CoVideoConsoleBG!
	end
end

fn CoVideoConsoleParseEscape { c -- }
	if (c@ '0' >= c@ '9' <= &&)
		auto np
		[CoVideoConsoleEscapeIndex@]CoVideoConsoleEscapeParameters np!

		10 np@ *=
		c@ '0' - np@ +=

		return
	end

	if (c@ '[' ==)
		return
	end elseif (c@ ';' ==)
		1 CoVideoConsoleEscapeIndex +=

		if (CoVideoConsoleEscapeIndex@ PARAMCOUNT >=)
			0 CoVideoConsoleEscapeIndex!
		end

		return
	end elseif (c@ 'm' ==)
		CoVideoConsoleSetColor
	end elseif (c@ 'c' ==)
		CoVideoConsoleClear
	end elseif (c@ 'K' ==)
		// TODO clear line
	end

	0 CoVideoConsoleEscape!
end

fn CoVideoConsolePutCharacter { c -- }
	if (c@ 0x7F >)
		return
	end

	if (c@ 0 ==)
		return
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (CoVideoConsoleEscape@)
		c@ CoVideoConsoleParseEscape
		ipl@ KeIPLLower
		return
	end elseif (c@ 0x1B ==)
		0 CoVideoConsoleEscapeIndex!
		1 CoVideoConsoleEscape!

		auto i
		0 i!

		while (i@ PARAMCOUNT <)
			0 [i@]CoVideoConsoleEscapeParameters!
			1 i +=
		end

		ipl@ KeIPLLower
		return
	end elseif (c@ '\n' ==)
		CoVideoConsoleNewline
		ipl@ KeIPLLower
		return
	end elseif (c@ '\b' ==)
		CoVideoConsoleBackUp
		ipl@ KeIPLLower
		return
	end elseif (c@ 0x7F ==)
		CoVideoConsoleRubout
		ipl@ KeIPLLower
		return
	end elseif (c@ '\t' ==)
		' ' c!
	end elseif (c@ '\r' ==)
		0 CoVideoConsoleUpdateCursorX!
		1 CoVideoConsoleIsDirty!
		ipl@ KeIPLLower
		return
	end

	auto curx
	CoVideoConsoleUpdateCursorX@ curx!

	auto cury
	CoVideoConsoleUpdateCursorY@ cury!

	auto bufp
	CoVideoConsoleUpdateBuffer@
	cury@ CoVideoConsoleColumns@ * 1 << +
	curx@ 1 << + bufp!

	CoVideoConsoleFG@ CoVideoConsoleBG@ 4 << | bufp@ 1 + sb
	c@ bufp@ sb

	if (CoVideoConsoleDirtyX1@ -1 ==)
		curx@ CoVideoConsoleDirtyX1!
		cury@ CoVideoConsoleDirtyY1!

		curx@ CoVideoConsoleDirtyX2!
		cury@ CoVideoConsoleDirtyY2!
	end else
		if (curx@ CoVideoConsoleDirtyX1@ <)
			curx@ CoVideoConsoleDirtyX1!
		end elseif (curx@ CoVideoConsoleDirtyX2@ >)
			curx@ CoVideoConsoleDirtyX2!
		end

		if (cury@ CoVideoConsoleDirtyY1@ <)
			cury@ CoVideoConsoleDirtyY1!
		end elseif (cury@ CoVideoConsoleDirtyY2@ >)
			cury@ CoVideoConsoleDirtyY2!
		end
	end

	curx@ 1 + CoVideoConsoleUpdateCursorX!

	if (CoVideoConsoleUpdateCursorX@ CoVideoConsoleColumns@ >=)
		CoVideoConsoleNewline
	end

	1 CoVideoConsoleIsDirty!

	ipl@ KeIPLLower
end

fn (CoOutputFunction) CoVideoConsoleOutput { echo console -- ok }
	auto outputbuffer
	console@ CoConsoleOutputBufferGet outputbuffer!

	0 ok!

	while (1)
		auto c
		0 // timeout
		KERNELMODE // lastmode
		EXRINGDONTWAIT // waitonempty
		outputbuffer@ // ringbuffer
		ExRingBufferReadValue ok! drop c!

		if (ok@)
			break
		end

		c@ CoVideoConsolePutCharacter
	end

	if (0)
		if (echo@)
			0 // priboost
			CoVideoConsoleOutputEvent // event
			KeEventSignal
		end
	end
end

fn CoVideoConsoleClearCursor { -- }
	auto ux
	CoVideoConsoleUpdateCursorX@ ux!

	auto uy
	CoVideoConsoleUpdateCursorY@ uy!

	auto osx
	CoVideoConsoleOnScreenCursorX@ osx!

	auto osy
	CoVideoConsoleOnScreenCursorY@ osy!

	auto bufp
	CoVideoConsoleUpdateBuffer@
	osy@ CoVideoConsoleColumns@ * 1 << +
	osx@ 1 << + bufp!

	auto ch
	bufp@ gb ch!

	if (ch@ ~~)
		' ' ch!
	end

	auto col
	bufp@ 1 + gb col!

	ch@ // char
	[col@ 15 &]CoVideoConsoleColorTable@ // nativefg
	[col@ 4 >> 15 &]CoVideoConsoleColorTable@ // nativebg
	osx@ CoVideoConsoleFontWidth@ * CoVideoConsoleWindowX@ + // x
	osy@ CoVideoConsoleFontHeight@ * CoVideoConsoleWindowY@ + // y
	CoVideoConsoleFont@ // font
	KVDrawCharacter
end

fn CoVideoConsoleDrawCursor { -- }
	auto ux
	CoVideoConsoleUpdateCursorX@ ux!

	auto uy
	CoVideoConsoleUpdateCursorY@ uy!

	auto bufp
	CoVideoConsoleUpdateBuffer@
	uy@ CoVideoConsoleColumns@ * 1 << +
	ux@ 1 << + bufp!

	auto ch
	bufp@ gb ch!

	if (ch@ ~~)
		' ' ch!
	end

	auto col
	bufp@ 1 + gb col!

	ch@ // char
	[col@ 4 >> 15 &]CoVideoConsoleColorTable@ // nativefg
	[col@ 15 &]CoVideoConsoleColorTable@ // nativebg
	ux@ CoVideoConsoleFontWidth@ * CoVideoConsoleWindowX@ + // x
	uy@ CoVideoConsoleFontHeight@ * CoVideoConsoleWindowY@ + // y
	CoVideoConsoleFont@ // font
	KVDrawCharacter

	ux@ CoVideoConsoleOnScreenCursorX!
	uy@ CoVideoConsoleOnScreenCursorY!
end

fn CoVideoConsoleUpdate { -- }
	if (CoVideoConsoleNeedsDraw@)
		CoVideoConsoleDraw
		0 CoVideoConsoleNeedsDraw!
	end

	CoVideoConsoleClearCursor

	if (CoVideoConsoleDirtyX1@ -1 ~=)
		auto x
		CoVideoConsoleDirtyX1@ x!

		auto y
		CoVideoConsoleDirtyY1@ y!

		auto dy
		CoVideoConsoleDirtyY2@ dy!

		auto dx
		CoVideoConsoleDirtyX2@ dx!

		auto bufmod
		CoVideoConsoleColumns@
		dx@ x@ - 1 +
		- 1 << bufmod!

		auto off
		y@ CoVideoConsoleColumns@ * 1 <<
		x@ 1 << + off!

		auto font
		CoVideoConsoleFont@ font!

		auto ubufp
		CoVideoConsoleUpdateBuffer@ off@ + ubufp!

		auto sbufp
		CoVideoConsoleOnScreenBuffer@ off@ + sbufp!

		while (y@ dy@ <=)
			auto qx
			x@ qx!

			while (qx@ dx@ <=)
				auto ct
				ubufp@ gi ct!

				if (sbufp@ gi ct@ ~=)
					// changed!

					auto ch
					ct@ 0xFF & ch!

					if (ch@ ~~)
						' ' ch!
					end

					auto col
					ct@ 8 >> col!

					ch@ // char
					[col@ 15 &]CoVideoConsoleColorTable@ // nativefg
					[col@ 4 >> 15 &]CoVideoConsoleColorTable@ // nativebg
					qx@ CoVideoConsoleFontWidth@ * CoVideoConsoleWindowX@ + // x
					y@ CoVideoConsoleFontHeight@ * CoVideoConsoleWindowY@ + // y
					font@ // font
					KVDrawCharacter

					ct@ sbufp@ si
				end

				2 ubufp +=
				2 sbufp +=
				1 qx +=
			end

			bufmod@ ubufp +=
			bufmod@ sbufp +=
			1 y +=
		end
	end

	0 CoVideoConsoleIsDirty!

	CoVideoConsoleDrawCursor
end

fn CoVideoConsoleDrawWorker { context1 context2 -- }
	PRIORITY_LOWREALTIME 2 + // priority
	KeThreadCurrent@ // thread
	KeThreadPrioritySet

	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	auto ok

	while (1)
		KERNELMODE // waitmode
		0 // alertable
		25 // timeout
		CoVideoConsoleOutputEvent // object
		KeThreadWaitForObject drop

		if (CoVideoConsoleIsDirty@)
			auto ipl
			IPLDPC KeIPLRaise ipl!

			CoVideoConsoleUpdate

			ipl@ KeIPLLower
		end
	end
end