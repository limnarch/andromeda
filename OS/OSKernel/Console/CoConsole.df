#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALArgs.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALExit.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Security.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<inc>/Console.h"

#include "<ll>/OSDLL/OS.h"

#include "<ll>/OSDLL/OSConsoleControl.h"

fn CoConsoleCreateObject { outputfunc context rawbuffer quotablock name permissions permanent -- fileobject deviceobject ok }
	name@ // name
	0 // sizeinbytes
	CoDriver // driver
	permissions@ // permissions
	permanent@ // permanent
	IODeviceCreateEx ok! deviceobject!

	if (ok@)
		return
	end

	1 deviceobject@ IODevice_IsAConsole + !

	auto console
	deviceobject@ IODeviceGetExtension console!

	0 console@ CoConsole_Initialized + !

	auto outputbuffer
	10 // sizelog (2^10 = 1024 bytes)
	0 // valuesizelog (2^0 = 1 byte)
	IPLDPC // synchipl
	quotablock@ // quotablock
	ExRingBufferCreate ok! outputbuffer!

	if (ok@)
		deviceobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto cookedbuffer
	10 // sizelog (2^10 = 1024 bytes)
	0 // valuesizelog (2^0 = 1 byte)
	IPLDPC // synchipl
	quotablock@ // quotablock
	ExRingBufferCreate ok! cookedbuffer!

	if (ok@)
		outputbuffer@ // ringbuffer
		ExRingBufferDelete

		deviceobject@ ObObjectDereferenceByPointer drop

		return
	end

	if (rawbuffer@)
		0 console@ CoConsole_RawBufferAllocated + !
	end else
		1 console@ CoConsole_RawBufferAllocated + !

		8 // sizelog (2^8 = 256 bytes)
		0 // valuesizelog (2^0 = 1 byte)
		IPLDPC // synchipl
		quotablock@ // quotablock
		ExRingBufferCreate ok! rawbuffer!

		if (ok@)
			cookedbuffer@ // ringbuffer
			ExRingBufferDelete

			outputbuffer@ // ringbuffer
			ExRingBufferDelete

			deviceobject@ ObObjectDereferenceByPointer drop

			return
		end
	end

	auto hostfcb
	CoDispatch // dispatchtable
	deviceobject@ // devobj
	OSFILETYPE_CHARDEVICE // filetype
	0 // flags
	IOFileControlBlockCreate ok! hostfcb!

	if (ok@)
		cookedbuffer@ // ringbuffer
		ExRingBufferDelete

		outputbuffer@ // ringbuffer
		ExRingBufferDelete

		if (console@ CoConsole_RawBufferAllocated + @)
			rawbuffer@ // ringbuffer
			ExRingBufferDelete
		end

		deviceobject@ ObObjectDereferenceByPointer drop

		return
	end

	1 hostfcb@ IOFileControlBlock_FSContext + !

	// bias refcounts for host fileobject
	deviceobject@ ObObjectReferenceByPointer drop
	hostfcb@ IOFileControlBlockReference drop

	"ConsoleHost" // openedpath
	0 // flags
	ACCESS_OWNER_ALL // permissions
	hostfcb@ // fcb
	IOFileCreateObject ok! fileobject!

	if (ok@)
		// failed, unbias these
		deviceobject@ ObObjectDereferenceByPointer drop
		hostfcb@ IOFileControlBlockDereference drop

		-1 // writeout
		hostfcb@ // fcb
		IOFileControlBlockDelete

		cookedbuffer@ // ringbuffer
		ExRingBufferDelete

		outputbuffer@ // ringbuffer
		ExRingBufferDelete

		if (console@ CoConsole_RawBufferAllocated + @)
			rawbuffer@ // ringbuffer
			ExRingBufferDelete
		end

		deviceobject@ ObObjectDereferenceByPointer drop

		return
	end

	hostfcb@ console@ CoConsole_HostFCB + !
	rawbuffer@ console@ CoConsole_RawBuffer + !
	cookedbuffer@ console@ CoConsole_CookedBuffer + !
	outputbuffer@ console@ CoConsole_OutputBuffer + !
	outputfunc@ console@ CoConsole_OutputFunction + !
	context@ console@ CoConsole_Context + !
	0 console@ CoConsole_Mode + !
	0 console@ CoConsole_Detached + !

	1 console@ CoConsole_Initialized + !
end

fn CoConsoleRawBufferGet { console -- rawbuffer }
	console@ CoConsole_RawBuffer + @ rawbuffer!
end

fn CoConsoleOutputBufferGet { console -- outputbuffer }
	console@ CoConsole_OutputBuffer + @ outputbuffer!
end

fn CoConsoleGetContext { console -- context }
	console@ CoConsole_Context + @ context!
end

const MAXPRINT 0x7E

fn CoConsoleRubout { console -- rubbedout }
	// relies on caller to process echo

	auto cookedbuffer
	console@ CoConsole_CookedBuffer + @ cookedbuffer!

	auto outputbuffer
	console@ CoConsole_OutputBuffer + @ outputbuffer!

	auto ok
	auto c

	cookedbuffer@ // ringbuffer
	ExRingBufferRubout ok! drop c!

	if (ok@)
		0 rubbedout!
		return
	end

	if (c@ '\n' == c@ 3 == || c@ 4 == ||) // ^C, ^D
		// replace the character

		c@ // value
		1 // overwrite
		0 // timeout
		KERNELMODE // lastmode
		EXRINGDONTWAIT // waitonfull
		cookedbuffer@ // ringbuffer
		ExRingBufferWriteValue drop drop

		0 rubbedout!

		return
	end

	1 rubbedout!

	if (console@ CoConsole_Mode + @ OSCONSOLE_MODE_NOECHO & ~~)
		if (c@ MAXPRINT >)
			return
		end

		auto rt
		c@ 0x20 < 1 + rt!

		while (rt@)
			0x7F // value
			1 // overwrite
			0 // timeout
			KERNELMODE // lastmode
			EXRINGDONTWAIT // waitonfull
			outputbuffer@ // ringbuffer
			ExRingBufferWriteValue drop drop

			1 rt -=
		end
	end
end

table CoCtrl
	'@'
	'A' 'B' 'C'
	'D' 'E' 'F'
	'G' 'H' 'I'
	'J' 'K' 'L'
	'M' 'N' 'O'
	'P' 'Q' 'R'
	'S' 'T' 'U'
	'V' 'W' 'X'
	'Y' 'Z'
	'['
	'\\'
	']'
	'^'
	'_'
	' '
endtable

asm "

brk:
	brk 0
	ret

"

extern brk { -- }

fn CoConsoleCook { console -- }
	auto mode
	console@ CoConsole_Mode + @ mode!

	auto rawbuffer
	console@ CoConsole_RawBuffer + @ rawbuffer!

	if (mode@ OSCONSOLE_MODE_RAW &)
		// raw mode, don't cook

		IOBOOSTCONSOLE // priboost
		rawbuffer@ // ringbuffer
		ExRingBufferWakeReader

		return
	end

	auto echo
	mode@ OSCONSOLE_MODE_NOECHO & ~~ echo!

	auto cookedbuffer
	console@ CoConsole_CookedBuffer + @ cookedbuffer!

	auto outputbuffer
	console@ CoConsole_OutputBuffer + @ outputbuffer!

	auto outputfunc
	console@ CoConsole_OutputFunction + @ outputfunc!

	// process contents of raw buffer into cooked buffer.
	// perform echo if enabled.

	// often called at IPLDPC, can't block.

	auto diff
	0 diff!

	while (1)
		auto ok
		auto c
		0 // timeout
		KERNELMODE // lastmode
		EXRINGDONTWAIT // waitonempty
		rawbuffer@ // ringbuffer
		ExRingBufferReadValue ok! drop c!

		if (ok@)
			break
		end

		if (echo@)
			if (outputbuffer@ ExRingBufferIsFull)
				// try to make the outputbuffer not full
				1 console@ CoConsoleDoOutput
			end
		end

		if (c@ '\b' ==)
			if (console@ CoConsoleRubout)
				1 diff!
			end
		end elseif (c@ 21 ==) // ^U
			while (console@ CoConsoleRubout)
				1 diff!
			end
		end else
			c@ // value
			1 // overwrite
			0 // timeout
			KERNELMODE // lastmode
			EXRINGDONTWAIT // waitonfull
			cookedbuffer@ // ringbuffer
			ExRingBufferWriteValue ok! drop

			if (c@ MAXPRINT >)
				continue
			end

			if (c@ 3 ==) // ^C
				"CoConsoleCook: TODO: process ^C\n" KeCrash
			end elseif (c@ 26 ==) // ^Z
				0 // ret
				HALEXIT_SHUTDOWN // mode
				HALExit
			end elseif (c@ 25 ==) // ^Y
				brk
			end

			if (ok@ ~~)
				// inserted

				if (c@ '\n' == c@ 3 == || c@ 4 == ||) // ^C, ^D
					IOBOOSTCONSOLE // priboost
					cookedbuffer@ // ringbuffer
					ExRingBufferWakeReader
				end

				if (echo@)
					1 diff!

					if (c@ 0x20 < c@ '\n' ~= &&)
						'^' // value
						1 // overwrite
						0 // timeout
						KERNELMODE // lastmode
						EXRINGDONTWAIT // waitonfull
						outputbuffer@ // ringbuffer
						ExRingBufferWriteValue drop drop

						[c@]CoCtrl@ // value
						1 // overwrite
						0 // timeout
						KERNELMODE // lastmode
						EXRINGDONTWAIT // waitonfull
						outputbuffer@ // ringbuffer
						ExRingBufferWriteValue drop drop
					end else
						c@ // value
						1 // overwrite
						0 // timeout
						KERNELMODE // lastmode
						EXRINGDONTWAIT // waitonfull
						outputbuffer@ // ringbuffer
						ExRingBufferWriteValue drop drop
					end
				end
			end
		end
	end

	if (diff@)
		1 console@ CoConsoleDoOutput
	end
end

fn CoConsoleDoOutput { echo console -- }
	auto outputfunc
	console@ CoConsole_OutputFunction + @ outputfunc!

	auto outputbuffer
	console@ CoConsole_OutputBuffer + @ outputbuffer!

	if (outputfunc@)
		echo@ // echo
		console@ // console
		outputfunc@ CoOutputFunction drop
	end

	IOBOOSTCONHOST // priboost
	outputbuffer@ // ringbuffer
	ExRingBufferWakeReader
end

fn CoConsoleRead { timeout flags length buffer lastmode console -- bytesread ok }
	if (console@ CoConsole_Detached + @)
		STATUS_CONSOLE_HUNG_UP ok!
		return
	end

	auto inputbuffer

	auto cooked

	if (console@ CoConsole_Mode + @ OSCONSOLE_MODE_RAW &)
		console@ CoConsole_RawBuffer + @ inputbuffer!
		0 cooked!
	end else
		console@ CoConsole_CookedBuffer + @ inputbuffer!
		1 cooked!
	end

	auto waitonempty
	if (flags@ OSACCESSFLAG_NONBLOCK &)
		EXRINGDONTWAIT waitonempty!
	end else
		EXRINGWAIT waitonempty!
	end

	0 bytesread!

	while (length@)
		auto c
		timeout@ // timeout
		lastmode@ // lastmode
		waitonempty@ // waitonempty
		inputbuffer@ // ringbuffer
		ExRingBufferReadValue ok! drop c!

		if (ok@)
			return
		end

		if (cooked@)
			if (c@ 4 ==) // ^D
				if (bytesread@ 0 ==)
					return
				end

				4 // value
				inputbuffer@ // ringbuffer
				ExRingBufferPutBack drop drop

				return
			end elseif (c@ 3 ==) // ^C
				continue
			end
		end

		if (lastmode@ USERMODE ==)
			c@ buffer@ KeSafeStoreByte ok!

			if (ok@)
				return
			end
		end else
			c@ buffer@ sb
		end

		1 bytesread +=
		1 buffer +=
		1 length -=

		if (cooked@)
			if (c@ '\n' ==)
				return
			end
		end
	end
end

fn CoConsoleWrite { length buffer lastmode console -- byteswritten ok }
	if (console@ CoConsole_Detached + @)
		STATUS_CONSOLE_HUNG_UP ok!
		return
	end

	auto outputbuffer
	console@ CoConsole_OutputBuffer + @ outputbuffer!

	auto outputfunc
	console@ CoConsole_OutputFunction + @ outputfunc!

	auto diff
	0 diff!

	0 byteswritten!

	while (length@)
		auto c
		if (lastmode@ USERMODE ==)
			buffer@ KeSafeGetByte ok! c!

			if (ok@)
				break
			end
		end else
			buffer@ gb c!
		end

		c@ // value
		0 // overwrite
		0 // timeout
		lastmode@ // lastmode
		EXRINGDONTWAIT // waitonfull
		outputbuffer@ // ringbuffer
		ExRingBufferWriteValue ok! drop

		if (ok@ ~~)
			1 diff +=
		end else
			0 diff!
		end

		while (ok@)
			if (ok@ STATUS_WAIT_TIMEOUT ~=)
				if (ok@ STATUS_RING_FULL ~=)
					break
				end
			end

			// ringbuffer full. call console output function and/or wake up
			// host to try to empty it out.

			0 console@ CoConsoleDoOutput

			// try again. this time sleep with a timeout.

			c@ // value
			0 // overwrite
			50 // timeout
			lastmode@ // lastmode
			EXRINGWAIT // waitonfull
			outputbuffer@ // ringbuffer
			ExRingBufferWriteValue ok! drop
		end

		1 byteswritten +=
		1 buffer +=
		1 length -=
	end

	if (diff@)
		0 console@ CoConsoleDoOutput
	end
end