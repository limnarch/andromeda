//
// Generalized splay tree implementation.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OS.h"

fn ExSplayTreeInsert { insertat node rootptr -- }
	0 node@ ExSplayTreeNode_LeftChild + !
	0 node@ ExSplayTreeNode_RightChild + !

	auto value
	node@ ExSplayTreeNode_Value + @ value!

	auto parent
	rootptr@@ parent!

	if (parent@ ~~)
		node@ rootptr@!
		0 node@ ExSplayTreeNode_Parent + !
		return
	end

	if (insertat@)
		if (value@ insertat@ ExSplayTreeNode_Value + @ <)
			node@ insertat@ ExSplayTreeNode_LeftChild + !
			insertat@ node@ ExSplayTreeNode_Parent + !
		end else
			node@ insertat@ ExSplayTreeNode_RightChild + !
			insertat@ node@ ExSplayTreeNode_Parent + !
		end

		return
	end

	auto level
	0 level!

	while (1)
		if (level@ 15 ==)
			parent@ rootptr@ ExSplayTreeSplay
		end

		1 level +=

		if (value@ parent@ ExSplayTreeNode_Value + @ <)
			if (parent@ ExSplayTreeNode_LeftChild + @)
				parent@ ExSplayTreeNode_LeftChild + @ parent!
			end else
				node@ parent@ ExSplayTreeNode_LeftChild + !
				parent@ node@ ExSplayTreeNode_Parent + !
				break
			end
		end else
			if (parent@ ExSplayTreeNode_RightChild + @)
				parent@ ExSplayTreeNode_RightChild + @ parent!
			end else
				node@ parent@ ExSplayTreeNode_RightChild + !
				parent@ node@ ExSplayTreeNode_Parent + !
				break
			end
		end
	end
end

fn ExSplayTreeRemove { node rootptr -- }
	auto left
	node@ ExSplayTreeNode_LeftChild + @ left!

	auto right
	node@ ExSplayTreeNode_RightChild + @ right!

	auto snode

	if (node@ rootptr@@ ==)
		if (left@)
			if (right@)
				if (left@ ExSplayTreeNode_RightChild + @)
					left@ ExSplayTreeNode_RightChild + @ snode!

					while (snode@ ExSplayTreeNode_RightChild + @)
						snode@ ExSplayTreeNode_RightChild + @ snode!
					end

					snode@ rootptr@!
					snode@ ExSplayTreeNode_LeftChild + @ snode@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !

					if (snode@ ExSplayTreeNode_LeftChild + @)
						snode@ ExSplayTreeNode_Parent + @ snode@ ExSplayTreeNode_LeftChild + @ ExSplayTreeNode_Parent + !
					end

					0 snode@ ExSplayTreeNode_Parent + !

					snode@ left@ ExSplayTreeNode_Parent + !
					snode@ right@ ExSplayTreeNode_Parent + !

					left@ snode@ ExSplayTreeNode_LeftChild + !
					right@ snode@ ExSplayTreeNode_RightChild + !
				end elseif (right@ ExSplayTreeNode_LeftChild + @)
					right@ ExSplayTreeNode_LeftChild + @ snode!

					while (snode@ ExSplayTreeNode_LeftChild + @)
						snode@ ExSplayTreeNode_LeftChild + @ snode!
					end

					snode@ rootptr@!
					snode@ ExSplayTreeNode_RightChild + @ snode@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !

					if (snode@ ExSplayTreeNode_RightChild + @)
						snode@ ExSplayTreeNode_Parent + @ snode@ ExSplayTreeNode_RightChild + @ ExSplayTreeNode_Parent + !
					end

					0 snode@ ExSplayTreeNode_Parent + !

					snode@ left@ ExSplayTreeNode_Parent + !
					snode@ right@ ExSplayTreeNode_Parent + !

					left@ snode@ ExSplayTreeNode_LeftChild + !
					right@ snode@ ExSplayTreeNode_RightChild + !
				end else
					left@ rootptr@!
					0 left@ ExSplayTreeNode_Parent + !

					right@ left@ ExSplayTreeNode_RightChild + !
					left@ right@ ExSplayTreeNode_Parent + !
				end
			end else
				left@ rootptr@!
				0 left@ ExSplayTreeNode_Parent + !
			end
		end elseif (right@)
			right@ rootptr@!
			0 right@ ExSplayTreeNode_Parent + !
		end else
			0 rootptr@!
		end
	end elseif (left@)
		if (right@)
			if (left@ ExSplayTreeNode_RightChild + @)
				left@ ExSplayTreeNode_RightChild + @ snode!

				while (snode@ ExSplayTreeNode_RightChild + @)
					snode@ ExSplayTreeNode_RightChild + @ snode!
				end
			
				snode@ ExSplayTreeNode_LeftChild + @ snode@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !

				if (snode@ ExSplayTreeNode_LeftChild + @)
					snode@ ExSplayTreeNode_Parent + @ snode@ ExSplayTreeNode_LeftChild + @ ExSplayTreeNode_Parent + !
				end

				node@ ExSplayTreeNode_Parent + @ snode@ ExSplayTreeNode_Parent + !

				if (node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ node@ ==)
					snode@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
				end else
					snode@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
				end

				snode@ left@ ExSplayTreeNode_Parent + !
				snode@ right@ ExSplayTreeNode_Parent + !

				left@ snode@ ExSplayTreeNode_LeftChild + !
				right@ snode@ ExSplayTreeNode_RightChild + !
			end elseif (right@ ExSplayTreeNode_LeftChild + @)
				right@ ExSplayTreeNode_LeftChild + @ snode!

				while (snode@ ExSplayTreeNode_LeftChild + @)
					snode@ ExSplayTreeNode_LeftChild + @ snode!
				end
			
				snode@ ExSplayTreeNode_RightChild + @ snode@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !

				if (snode@ ExSplayTreeNode_RightChild + @)
					snode@ ExSplayTreeNode_Parent + @ snode@ ExSplayTreeNode_RightChild + @ ExSplayTreeNode_Parent + !
				end

				node@ ExSplayTreeNode_Parent + @ snode@ ExSplayTreeNode_Parent + !

				if (node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ node@ ==)
					snode@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
				end else
					snode@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
				end

				snode@ left@ ExSplayTreeNode_Parent + !
				snode@ right@ ExSplayTreeNode_Parent + !

				left@ snode@ ExSplayTreeNode_LeftChild + !
				right@ snode@ ExSplayTreeNode_RightChild + !
			end else
				left@ snode!
				node@ ExSplayTreeNode_Parent + @ snode@ ExSplayTreeNode_Parent + !

				if (node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ node@ ==)
					snode@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
				end else
					snode@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
				end

				right@ snode@ ExSplayTreeNode_RightChild + !
				snode@ right@ ExSplayTreeNode_Parent + !
			end
		end else
			node@ ExSplayTreeNode_Parent + @ left@ ExSplayTreeNode_Parent + !

			if (node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ node@ ==)
				left@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
			end else
				left@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
			end
		end
	end elseif (right@)
		node@ ExSplayTreeNode_Parent + @ right@ ExSplayTreeNode_Parent + !

		if (node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ node@ ==)
			right@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
		end else
			right@ node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
		end
	end else
		if (node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ node@ ==)
			0 node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
		end else
			0 node@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
		end
	end
end

fn ExSplayTreeSplay { node rootptr -- }
	// splay a node to the root of the tree.

	auto snode
	node@ snode!

	while (snode@ rootptr@@ ~=)
		auto parent
		snode@ ExSplayTreeNode_Parent + @ parent!

		if (parent@ rootptr@@ ==)
			0 snode@ ExSplayTreeNode_Parent + !
			snode@ rootptr@!
			snode@ parent@ ExSplayTreeNode_Parent + !

			if (parent@ ExSplayTreeNode_RightChild + @ snode@ ==)
				snode@ ExSplayTreeNode_LeftChild + @ parent@ ExSplayTreeNode_RightChild + !

				if (snode@ ExSplayTreeNode_LeftChild + @)
					parent@ snode@ ExSplayTreeNode_LeftChild + @ ExSplayTreeNode_Parent + !
				end

				parent@ snode@ ExSplayTreeNode_LeftChild + !
			end else
				snode@ ExSplayTreeNode_RightChild + @ parent@ ExSplayTreeNode_LeftChild + !

				if (snode@ ExSplayTreeNode_RightChild + @)
					parent@ snode@ ExSplayTreeNode_RightChild + @ ExSplayTreeNode_Parent + !
				end

				parent@ snode@ ExSplayTreeNode_RightChild + !
			end
		end else
			auto grandparent
			parent@ ExSplayTreeNode_Parent + @ grandparent!

			// holy lengthy conditionals batman.
			// this is probably slow but its hard to tell how to cache the
			// children in variables properly.

			if (snode@ parent@ ExSplayTreeNode_LeftChild + @ == parent@ grandparent@ ExSplayTreeNode_LeftChild + @ == &&)
				if (grandparent@ rootptr@@ ==)
					parent@ rootptr@!
					0 parent@ ExSplayTreeNode_Parent + !
				end else
					grandparent@ ExSplayTreeNode_Parent + @ parent@ ExSplayTreeNode_Parent + !

					if (grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ grandparent@ ==)
						parent@ grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
					end else
						parent@ grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
					end
				end

				parent@ ExSplayTreeNode_RightChild + @ grandparent@ ExSplayTreeNode_LeftChild + !

				if (parent@ ExSplayTreeNode_RightChild + @)
					grandparent@ parent@ ExSplayTreeNode_RightChild + @ ExSplayTreeNode_Parent + !
				end

				parent@ grandparent@ ExSplayTreeNode_Parent + !
				grandparent@ parent@ ExSplayTreeNode_RightChild + !
				parent@ snode!
			end elseif (snode@ parent@ ExSplayTreeNode_RightChild + @ == parent@ grandparent@ ExSplayTreeNode_RightChild + @ == &&)
				if (grandparent@ rootptr@@ ==)
					parent@ rootptr@!
					0 parent@ ExSplayTreeNode_Parent + !
				end else
					grandparent@ ExSplayTreeNode_Parent + @ parent@ ExSplayTreeNode_Parent + !

					if (grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ grandparent@ ==)
						parent@ grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
					end else
						parent@ grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
					end
				end

				parent@ ExSplayTreeNode_LeftChild + @ grandparent@ ExSplayTreeNode_RightChild + !

				if (parent@ ExSplayTreeNode_LeftChild + @)
					grandparent@ parent@ ExSplayTreeNode_LeftChild + @ ExSplayTreeNode_Parent + !
				end

				parent@ grandparent@ ExSplayTreeNode_Parent + !
				grandparent@ parent@ ExSplayTreeNode_LeftChild + !
				parent@ snode!
			end elseif (snode@ parent@ ExSplayTreeNode_LeftChild + @ == parent@ grandparent@ ExSplayTreeNode_RightChild + @ == &&)
				if (grandparent@ rootptr@@ ==)
					snode@ rootptr@!
					0 snode@ ExSplayTreeNode_Parent + !
				end else
					grandparent@ ExSplayTreeNode_Parent + @ snode@ ExSplayTreeNode_Parent + !

					if (grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ grandparent@ ==)
						snode@ grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
					end else
						snode@ grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
					end
				end

				snode@ ExSplayTreeNode_RightChild + @ parent@ ExSplayTreeNode_LeftChild + !

				if (snode@ ExSplayTreeNode_RightChild + @)
					parent@ snode@ ExSplayTreeNode_RightChild + @ ExSplayTreeNode_Parent + !
				end

				snode@ ExSplayTreeNode_LeftChild + @ grandparent@ ExSplayTreeNode_RightChild + !

				if (snode@ ExSplayTreeNode_LeftChild + @)
					grandparent@ snode@ ExSplayTreeNode_LeftChild + @ ExSplayTreeNode_Parent + !
				end

				snode@ parent@ ExSplayTreeNode_Parent + !
				snode@ grandparent@ ExSplayTreeNode_Parent + !
				grandparent@ snode@ ExSplayTreeNode_LeftChild + !
				parent@ snode@ ExSplayTreeNode_RightChild + !
			end else
				if (grandparent@ rootptr@@ ==)
					snode@ rootptr@!
					0 snode@ ExSplayTreeNode_Parent + !
				end else
					grandparent@ ExSplayTreeNode_Parent + @ snode@ ExSplayTreeNode_Parent + !

					if (grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + @ grandparent@ ==)
						snode@ grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_LeftChild + !
					end else
						snode@ grandparent@ ExSplayTreeNode_Parent + @ ExSplayTreeNode_RightChild + !
					end
				end

				snode@ ExSplayTreeNode_LeftChild + @ parent@ ExSplayTreeNode_RightChild + !

				if (snode@ ExSplayTreeNode_LeftChild + @)
					parent@ snode@ ExSplayTreeNode_LeftChild + @ ExSplayTreeNode_Parent + !
				end

				snode@ ExSplayTreeNode_RightChild + @ grandparent@ ExSplayTreeNode_LeftChild + !

				if (snode@ ExSplayTreeNode_RightChild + @)
					grandparent@ snode@ ExSplayTreeNode_RightChild + @ ExSplayTreeNode_Parent + !
				end

				snode@ parent@ ExSplayTreeNode_Parent + !
				snode@ grandparent@ ExSplayTreeNode_Parent + !
				grandparent@ snode@ ExSplayTreeNode_RightChild + !
				parent@ snode@ ExSplayTreeNode_LeftChild + !
			end
		end
	end
end

fn ExSplayTreeNodeNext { node -- nextnode }
	node@ ExSplayTreeNode_RightChild + @ nextnode!

	auto chknode

	if (nextnode@ ~~)
		node@ nextnode!

		while (1)
			nextnode@ ExSplayTreeNode_Parent + @ chknode!

			if (chknode@ ~~)
				break
			end

			if (chknode@ ExSplayTreeNode_LeftChild + @ nextnode@ ==)
				chknode@ nextnode!
				return
			end

			chknode@ nextnode!
		end

		0 nextnode!
		return
	end else
		while (1)
			nextnode@ ExSplayTreeNode_LeftChild + @ chknode!

			if (chknode@ ~~)
				break
			end

			chknode@ nextnode!
		end
	end
end

fn ExSplayTreeNodePrevious { node -- prevnode }
	node@ ExSplayTreeNode_LeftChild + @ prevnode!

	auto chknode

	if (prevnode@ ~~)
		node@ prevnode!

		while (1)
			prevnode@ ExSplayTreeNode_Parent + @ chknode!

			if (chknode@ ~~)
				break
			end

			if (chknode@ ExSplayTreeNode_RightChild + @ prevnode@ ==)
				chknode@ prevnode!
				return
			end

			chknode@ prevnode!
		end

		0 prevnode!
		return
	end else
		while (1)
			prevnode@ ExSplayTreeNode_RightChild + @ chknode!

			if (chknode@ ~~)
				break
			end

			chknode@ prevnode!
		end
	end
end

fn ExSplayTreeNodeFirst { root -- first }
	root@ first!

	if (first@ ~~)
		return
	end

	while (first@ ExSplayTreeNode_LeftChild + @)
		first@ ExSplayTreeNode_LeftChild + @ first!
	end
end

fn ExSplayTreeFindNodeByValue { value rootptr -- lastnode node }
	// use when nodes represent points

	rootptr@@ node!

	auto level
	0 level!

	0 lastnode!

	while (1)
		if (node@ ~~)
			return
		end

		if (level@ 10 ==)
			node@ rootptr@ ExSplayTreeSplay
		end

		1 level +=

		if (value@ node@ ExSplayTreeNode_Value + @ <)
			node@ lastnode!
			node@ ExSplayTreeNode_LeftChild + @ node!
		end elseif (value@ node@ ExSplayTreeNode_Value + @ >)
			node@ lastnode!
			node@ ExSplayTreeNode_RightChild + @ node!
		end else
			return
		end
	end
end

fn ExSplayTreeFindNodeByValueRange { value rootptr -- node }
	// use when nodes represent ranges

	rootptr@@ node!

	auto level
	0 level!

	while (1)
		if (node@ ~~)
			return
		end

		if (level@ 20 ==)
			node@ rootptr@ ExSplayTreeSplay
		end else
			1 level +=
		end

		if (value@ node@ ExSplayTreeNode_Value + @ <)
			node@ ExSplayTreeNode_LeftChild + @ node!
		end elseif (value@ node@ ExSplayTreeNode_EndValue + @ >=)
			node@ ExSplayTreeNode_RightChild + @ node!
		end else
			return
		end
	end
end

fn ExSplayTreeFindFirstContainingNode { value endvalue root -- node }
	root@ node!

	while (1)
		if (node@ ~~)
			return
		end

		if (value@ node@ ExSplayTreeNode_EndValue + @ >=)
			node@ ExSplayTreeNode_RightChild + @ node!
		end elseif (endvalue@ node@ ExSplayTreeNode_Value + @ <=)
			node@ ExSplayTreeNode_LeftChild + @ node!
		end else
			return
		end
	end
end

fn ExSplayTreeFindEmptyRange { size root -- prevnode value }
	// returns 0 in value if no range found

	if (MMHIGHESTUSERADDRESS 1 + PAGESIZE - size@ <)
		0 value!
		return
	end

	auto node
	root@ node!

	if (node@ ~~)
		PAGESIZE value!
		0 prevnode!
		return
	end

	while (node@ ExSplayTreeNode_LeftChild + @)
		node@ ExSplayTreeNode_LeftChild + @ node!
	end

	if (node@ ExSplayTreeNode_Value + @ PAGESIZE - size@ >=)
		PAGESIZE value!
		0 prevnode!
		return
	end

	while (1)
		auto nextnode
		node@ // node
		ExSplayTreeNodeNext nextnode!

		if (nextnode@)
			if (nextnode@ ExSplayTreeNode_Value + @ node@ ExSplayTreeNode_EndValue + @ - size@ >=)
				node@ prevnode!
				node@ ExSplayTreeNode_EndValue + @ value!
				return
			end
		end elseif (MMHIGHESTUSERADDRESS 1 + node@ ExSplayTreeNode_EndValue + @ - size@ >=)
			node@ prevnode!
			node@ ExSplayTreeNode_EndValue + @ value!
			return
		end else
			0 value!
			return
		end

		nextnode@ node!
	end
end