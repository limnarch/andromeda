//
// Implements executive RwLocks.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALCPU.h"

#include "<inc>/HALDebug.h"

#include "ExInternal.h"

fn ExRwLockInitialize { name rwlock -- }
	fnsection "PAGE$text"

	rwlock@ // ptr
	ExRwLock_SIZEOF // size
	0 // word
	memset
end

fn ExRwLockUninitialize { rwlock -- }
	fnsection "PAGE$text"

	if (rwlock@ ExRwLock_OwnerTable + @)
		rwlock@ ExRwLock_OwnerTable + @ MmFree
	end

	if (rwlock@ ExRwLock_SharedSemaphore + @)
		rwlock@ ExRwLock_SharedSemaphore + @ MmFree
	end

	if (rwlock@ ExRwLock_ExclusiveSyncEvent + @)
		rwlock@ ExRwLock_ExclusiveSyncEvent + @ MmFree
	end
end

fn ExRwLockRelease { rwlock -- }
	auto thread
	KeThreadCurrent@ thread!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto owner
	auto exclusive
	
	if (rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + @ thread@ ==)
		rwlock@ ExRwLock_ExclusiveOwner + owner!
		1 exclusive!
	end elseif (rwlock@ ExRwLock_SharedOwner + ExRwLockOwner_OwningThread + @ thread@ ==)
		rwlock@ ExRwLock_SharedOwner + owner!
		0 exclusive!
	end else
		0 exclusive!

		auto tabsize
		rwlock@ ExRwLock_TableSizeI + gi tabsize!

		rwlock@ ExRwLock_OwnerTable + @ owner!

		while (tabsize@)
			if (owner@ ExRwLockOwner_OwningThread + @ thread@ ==)
				break
			end

			ExRwLockOwner_SIZEOF owner +=
			1 tabsize -=
		end

		if (tabsize@ ~~)
			"ExRwLockReleaseForThread: RwLock not held by thread\n" KeCrash
		end
	end

	if (DEBUGCHECKS)
		if (owner@ ExRwLockOwner_Locked + @ 0 ==)
			"ExRwLockReleaseForThread: RwLock held but not locked by thread(?)\n" KeCrash
		end
	end

	1 owner@ ExRwLockOwner_Locked + -=

	if (owner@ ExRwLockOwner_Locked + @)
		// was held recursively

		ipl@ KeIPLLower

		return
	end

	// actually released
	0 owner@ ExRwLockOwner_OwningThread + !

	if (DEBUGCHECKS)
		if (rwlock@ ExRwLock_HeldCountI + gi 0 ==)
			"ExRwLockReleaseForThread: heldcount==0\n" KeCrash
		end
	end

	rwlock@ ExRwLock_HeldCountI + gi 1 -
	rwlock@ ExRwLock_HeldCountI + si

	if (rwlock@ ExRwLock_HeldCountI + gi ~~)
		auto access
		0 access!

		if (exclusive@ ~~)
			// we were holding it shared, try to grant exclusive access
			1 access!
		end elseif (rwlock@ ExRwLock_SharedWaitersCountI + gi ~~)
			// we were holding it exclusive and there are no shared waiters,
			// try to grant exclusive access
			1 access!
		end

		if (access@)
			if (rwlock@ ExRwLock_ExclusiveWaitersCountI + gi)
				// there's a waiter,, try to give him the thing

				1 rwlock@ ExRwLock_HeldCountI + si

				rwlock@ ExRwLock_ExclusiveWaitersCountI + gi 1 -
				rwlock@ ExRwLock_ExclusiveWaitersCountI + si

				EXBOOSTEXCLUSIVEWAITER // priboost
				rwlock@ ExRwLock_ExclusiveSyncEvent + @ // event
				KeEventSignalGetWaiter access!

				access@ rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + !
				1 rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_Locked + !

				ipl@ KeIPLLower

				return
			end
		end

		// couldn't (or don't want to) wake an exclusive waiter, wake shared

		rwlock@ ExRwLock_SharedWaitersCountI + gi access!

		if (access@)
			access@ rwlock@ ExRwLock_HeldCountI + si
			0 rwlock@ ExRwLock_SharedWaitersCountI + si

			access@ // adjustment
			rwlock@ ExRwLock_SharedSemaphore + @ // semaphore
			KeSemaphoreRelease access!

			if (DEBUGCHECKS)
				if (access@)
					access@ "ExRwLockReleaseForThread: couldn't release semaphore (%i)\n" KeCrash
				end
			end

			ipl@ KeIPLLower

			return
		end
	end

	ipl@ KeIPLLower
end

fn ExRwLockAcquireExclusive { alertable nowait rwlock -- ok }
	auto current
	KeThreadCurrent@ current!

	0 ok!

	while (1)
		auto ipl
		IPLDPC KeIPLRaise ipl!

		if (rwlock@ ExRwLock_HeldCountI + gi ~~)
			1 rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_Locked + !
			current@ rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + !
			1 rwlock@ ExRwLock_HeldCountI + si

			ipl@ KeIPLLower

			if (nowait@)
				1 ok!
			end

			return
		end

		if (rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_Locked + @)
			if (rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + @ current@ ==)
				// yoink

				1 rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_Locked + +=

				ipl@ KeIPLLower

				if (nowait@)
					1 ok!
				end

				return
			end
		end elseif (nowait@)
			ipl@ KeIPLLower

			0 ok!

			return
		end

		if (alertable@)
			// we need to wait, so check if we got killed.

			ipl@ // ipl
			KERNELMODE // mode
			1 // alertable
			1 // waiting
			current@ // thread
			KeThreadIsKilled ok!

			if (ok@)
				// thread was killed or received a signal that cannot be ignored

				ipl@ KeIPLLower

				return
			end
		end

		auto exwev
		rwlock@ ExRwLock_ExclusiveSyncEvent + @ exwev!

		if (exwev@ ~~)
			// theres no event! drop IPL and try to allocate one, then retry
			// this entire thing.

			ipl@ KeIPLLower

			KeEvent_SIZEOF // bytes
			'ReEE' // tag
			MUSTSUCCEEDL2 CANBLOCK | // flags
			MmAllocWithTag ok! exwev!

			if (ok@)
				if (alertable@ ~~)
					// caller not expecting failure.

					ok@ "rwlock ex (%i)\n" KeCrash
				end

				return
			end

			0 // signaled
			OSEVENT_SYNCH // type
			"ExRwLockExclusiveSyncEvent" // name
			exwev@ // event
			KeEventInitialize

			IPLDPC KeIPLRaise ipl!

			if (rwlock@ ExRwLock_ExclusiveSyncEvent + @)
				// noo!! someone else allocated an event while we were trying
				// to. we have to free ours and retry

				ipl@ KeIPLLower

				exwev@ MmFree

				continue
			end

			exwev@ rwlock@ ExRwLock_ExclusiveSyncEvent + !

			ipl@ KeIPLLower

			continue
		end

		rwlock@ ExRwLock_ExclusiveWaitersCountI + gi 1 +
		rwlock@ ExRwLock_ExclusiveWaitersCountI + si

		ipl@ KeIPLLower

		break
	end

	exwev@ // event
	rwlock@ // rwlock
	ExRwLockWait ok!

	if (DEBUGCHECKS)
		if (ok@)
			ok@ "ExRwLockAcquireExclusive: ExRwLockWait failed (%i)\n" KeCrash
		end
	end

	KeThreadCurrent@ rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + !

	if (alertable@)
		ipl@ // ipl
		KERNELMODE // mode
		1 // alertable
		1 // waiting
		current@ // thread
		KeThreadIsKilled ok!

		if (ok@)
			// unlock
			rwlock@ ExRwLockRelease
		end
	end
end

fn ExRwLockAcquireShared { alertable nowait canstarve rwlock -- ok }
	auto current
	KeThreadCurrent@ current!

	while (1)
		0 ok!

		auto ipl
		IPLDPC KeIPLRaise ipl!

		if (rwlock@ ExRwLock_HeldCountI + gi ~~)
			1 rwlock@ ExRwLock_SharedOwner + ExRwLockOwner_Locked + !
			current@ rwlock@ ExRwLock_SharedOwner + ExRwLockOwner_OwningThread + !
			1 rwlock@ ExRwLock_HeldCountI + si

			ipl@ KeIPLLower

			if (nowait@)
				1 ok!
			end

			return
		end

		auto exown

		if (rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_Locked + @)
			if (rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + @ current@ ==)
				// yoink

				1 rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_Locked + +=
				ipl@ KeIPLLower

				if (nowait@)
					1 ok!
				end

				return
			end

			if (nowait@)
				ipl@ KeIPLLower

				0 ok!

				return
			end

			ipl@ // ipl
			0 // thread
			rwlock@ // rwlock
			ExRwLockFindOwner ok! exown!

			if (ok@)
				ipl@ KeIPLLower

				if (alertable@ ~~)
					ok@ "rwlock o1 (%i)\n" KeCrash
				end

				return
			end

			if (exown@ ~~)
				ipl@ KeIPLLower

				continue
			end
		end else
			ipl@ // ipl
			current@ // thread
			rwlock@ // rwlock
			ExRwLockFindOwner ok! exown!

			if (ok@)
				ipl@ KeIPLLower

				if (alertable@ ~~)
					ok@ "rwlock o2 (%i)\n" KeCrash
				end

				return
			end

			if (exown@ ~~)
				ipl@ KeIPLLower

				continue
			end

			if (exown@ ExRwLockOwner_OwningThread + @ current@ ==)
				// yoink recursively

				1 exown@ ExRwLockOwner_Locked + +=

				ipl@ KeIPLLower

				if (nowait@)
					1 ok!
				end

				return
			end

			if (canstarve@ rwlock@ ExRwLock_ExclusiveWaitersCountI + gi ~~ ||)
				current@ exown@ ExRwLockOwner_OwningThread + !
				1 exown@ ExRwLockOwner_Locked + !

				rwlock@ ExRwLock_HeldCountI + gi 1 +
				rwlock@ ExRwLock_HeldCountI + si

				ipl@ KeIPLLower

				if (nowait@)
					1 ok!
				end

				return
			end elseif (nowait@)
				ipl@ KeIPLLower

				0 ok!

				return
			end
		end

		if (alertable@)
			// we need to wait, so check if we got killed.

			ipl@ // ipl
			KERNELMODE // mode
			1 // alertable
			1 // waiting
			current@ // thread
			KeThreadIsKilled ok!

			if (ok@)
				// thread was killed or received a signal that cannot be ignored

				ipl@ KeIPLLower

				return
			end
		end

		auto shwev
		rwlock@ ExRwLock_SharedSemaphore + @ shwev!

		if (shwev@ ~~)
			// theres no semaphore! drop IPL and try to allocate one, then
			// retry this entire thing.

			ipl@ KeIPLLower

			KeSemaphore_SIZEOF // bytes
			'ReSS' // tag
			MUSTSUCCEEDL2 CANBLOCK | // flags
			MmAllocWithTag ok! shwev!

			if (ok@)
				if (alertable@ ~~)
					// caller not expecting failure.

					ok@ "rwlock sh (%i)\n" KeCrash
				end

				return
			end

			0 // count
			"ExRwLockSharedSemaphore" // name
			shwev@ // semaphore
			KeSemaphoreInitialize

			IPLDPC KeIPLRaise ipl!

			if (rwlock@ ExRwLock_SharedSemaphore + @)
				// noo!! someone else allocated an event while we were trying
				// to. we have to free ours and retry

				ipl@ KeIPLLower

				shwev@ MmFree

				continue
			end

			shwev@ rwlock@ ExRwLock_SharedSemaphore + !

			ipl@ KeIPLLower

			continue
		end

		current@ exown@ ExRwLockOwner_OwningThread + !
		1 exown@ ExRwLockOwner_Locked + !

		rwlock@ ExRwLock_SharedWaitersCountI + gi 1 +
		rwlock@ ExRwLock_SharedWaitersCountI + si

		ipl@ KeIPLLower

		break
	end

	shwev@ // event
	rwlock@ // rwlock
	ExRwLockWait ok!

	if (DEBUGCHECKS)
		if (ok@)
			"ExRwLockAcquireShared: ExRwLockWait failed\n" KeCrash
		end
	end

	if (alertable@)
		ipl@ // ipl
		KERNELMODE // mode
		1 // alertable
		1 // waiting
		current@ // thread
		KeThreadIsKilled ok!

		if (ok@)
			// unlock
			rwlock@ ExRwLockRelease
		end
	end
end

fn ExRwLockDemoteToShared { rwlock -- ok }
	while (1)
		auto ipl
		IPLDPC KeIPLRaise ipl!

		if (DEBUGCHECKS)
			if (rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + @ KeThreadCurrent@ ~=)
				"ExRwLockDemoteToShared: didn't own exclusively\n" KeCrash
			end
		end

		// find a slot to put us in

		auto owner
		ipl@ // ipl
		0 // thread
		rwlock@ // rwlock
		ExRwLockFindOwner ok! owner!

		if (ok@)
			ipl@ KeIPLLower

			return
		end

		if (owner@ ~~)
			ipl@ KeIPLLower

			continue
		end

		0 rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + !

		KeThreadCurrent@ owner@ ExRwLockOwner_OwningThread + !
		rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_Locked + @ owner@ ExRwLockOwner_Locked + !

		0 rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_Locked + !

		auto waiters
		rwlock@ ExRwLock_SharedWaitersCountI + gi waiters!

		if (waiters@)
			waiters@ 1 + rwlock@ ExRwLock_HeldCountI + si
			0 rwlock@ ExRwLock_SharedWaitersCountI + si

			waiters@ // adjustment
			rwlock@ ExRwLock_SharedSemaphore + @ // semaphore
			KeSemaphoreRelease waiters!

			if (DEBUGCHECKS)
				if (waiters@)
					waiters@ "ExRwLockDemoteToShared: couldn't release semaphore (%i)\n" KeCrash
				end
			end
		end

		ipl@ KeIPLLower

		break
	end
end

fn ExRwLockWait { event rwlock -- ok }
	while (1)
		KERNELMODE // waitmode
		0 // alertable
		EXBOOSTTIMEOUT // timeout
		event@ // object
		KeThreadWaitForObject ok!

		if (ok@ STATUS_WAIT_TIMEOUT ~=)
			return
		end

		// try to boost priority of other owners to get them the HECK out of
		// this rwlock

		auto ipl
		IPLDPC KeIPLRaise ipl!

		if (rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + @)
			EXBOOSTRWSTARVE // boost
			rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + @ // thread
			KeThreadPriorityBoost
		end else
			if (rwlock@ ExRwLock_SharedOwner + ExRwLockOwner_OwningThread + @)
				EXBOOSTRWSTARVE // boost
				rwlock@ ExRwLock_SharedOwner + ExRwLockOwner_OwningThread + @ // thread
				KeThreadPriorityBoost
			end

			auto tabsize
			auto owner

			rwlock@ ExRwLock_TableSizeI + gi tabsize!
			rwlock@ ExRwLock_OwnerTable + @ owner!

			while (tabsize@)
				if (owner@ ExRwLockOwner_OwningThread + @)
					EXBOOSTRWSTARVE // boost
					owner@ ExRwLockOwner_OwningThread + @ // thread
					KeThreadPriorityBoost
				end

				ExRwLockOwner_SIZEOF owner +=
				1 tabsize -=
			end
		end

		ipl@ KeIPLLower
	end
end

fn ExRwLockFindOwner { ipl thread rwlock -- owner ok }
	0 ok!

	if (thread@)
		if (rwlock@ ExRwLock_ExclusiveOwner + ExRwLockOwner_OwningThread + @ thread@ ==)
			rwlock@ ExRwLock_ExclusiveOwner + owner!
			return
		end
	end

	if (rwlock@ ExRwLock_SharedOwner + ExRwLockOwner_OwningThread + @ thread@ ==)
		rwlock@ ExRwLock_SharedOwner + owner!
		return
	end

	auto oldsize
	rwlock@ ExRwLock_TableSizeI + gi oldsize!

	auto tab
	rwlock@ ExRwLock_OwnerTable + @ tab!
	tab@ owner!

	auto free
	0 free!

	if (rwlock@ ExRwLock_SharedOwner + ExRwLockOwner_OwningThread + @ ~~)
		rwlock@ ExRwLock_SharedOwner + free!
	end

	while (oldsize@)
		if (owner@ ExRwLockOwner_OwningThread + @ thread@ ==)
			return
		end elseif (owner@ ExRwLockOwner_OwningThread + @ ~~)
			owner@ free!
		end

		ExRwLockOwner_SIZEOF owner +=
		1 oldsize -=
	end

	if (free@)
		free@ owner!
		return
	end

	rwlock@ ExRwLock_TableSizeI + gi oldsize!

	ipl@ KeIPLLower

	// return zero in owner to signify to caller to retry the acquire.

	auto newsize
	if (oldsize@ ~~)
		3 newsize!
	end else
		oldsize@ 4 + newsize!
	end

	newsize@ ExRwLockOwner_SIZEOF * // bytes
	'SOTa' // tag
	MUSTSUCCEEDL2 CANBLOCK | // flags
	MmAllocWithTag ok! owner!

	IPLDPC KeIPLRaise ipl!

	if (ok@)
		return
	end

	if (rwlock@ ExRwLock_TableSizeI + gi oldsize@ ~=)
		// someone already grew it... free what we did and return to retry.

		owner@ MmFree

		0 owner!

		return
	end

	if (tab@)
		owner@ // dest
		tab@ // src
		oldsize@ ExRwLockOwner_SIZEOF * // size
		memcpy

		tab@ MmFree
	end

	owner@ oldsize@ ExRwLockOwner_SIZEOF * + // ptr
	newsize@ ExRwLockOwner_SIZEOF * oldsize@ ExRwLockOwner_SIZEOF * - // size
	0 // word
	memset

	owner@ rwlock@ ExRwLock_OwnerTable + !
	newsize@ rwlock@ ExRwLock_TableSizeI + si

	0 owner!
end