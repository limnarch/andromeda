#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALConsole.h"
#include "<inc>/HALCrash.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Console.h"

#include "<ll>/OSDLL/OS.h"

// run-time message logging for executive.

var ExSystemConsoleName 0
public ExSystemConsoleName

var ExSystemConsole 0
public ExSystemConsole

fn ExSystemConsoleSet { name console -- }
	if (KeIPLCurrentGet IPLDPC >=)
		"ExSystemConsoleSet: IPL >= IPLDPC\n" KeCrash
	end

	auto rs
	HALCPUInterruptDisable rs!

	name@ ExSystemConsoleName!
	console@ ExSystemConsole!

	HALLogReset

	rs@ HALCPUInterruptRestore
end

fn FPuts { fd s -- }
	while (s@ gb)
		s@ gb Putc
		1 s +=
	end
end

fn FPutc { fd c -- }
	if (ExSystemConsole@)
		if (KeIPLCurrentGet IPLDPC <=)
			if (HALCrashed@ ~~)
				auto outputbuffer
				ExSystemConsole@ CoConsoleOutputBufferGet outputbuffer!

				c@ // value
				1 // overwrite
				0 // timeout
				KERNELMODE // lastmode
				EXRINGDONTWAIT // waitonfull
				outputbuffer@ // ringbuffer
				ExRingBufferWriteValue drop drop

				ExSystemConsole@ CoConsoleDoOutput

				return
			end
		end
	end

	c@ HALPutc
end

fn Putc { c -- }
	0 c@ FPutc
end