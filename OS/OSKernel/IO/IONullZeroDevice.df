//
// Implements the null and zero device drivers.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/IO.h"

#include "IOInternal.h"

rosection "INIT$text"

fn IOiNullInit { -- }
	fnsection "INIT$text"

	auto ok

	0 // extensionsize
	OSFILETYPE_CHARDEVICE // type
	"null" // name
	0 // sizeinbytes
	IODriverNull // driver
	ACCESS_OWNER_READ ACCESS_OWNER_WRITE | ACCESS_GROUP_READ | ACCESS_GROUP_WRITE | ACCESS_WORLD_READ | ACCESS_WORLD_WRITE | // permissions
	IODeviceCreate ok! drop

	if (ok@)
		ok@ "IOiNullInit: failed to create device object (%i)\n" KeCrash
	end

	0 // extensionsize
	OSFILETYPE_CHARDEVICE // type
	"zero" // name
	0 // sizeinbytes
	IODriverZero // driver
	ACCESS_OWNER_READ ACCESS_OWNER_WRITE | ACCESS_GROUP_READ | ACCESS_GROUP_WRITE | ACCESS_WORLD_READ | ACCESS_WORLD_WRITE | // permissions
	IODeviceCreate ok! drop

	if (ok@)
		ok@ "IOiNullInit: failed to create device object (%i)\n" KeCrash
	end
end

rosection "text"

// null driver

table IODriverNullDispatch
	0                                    // open
	0                                    // close
	0                                    // iocontrol
	0                                    // reserved
	0                                    // reserved
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reserved
	0                                    // reserved
	pointerof IONullRead                 // read
	pointerof IONullWrite                // write
endtable

table IODriverNull
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"null"                               // name
	pointerof IODriverNullDispatch       // dispatch table
	0                                    // flags

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

fn (IODispatchEnqueueIOPFunction) IONullRead { iopl -- done ok }
	fnsection "PAGE$text"

	0 ok!
	1 done!

	auto iop
	iopl@ IOPacketFromLocation iop!

	0 iopl@ IOPacketLocation_Length + !
	0 iop@ IOPacketHeader_StatusBlock + OSStatusBlock_Length + !

	0 // status
	0 // priboost
	iop@ // iop
	IOPacketCompleteLow
end

fn (IODispatchEnqueueIOPFunction) IONullWrite { iopl -- done ok }
	fnsection "PAGE$text"

	0 ok!
	1 done!

	auto iop
	iopl@ IOPacketFromLocation iop!

	0 // status
	0 // priboost
	iop@ // iop
	IOPacketCompleteLow
end

// zero driver

table IODriverZeroDispatch
	0                                    // open
	0                                    // close
	0                                    // iocontrol
	0                                    // reserved
	0                                    // reserved
	0                                    // system control
	0                                    // parse
	0                                    // create
	0                                    // flush
	pointerof IODeviceDeleteFileObject   // delete object
	0                                    // set information
	0                                    // get information
	0                                    // rename
	0                                    // readblock
	0                                    // writeblock
	0                                    // truncate
	0                                    // readdirectory
	0                                    // getpageaddr
	0                                    // delete device object
	0                                    // reserved
	0                                    // reserved
	pointerof IOZeroRead                 // read
	pointerof IOZeroWrite                // write
endtable

table IODriverZero
	IOVERSION_MAJOR                      // ioversion major
	IOVERSION_MINOR                      // ioversion minor

	"zero"                               // name
	pointerof IODriverZeroDispatch       // dispatch table
	0                                    // flags

	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
	0                                    // reserved
endtable

fn (IODispatchEnqueueIOPFunction) IOZeroRead { iopl -- done ok }
	fnsection "PAGE$text"

	auto iop
	iopl@ IOPacketFromLocation iop!

	auto buf
	iopl@ IOPacketLocationVirtualBuffer buf!

	if (iop@ IOPacketHeader_IOPFlagsB + gb IOPFLAG_USERMODE &)
		buf@ // ptr
		iopl@ IOPacketLocation_Length + @ // size
		0 // word
		KeSafeMemset ok!

		if (ok@)
			ok@ // status
			0 // priboost
			iop@ // iop
			IOPacketCompleteLow

			return
		end
	end else
		buf@ // ptr
		iopl@ IOPacketLocation_Length + @ // size
		0 // word
		memset
	end

	0 ok!
	1 done!

	0 // status
	0 // priboost
	iop@ // iop
	IOPacketCompleteLow
end

fn (IODispatchEnqueueIOPFunction) IOZeroWrite { iopl -- done ok }
	fnsection "PAGE$text"

	auto iop
	iopl@ IOPacketFromLocation iop!

	0 ok!
	1 done!

	0 // status
	0 // priboost
	iop@ // iop
	IOPacketCompleteLow
end