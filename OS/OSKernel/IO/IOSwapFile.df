//
// Implements swapfile management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALArgs.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

// TODO something like a godawful OOM killer for when swap gets pathologically
// low

var IOSwapPagesUsed 0
public IOSwapPagesUsed

var IOSwapPagesCount 0
public IOSwapPagesCount

var IOSwapPagesUsedPeak 0
public IOSwapPagesUsedPeak

var IOSwapPagesWritten 0
public IOSwapPagesWritten

var IOSwapPagesRead 0
public IOSwapPagesRead

var IOSwapPageHint 0

var IOSwapFileObject 0

buffer IOSwapBitmap ExBitmapHeader_SIZEOF

fn IOSwapFileCreateObject { fileobject -- sizeinpages ok }
	SeAmIAdmin ok!

	if (ok@)
		STATUS_PERMISSION_DENIED ok!

		return
	end

	if (IOSwapFileObject@)
		STATUS_FORBIDDEN_OPERATION ok!

		return
	end

	// XXX doesn't lock a mutex on the swap file information because it is
	// currently assumed that this function will only be called once by
	// SystemInit.exe, and it cannot be called again after that (assuming it
	// successfully established the swap file).

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_BLOCKDEVICE ==)
		// disk or otherwise
	end elseif (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_FILE ==)
		// file
	end else
		// bad

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	if (fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_EnsureBlocksForRange + @)
		// swapfile may be allocated sparsely, ensure all blocks are
		// pre-allocated in order to avoid overcommitting the disk.

		fcb@ IOFileControlBlock_SizeInBytes + @ // length
		0 // offset
		fcb@ // fcb
		fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_EnsureBlocksForRange + @
		IODispatchEnsureBlocksForRange ok!

		if (ok@)
			return
		end
	end

	fcb@ IOFileControlBlock_SizeInBytes + @ PAGESHIFT >> sizeinpages!

	if (sizeinpages@ 256 <)
		// needs to be at least 256 pages (1MB with 4KB pages)

		STATUS_SWAP_TOO_SMALL ok!

		return
	end

	auto bitmap

	sizeinpages@ 7 + 3 >> // bytes
	'SwBm' // tag
	MmAllocWithTag ok! bitmap!

	if (ok@)
		return
	end

	auto cacheblock

	0 // wantcaching
	fcb@ // fcb
	IOFileControlBlockCacheCheck ok! cacheblock!

	// the swapfile will be left with UncachedIOCount biased to prevent page
	// cache accesses to it.

	if (ok@)
		bitmap@ MmFree

		return
	end

	if (cacheblock@)
		bitmap@ MmFree

		STATUS_IO_TRY_AGAIN_LATER ok!

		return
	end

	sizeinpages@ // sizeinbits
	bitmap@ // data
	IOSwapBitmap // header
	ExBitmapInitialize

	IOSwapBitmap // header
	ExBitmapClear

	// bias refcount
	fileobject@ ObObjectReferenceByPointer drop

	// set system file
	1 fcb@ IOFileControlBlock_SystemFile + !

	// set as swapfile
	fileobject@ IOSwapFileObject!

	sizeinpages@ IOSwapPagesCount!
	sizeinpages@ MmCommitLimit!

	0 ok!
end

fn IOSwapFileCreate { filehandle -- sizeinpages ok }
	auto fileobject
	auto access

	IOFileTypeObject@ // type
	filehandle@ // handle
	ObObjectReferenceByHandle ok! fileobject! access!

	if (ok@)
		return
	end

	access@ ACCESS_WRITE ACCESS_READ | SeCheckAccess ok!

	if (ok@)
		fileobject@ ObObjectDereferenceByPointer drop

		return
	end

	fileobject@ // fileobject
	IOSwapFileCreateObject ok! sizeinpages!

	fileobject@ ObObjectDereferenceByPointer drop
end

fn IOSwapPageFree { pno -- }
	// frees a page in swap

	if (DEBUGCHECKS)
		if (IOSwapFileObject@ ~~)
			"IOSwapPageFree: no swapfile\n" KeCrash
		end
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	1 // runlength
	pno@ // index
	IOSwapBitmap // header
	ExBitmapClearBits

	1 IOSwapPagesUsed -=

	ipl@ KeIPLLower
end

fn IOSwapPageWrite { pageframe -- pno ok }
	// writes the pageframe to swap and returns the offset in pno.

	if (DEBUGCHECKS)
		if (pageframe@ PAGEOFFSETMASK &)
			"IOSwapPageWrite: pageframe wasn't page-aligned\n" KeCrash
		end

		if (IOSwapFileObject@ ~~)
			"IOSwapPageWrite: no swapfile\n" KeCrash
		end
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	// find a free swap page

	IOSwapPageHint@ // hint
	1 // runlength
	IOSwapBitmap // header
	ExBitmapFindRun ok! pno!

	if (ok@)
		ipl@ KeIPLLower

		// no free swap pages

		STATUS_NO_SWAP ok!

		return
	end

	pno@ IOSwapPageHint!

	1 // runlength
	pno@ // index
	IOSwapBitmap // header
	ExBitmapSetBits

	1 IOSwapPagesUsed +=

	if (IOSwapPagesUsed@ IOSwapPagesUsedPeak@ >)
		IOSwapPagesUsed@ IOSwapPagesUsedPeak!
	end

	ipl@ KeIPLLower

	auto fcb
	IOSwapFileObject@ IOFile_FileControlBlock + @ fcb!

	auto writefunc
	fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Write + @ writefunc!

	// perform the write operation

	0 // flags
	IOKFLAG_SWAPOUT // kflags
	PAGESIZE // length
	pno@ PAGESHIFT << // offset
	pageframe@ // buffer
	fcb@ // fcb
	KERNELMODE // lastmode
	writefunc@ IODispatchWriteFunction ok! drop

	if (ok@)
		// write failed!

		auto rs
		HALCPUInterruptDisable rs!
		1 IOSwapPagesUsed -=
		rs@ HALCPUInterruptRestore

		pno@ IOSwapPageFree

		return
	end

	HALCPUInterruptDisable rs!
	1 IOSwapPagesWritten +=
	rs@ HALCPUInterruptRestore
end

fn IOSwapPageRead { pageframe pno -- ok }
	// reads swap page at pno into pageframe and frees it in swap

	if (DEBUGCHECKS)
		if (pageframe@ PAGEOFFSETMASK &)
			"IOSwapPageRead: pageframe wasn't page-aligned\n" KeCrash
		end

		if (IOSwapFileObject@ ~~)
			"IOSwapPageRead: no swapfile\n" KeCrash
		end
	end

	auto fcb
	IOSwapFileObject@ IOFile_FileControlBlock + @ fcb!

	auto readfunc
	fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Read + @ readfunc!

	// perform the read operation

	OSWAIT_TIMEOUTINFINITE // timeout
	0 // flags
	0 // kflags
	PAGESIZE // length
	pno@ PAGESHIFT << // offset
	pageframe@ // buffer
	fcb@ // fcb
	KERNELMODE // lastmode
	readfunc@ IODispatchReadFunction ok! drop

	if (ok@)
		return
	end

	auto rs
	HALCPUInterruptDisable rs!
	1 IOSwapPagesRead +=
	rs@ HALCPUInterruptRestore
end