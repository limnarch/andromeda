//
// Implements management routines and eviction for filestream pages.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

table IOCacheEvictableFunctions
	pointerof IOCachePageEvictionFunction // EvictionFunc
	pointerof IOCachePageReferenceFunction // ReferenceFunc
	pointerof IOCachePageDereferenceFunction // DereferenceFunc
	0 // ModifyFunc
	0 // Reserved2
	0 // Reserved3
	0 // Reserved4
	0 // Reserved5
endtable

var IOCacheModifiedPageListHead 0
public IOCacheModifiedPageListHead

var IOCacheModifiedPageListTail 0
public IOCacheModifiedPageListTail

var IOCachePagesUsed 0
public IOCachePagesUsed

var IOCachePagesModifiedMaximum 0
public IOCachePagesModifiedMaximum

var IOCachePagesModifiedCount 0
public IOCachePagesModifiedCount

fn IOCachePageRemoveModified { pfdbe -- }
	auto rs
	HALCPUInterruptDisable rs!

	// remove from modified list
	auto n
	pfdbe@ MmPageFrameEntryEvictable_Next + @ n!

	if (n@)
		pfdbe@ MmPageFrameEntryEvictable_Prev + @ n@ MmPageFrameEntryEvictable_Prev + !
	end else // no next means we were the tail
		pfdbe@ MmPageFrameEntryEvictable_Prev + @ IOCacheModifiedPageListTail!
	end

	auto p
	pfdbe@ MmPageFrameEntryEvictable_Prev + @ p!

	if (p@)
		pfdbe@ MmPageFrameEntryEvictable_Next + @ p@ MmPageFrameEntryEvictable_Next + !
	end else // no prev means we were the head
		pfdbe@ MmPageFrameEntryEvictable_Next + @ IOCacheModifiedPageListHead!
	end

	rs@ HALCPUInterruptRestore
end

fn IOCachePageInsertModified { pfdbe -- }
	auto rs
	HALCPUInterruptDisable rs!

	// use the evict LRU links to insert the page on the back of the modified list

	auto t
	IOCacheModifiedPageListTail@ t!

	if (t@ ~~)
		0 pfdbe@ MmPageFrameEntryEvictable_Next + !
		0 pfdbe@ MmPageFrameEntryEvictable_Prev + !

		pfdbe@ IOCacheModifiedPageListHead!
		pfdbe@ IOCacheModifiedPageListTail!
	end else
		0 pfdbe@ MmPageFrameEntryEvictable_Next + !

		t@ pfdbe@ MmPageFrameEntryEvictable_Prev + !
		pfdbe@ t@ MmPageFrameEntryEvictable_Next + !
		pfdbe@ IOCacheModifiedPageListTail!
	end

	rs@ HALCPUInterruptRestore
end

fn IOCachePageWriteModified { dontunbias pfdbe -- ok }
	// XXX call with care: data loss could occur if thread can receive signals
	// during this operation

	if (DEBUGCHECKS)
		if (KeThreadCurrent@ KeThread_IgnoreKill + @ ~~)
			"IOCachePageWriteModified: could be killed\n" KeCrash
		end
	end

	auto fcb
	pfdbe@ IOPageFrameEntryCache_FCB + @ fcb!

	auto cacheblock
	fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (DEBUGCHECKS)
		if (pfdbe@ IOPageFrameEntryCache_Flags + @ IOCACHEPAGEFLAG_DIRTY & ~~)
			pfdbe@ "IOCachePageWriteModified: page wasn't dirty (0x%08x)\n" KeCrash
		end
	end

	// clear dirty flag
	IOCACHEPAGEFLAG_DIRTY ~ pfdbe@ IOPageFrameEntryCache_Flags + &=

	// decrement modified page count

	if (DEBUGCHECKS)
		if (cacheblock@ IOCacheInfoBlock_ModifiedPages + @ 0 ==)
			"IOCachePageWriteModified: underflow\n" KeCrash
		end
	end

	1 cacheblock@ IOCacheInfoBlock_ModifiedPages + -=
	1 IOCachePagesModifiedCount -=

	// remove from modified list
	pfdbe@ IOCachePageRemoveModified

	// if there's a modified PTE somewhere, clear the writable bit so that
	// the next time the process writes to it, this page gets properly
	// marked as dirty again

	if (pfdbe@ IOPageFrameEntryCache_ModifiedPTE + @)
		pfdbe@ IOPageFrameEntryCache_ModifiedPTE + @ MmPTEUnmodify
		0 pfdbe@ IOPageFrameEntryCache_ModifiedPTE + !
	end

	auto quotablock
	pfdbe@ IOPageFrameEntryCache_ModifiedQuotaBlock + @ quotablock!

	if (quotablock@)
		// someone was charged quota for this modified page

		1 // charge
		quotablock@ // quotablock
		MmQuotaBlockUnchargeModifiedPages

		quotablock@ MmQuotaBlockDereference

		0 pfdbe@ IOPageFrameEntryCache_ModifiedQuotaBlock + !
	end

	auto extent
	pfdbe@ IOPageFrameEntryCache_ModifiedExtent + @ extent!
	0 pfdbe@ IOPageFrameEntryCache_ModifiedExtent + !

	ipl@ KeIPLLower

	auto writefunc
	fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Write + @ writefunc!

	auto off
	pfdbe@ IOPageFrameEntryCache_OffsetInFile + @ off!

	if (DEBUGCHECKS)
		if (off@ extent@ + fcb@ IOFileControlBlock_SizeInBytes + @ >)
			fcb@ IOFileControlBlock_SizeInBytes + @
			off@ extent@ +
			"IOCachePageWriteModified: modified page extent (%d) beyond end of file (%d)\n" KeCrash
		end
	end

	// perform the write operation

	0 // flags
	0 // kflags
	extent@ // length
	off@ // offset
	pfdbe@ IOPageFrameEntryCache_PFN + @ PAGESHIFT << IDENTITYSPACE | // buffer
	fcb@ // fcb
	KERNELMODE // lastmode
	writefunc@ IODispatchWriteFunction ok! drop

	if (dontunbias@ ~~)
		// dontunbias will be 1 during something like truncation,
		// where the page frame is freed immediately after being
		// written out to disk. this avoids a redundant refcount bias,
		// which would be bad because interrupts will get disabled
		// for some cycles, twice, for no reason

		// no longer dirty, unbias the refcount
		pfdbe@ MmEvictablePageDereference drop
	end
end

fn IOCachePageGet { kflags locked offset fcb -- pageframe pfdbe ok }
	if (DEBUGCHECKS)
		if (offset@ PAGEOFFSETMASK &)
			"IOCachePageGet: offset wasn't page-aligned\n" KeCrash
		end
	end

	0 ok!

	auto cacheblock

	fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	auto filesize
	fcb@ IOFileControlBlock_SizeInBytes + @ filesize!

	if (DEBUGCHECKS)
		if (offset@ filesize@ >=)
			"IOCachePageGet: offset was beyond end of file\n" KeCrash
		end
	end

	auto bucket
	offset@ PAGESHIFT >> IOCACHEPAGEMASK & bucket!

	if (locked@ ~~)
		cacheblock@ // cacheblock
		IOCacheInfoBlockLockShared ok!

		if (ok@)
			return
		end

		bucket@ // bucket
		cacheblock@ // cacheblock
		IOCacheInfoBlockLockBucket ok!

		if (ok@)
			cacheblock@ IOCacheInfoBlockUnlock

			return
		end
	end

	auto buckethead
	cacheblock@ IOCacheInfoBlock_PageBucketListHeads + bucket@ 3 << + buckethead!

	auto buckettail
	cacheblock@ IOCacheInfoBlock_PageBucketListHeads + bucket@ 3 << + 4 + buckettail!

	buckethead@@ pfdbe!

	while (pfdbe@)
		if (pfdbe@ IOPageFrameEntryCache_OffsetInFile + @ offset@ ==)
			break
		end

		pfdbe@ IOPageFrameEntryCache_NextCachePage + @ pfdbe!
	end

	if (pfdbe@ ~~)
		if (filesize@ offset@ - PAGESIZE <)
			// not a full page -- get zeroes because this might leak data

			MMEVICTFLAG_FAST MMEVICTFLAG_WORKINGSET | // flags
			IOCacheEvictableFunctions // evictablefuncs
			ZEROMUST CACHEALLOC | // priority
			MmEvictablePageAlloc ok! drop pfdbe!
		end else
			// full page, get any random page that may or may not be zeroed

			MMEVICTFLAG_FAST MMEVICTFLAG_WORKINGSET | // flags
			IOCacheEvictableFunctions // evictablefuncs
			FREEFIRST CACHEALLOC | // priority
			MmEvictablePageAlloc ok! drop pfdbe!
		end

		auto rs

		if (ok@)
			if (DEBUGCHECKS)
				if (ok@ STATUS_NO_MEMORY ~=)
					ok@ "IOCachePageGet: weird return value from MmEvictablePageAlloc (%i)\n" KeCrash
				end
			end

			// weren't able to find a reusable page. try to allocate again,
			// but this time we can block.

			if (kflags@ IOKFLAG_SWAPOUT &)
				// this IOCachePageGet is needed for a swap-out operation
				// (i.e., the filesystem driver is using it to cache disk
				// structures and needs whatever is going to be read into
				// this page to know where to swap the page out to).

				// don't allow blocking, but do allow it to dip into the
				// MUSTSUCCEED pages.

				MUSTSUCCEED kflags!
			end else
				CANBLOCK kflags!
			end

			if (filesize@ offset@ - PAGESIZE <)
				// not a full page -- get zeroes because this might leak data otherwise

				MMEVICTFLAG_FAST MMEVICTFLAG_WORKINGSET | // flags
				IOCacheEvictableFunctions // evictablefuncs
				ZEROMUST kflags@ | // priority
				MmEvictablePageAlloc ok! drop pfdbe!
			end else
				// full page, get any random page that may or may not be zeroed

				MMEVICTFLAG_FAST MMEVICTFLAG_WORKINGSET | // flags
				IOCacheEvictableFunctions // evictablefuncs
				FREEFIRST kflags@ | // priority
				MmEvictablePageAlloc ok! drop pfdbe!
			end

			if (ok@)
				if (kflags@ MUSTSUCCEED ==)
					// we needed this page for a swapout, system detonates
					"IOCachePageGet: failed to get page needed for a swapout!\n" KeCrash
				end

				if (locked@ ~~)
					bucket@ // bucket
					cacheblock@ // cacheblock
					IOCacheInfoBlockUnlockBucket

					cacheblock@ // cacheblock
					IOCacheInfoBlockUnlock
				end

				return
			end else
				HALCPUInterruptDisable rs!
				1 IOCachePagesUsed +=
				rs@ HALCPUInterruptRestore
			end
		end else
			HALCPUInterruptDisable rs!
			1 IOCachePagesUsed +=
			rs@ HALCPUInterruptRestore
		end

		0 pfdbe@ IOPageFrameEntryCache_Flags + !
		offset@ pfdbe@ IOPageFrameEntryCache_OffsetInFile + !
		fcb@ pfdbe@ IOPageFrameEntryCache_FCB + !
		0 pfdbe@ IOPageFrameEntryCache_ModifiedExtent + !
		0 pfdbe@ IOPageFrameEntryCache_ModifiedQuotaBlock + !
		0 pfdbe@ IOPageFrameEntryCache_ModifiedPTE + !
		0 pfdbe@ IOPageFrameEntryCache_PrevCachePage + !
		0 pfdbe@ IOPageFrameEntryCache_NextCachePage + !

		pfdbe@ // pfdbe
		buckethead@ // buckethead
		IOCachePageInsert

		// account for this new reference

		0 // oldcount
		pfdbe@ // pfdbe
		IOCachePageReferenceFunction

		// no need to ref the page -- it gets ref'd on allocation by MmEvictablePageAlloc
	end else
		// found the page, it was in the cache already!

		// remove from hash list so that it can be reinserted on the recently-used end

		if (pfdbe@ buckethead@@ ~=)
			pfdbe@ // pfdbe
			buckethead@ // buckethead
			IOCachePageRemove

			pfdbe@ // pfdbe
			buckethead@ // buckethead
			IOCachePageInsert
		end

		// ref it so it doesn't get evicted while caller is using it

		pfdbe@ MmEvictablePageReference drop
	end

	if (locked@ ~~)
		bucket@ // bucket
		cacheblock@ // cacheblock
		IOCacheInfoBlockUnlockBucket

		cacheblock@ // cacheblock
		IOCacheInfoBlockUnlock
	end

	pfdbe@ IOPageFrameEntryCache_PFN + @ PAGESHIFT << IDENTITYSPACE | pageframe!
end

fn IOCacheDumpInfo { cacheblock -- }
	auto i
	0 i!

	while (i@ IOCACHEPAGEBUCKETS <)
		auto buckethead
		cacheblock@ IOCacheInfoBlock_PageBucketListHeads + i@ 3 << + buckethead!

		auto pfdbe
		buckethead@@ pfdbe!

		buckethead@ 4 + @ buckethead@@ i@ "%d h=%x t=%x: " Printf

		while (pfdbe@)
			pfdbe@ IOPageFrameEntryCache_References + @ "%d " Printf

			pfdbe@ IOPageFrameEntryCache_NextCachePage + @ pfdbe!
		end

		"\n" Printf

		1 i +=
	end
end

fn IOCachePageRemove { pfdbe buckethead -- }
	// remove from hash list.
	// assumes cache block is locked.

	auto n
	pfdbe@ IOPageFrameEntryCache_NextCachePage + @ n!

	if (n@)
		pfdbe@ IOPageFrameEntryCache_PrevCachePage + @ n@ IOPageFrameEntryCache_PrevCachePage + !
	end else // no next means we were the tail
		pfdbe@ IOPageFrameEntryCache_PrevCachePage + @ buckethead@ 4 + !
	end

	auto p
	pfdbe@ IOPageFrameEntryCache_PrevCachePage + @ p!

	if (p@)
		pfdbe@ IOPageFrameEntryCache_NextCachePage + @ p@ IOPageFrameEntryCache_NextCachePage + !
	end else // no prev means we were the head
		pfdbe@ IOPageFrameEntryCache_NextCachePage + @ buckethead@!
	end

	0 pfdbe@ IOPageFrameEntryCache_PrevCachePage + !
	0 pfdbe@ IOPageFrameEntryCache_NextCachePage + !
end

fn IOCachePageInsert { pfdbe buckethead -- }
	// insert into hash list on the recently-used end.
	// assumes cache block is locked.

	auto n
	buckethead@@ n!

	0 pfdbe@ IOPageFrameEntryCache_PrevCachePage + !
	n@ pfdbe@ IOPageFrameEntryCache_NextCachePage + !

	if (n@)
		pfdbe@ n@ IOPageFrameEntryCache_PrevCachePage + !
	end else // no head, set tail
		pfdbe@ buckethead@ 4 + !
	end

	pfdbe@ buckethead@!
end

fn (MmReferenceFunction) IOCachePageReferenceFunction { oldcount pfdbe -- }
	// keep track of a global refcount for the cache block.
	// this is done so that there's a fast way to tell whether
	// a file can be truncated.

	auto cacheblock
	pfdbe@ IOPageFrameEntryCache_FCB + @ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	cacheblock@ // cacheblock
	IOCacheInfoBlockReference drop
end

fn (MmDereferenceFunction) IOCachePageDereferenceFunction { oldcount pfdbe -- }
	auto cacheblock
	pfdbe@ IOPageFrameEntryCache_FCB + @ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	cacheblock@ // cacheblock
	IOCacheInfoBlockDereference drop
end

fn (MmEvictionFunction) IOCachePageEvictionFunction { pfdbe -- dropped evicted ok }
	0 dropped!

	auto cacheblock
	pfdbe@ IOPageFrameEntryCache_FCB + @ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	cacheblock@ IOCacheInfoBlockTryLockShared ok!

	if (ok@ ~~)
		// failed to lock -- don't wait.
		// return so that the caller can
		// immediately try the next page.

		0 ok!
		0 evicted!

		return
	end

	auto offset
	pfdbe@ IOPageFrameEntryCache_OffsetInFile + @ offset!

	auto bucket
	offset@ PAGESHIFT >> IOCACHEPAGEMASK & bucket!

	bucket@ // bucket
	cacheblock@ // cacheblock
	IOCacheInfoBlockTryLockBucket ok!

	if (ok@ ~~)
		// failed to lock bucket -- don't wait.
		// return so that the caller can
		// immediately try the next page.

		cacheblock@ IOCacheInfoBlockUnlock

		0 ok!
		0 evicted!

		return
	end

	if (DEBUGCHECKS)
		if (pfdbe@ IOPageFrameEntryCache_ModifiedQuotaBlock + @)
			"IOCachePageEvictionFunction: cache page had modified quota block\n" KeCrash
		end
	end

	auto buckethead
	cacheblock@ IOCacheInfoBlock_PageBucketListHeads + bucket@ 3 << + buckethead!

	// remove from hash list

	pfdbe@ // pfdbe
	buckethead@ // buckethead
	IOCachePageRemove

	1 IOCachePagesUsed -=

	1 evicted!

	bucket@ // bucket
	cacheblock@ // cacheblock
	IOCacheInfoBlockUnlockBucket

	cacheblock@ IOCacheInfoBlockUnlock
end

fn IOCachePageModifyQuotaCharge { quotablock pfdbe -- charged }
	// attempts to charge modified page quota for the pfdbe.
	// not 100% foolproof but "good enough".

	// keep in mind that once called, if you become aware that the page may
	// not be marked modified after all, ensure that you call
	// IOCachePageModifyQuotaUncharge on it BEFORE dereferencing it.

	// disable interrupts instead of raising IPL since raising IPL would
	// probably actually be slower.

	// XXX should this time out?

	auto ok

	auto rs
	HALCPUInterruptDisable rs!

	while (1)
		0 charged!

		if (pfdbe@ IOPageFrameEntryCache_ModifiedQuotaBlock + @)
			// page already accounted for.
			rs@ HALCPUInterruptRestore
			return
		end

		// page is not accounted for, try to charge quota.

		1 charged!

		1 // charge
		quotablock@ // quotablock
		MmQuotaBlockChargeModifiedPages ok!

		if (ok@)
			// failed to charge quota. throttle for 35ms and try again.
			rs@ HALCPUInterruptRestore

			35 // ms
			KERNELMODE // waitmode
			0 // alertable
			KeThreadSleep drop

			HALCPUInterruptDisable rs!
		end else
			// charged successfully.
			quotablock@ MmQuotaBlockReference
			quotablock@ pfdbe@ IOPageFrameEntryCache_ModifiedQuotaBlock + !
			rs@ HALCPUInterruptRestore
			return
		end
	end
end

fn IOCachePageModifyQuotaUncharge { pfdbe -- }
	auto quotablock
	pfdbe@ IOPageFrameEntryCache_ModifiedQuotaBlock + @ quotablock!

	if (DEBUGCHECKS)
		if (quotablock@ ~~)
			"IOCachePageModifyQuotaUncharge: no quotablock\n" KeCrash
		end
	end

	0 pfdbe@ IOPageFrameEntryCache_ModifiedQuotaBlock + !

	1 // charge
	quotablock@ // quotablock
	MmQuotaBlockUnchargeModifiedPages

	quotablock@ MmQuotaBlockDereference
end

fn IOCachePageModifyFunction { extent pfdbe -- ok }
	// mark a page modified and insert it on the modified page list if
	// necessary.

	0 ok!

	auto fcb
	pfdbe@ IOPageFrameEntryCache_FCB + @ fcb!

	auto cacheblock
	fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	if (DEBUGCHECKS)
		if (cacheblock@ ~~)
			"IOCachePageModify: no cacheblock on FCB\n" KeCrash
		end
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (extent@ pfdbe@ IOPageFrameEntryCache_ModifiedExtent + @ >)
		fcb@ IOFileControlBlock_SizeInBytes + @ pfdbe@ IOPageFrameEntryCache_OffsetInFile + @ -
		extent@
		min extent!

		extent@ pfdbe@ IOPageFrameEntryCache_ModifiedExtent + !
	end

	if (pfdbe@ IOPageFrameEntryCache_Flags + @ IOCACHEPAGEFLAG_DIRTY &)
		ipl@ KeIPLLower

		return
	end

	// bias the refcount so that it doesn't get evicted while dirty.
	// this gets undone when it is written out.

	pfdbe@ MmEvictablePageReference drop

	pfdbe@ IOCachePageInsertModified

	IOCACHEPAGEFLAG_DIRTY pfdbe@ IOPageFrameEntryCache_Flags + |=

	// mark valid: the page must either already be valid, and only be
	// partially modified, or be invalid and fully overwritten (in which case,
	// it is now valid). caller guarantees this.
	IOCACHEPAGEFLAG_VALID pfdbe@ IOPageFrameEntryCache_Flags + |=

	// will be decremented when written out
	1 cacheblock@ IOCacheInfoBlock_ModifiedPages + +=
	1 IOCachePagesModifiedCount +=

	if (IOCachePagesModifiedCount@ IOCachePagesModifiedMaximum@ >=)
		0 // priboost
		IOModifiedPageEvent // event
		KeEventSignal
	end

	ipl@ KeIPLLower
end

fn IOCachePageRead { flags kflags offset fcb -- pageframe pfdbe ok }
	auto cacheblock
	fcb@ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

	if (DEBUGCHECKS)
		if (cacheblock@ ~~)
			"IOCachePageRead: attempt to perform cached page read from noncached file\n" KeCrash
		end
	end

	cacheblock@ IOCacheInfoBlockLockShared ok!

	if (ok@)
		return
	end

	auto bucket
	offset@ PAGESHIFT >> IOCACHEPAGEMASK & bucket!

	bucket@ // bucket
	cacheblock@ // cacheblock
	IOCacheInfoBlockLockBucket ok!

	if (ok@)
		cacheblock@ IOCacheInfoBlockUnlock

		return
	end

	kflags@ // kflags
	1 // locked
	offset@ // offset
	fcb@ // fcb
	IOCachePageGet ok! pfdbe! pageframe!

	if (ok@)
		bucket@ // bucket
		cacheblock@ // cacheblock
		IOCacheInfoBlockUnlockBucket

		cacheblock@ IOCacheInfoBlockUnlock

		return
	end

	if (pfdbe@ IOPageFrameEntryCache_Flags + @ IOCACHEPAGEFLAG_VALID & ~~)
		// this cache page is invalid and needs to be read in

		auto readfunc
		fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Read + @ readfunc!

		if (DEBUGCHECKS)
			if (readfunc@ ~~)
				"IOCachePageRead: no read function\n" KeCrash
			end
		end

		// perform the read operation

		OSWAIT_TIMEOUTINFINITE // timeout
		flags@ // flags
		kflags@ // kflags
		PAGESIZE // length
		offset@ // offset
		pageframe@ // buffer
		fcb@ // fcb
		KERNELMODE // lastmode
		readfunc@ IODispatchReadFunction ok! drop

		if (ok@)
			// read failed

			pfdbe@ MmEvictablePageDereference drop

			bucket@ // bucket
			cacheblock@ // cacheblock
			IOCacheInfoBlockUnlockBucket

			cacheblock@ IOCacheInfoBlockUnlock

			return
		end

		// read succeeded, page is now valid

		IOCACHEPAGEFLAG_VALID pfdbe@ IOPageFrameEntryCache_Flags + |=
	end

	bucket@ // bucket
	cacheblock@ // cacheblock
	IOCacheInfoBlockUnlockBucket

	cacheblock@ IOCacheInfoBlockUnlock
end