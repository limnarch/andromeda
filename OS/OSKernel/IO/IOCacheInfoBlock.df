//
// Implements MINTIA page cache management routines.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<inc>/ViewCache.h"

#include "<ll>/OSDLL/OS.h"

var IOCacheInfoBlockDirtyCount 0
public IOCacheInfoBlockDirtyCount

var IOCacheInfoBlockDirtyListHead 0
public IOCacheInfoBlockDirtyListHead

var IOCacheInfoBlockDirtyListTail 0
public IOCacheInfoBlockDirtyListTail

fn IOCacheInfoBlockCreate { -- cacheblock ok }
	fnsection "PAGE$text"

	IOCacheInfoBlock_SIZEOF VcBuffer_SIZEOF + // bytes
	'Cach' // tag
	CANBLOCK POOLALLOC | // flags
	MmAllocWithTag ok! cacheblock!

	if (ok@)
		// allocation failed

		return
	end

	0 cacheblock@ IOCacheInfoBlock_Next + !
	0 cacheblock@ IOCacheInfoBlock_Prev + !

	1 cacheblock@ IOCacheInfoBlock_References + !

	0 cacheblock@ IOCacheInfoBlock_ModifiedPageCount + !

	-1 cacheblock@ IOCacheInfoBlock_FirstModifiedPage + !
	0 cacheblock@ IOCacheInfoBlock_LastModifiedPage + !

	0 cacheblock@ IOCacheInfoBlock_MapCount + !
	0 cacheblock@ IOCacheInfoBlock_Flags + !
	
	0 cacheblock@ IOCacheInfoBlock_SplayTreeRoot + !
	0 cacheblock@ IOCacheInfoBlock_BCBTreeRoot + !

	1 // signaled
	OSEVENT_SYNCH // type
	"BCBTreeEvent" // name
	cacheblock@ IOCacheInfoBlock_BCBTreeEvent + // event
	KeEventInitialize

	0 cacheblock@ IOCacheInfoBlock_SIZEOF + VcBuffer_WindowAddress + !
	0 cacheblock@ IOCacheInfoBlock_SIZEOF + VcBuffer_FileControlBlock + !
	VCBCBTYPE_PERMANENT cacheblock@ IOCacheInfoBlock_SIZEOF + VcBuffer_Type + !
end

fn IOCacheInfoBlockReference { cacheblock -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	cacheblock@ IOCacheInfoBlock_References + @ oldcount!

	oldcount@ 1 + cacheblock@ IOCacheInfoBlock_References + !

	rs@ HALCPUInterruptRestore
end

fn IOCacheInfoBlockDereference { cacheblock -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	cacheblock@ IOCacheInfoBlock_References + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"IOCacheInfoBlockDereference: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - cacheblock@ IOCacheInfoBlock_References + !

	rs@ HALCPUInterruptRestore

	if (oldcount@ 1 ==)
		cacheblock@ MmFree
	end
end

fn IOCacheInfoBlockTryIncrementMap { cacheblock -- oldcount ok }
	0 ok!

	auto rs
	HALCPUInterruptDisable rs!

	if (cacheblock@ IOCacheInfoBlock_Flags + @ IOCACHEBLOCKFLAG_TRUNCATING &)
		rs@ HALCPUInterruptRestore

		STATUS_TRY_AGAIN_LATER ok!

		return
	end

	cacheblock@ IOCacheInfoBlock_MapCount + @ oldcount!

	oldcount@ 1 + cacheblock@ IOCacheInfoBlock_MapCount + !

	rs@ HALCPUInterruptRestore
end

fn IOCacheInfoBlockDecrementMap { cacheblock -- oldcount }
	auto rs
	HALCPUInterruptDisable rs!

	cacheblock@ IOCacheInfoBlock_MapCount + @ oldcount!

	if (DEBUGCHECKS)
		if (oldcount@ 0 ==)
			"IOCacheInfoBlockDecrementMap: underflow\n" KeCrash
		end
	end

	oldcount@ 1 - cacheblock@ IOCacheInfoBlock_MapCount + !

	rs@ HALCPUInterruptRestore
end

fn IOCacheInfoBlockFlush { cacheblock -- ok }
	// flush all of the cacheblock's dirty pages.

	0 ok!

	auto pfdbe

	auto ipl
	IPLDPC KeIPLRaise ipl!

	auto first
	cacheblock@ IOCacheInfoBlock_FirstModifiedPage + @ first!

	auto last
	cacheblock@ IOCacheInfoBlock_LastModifiedPage + @ last!

	-1 cacheblock@ IOCacheInfoBlock_FirstModifiedPage + !
	0 cacheblock@ IOCacheInfoBlock_LastModifiedPage + !

	first@ // value
	cacheblock@ IOCacheInfoBlock_SplayTreeRoot + // rootptr
	ExSplayTreeFindNodeByValue pfdbe! first!

	if (pfdbe@ ~~)
		// something happened to our first modified page since that hint was
		// set, so use the next closest node.

		first@ pfdbe!
	end

	while (pfdbe@)
		IOPageFrameEntryCache_Parent pfdbe -=

		if (pfdbe@ IOPageFrameEntryCache_OffsetInFile + @ last@ >)
			break
		end

		if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED &)
			pfdbe@ MmEvictablePageReference drop

			0 // transfer
			IOKFLAG_URGENT // kflags
			pfdbe@ // pfdbe
			IOCachePageWrite ok!

			pfdbe@ MmEvictablePageDereference drop

			if (ok@)
				break
			end
		end

		pfdbe@ IOPageFrameEntryCache_Parent + // node
		ExSplayTreeNodeNext pfdbe!
	end

	ipl@ KeIPLLower
end

fn IOCacheInfoBlockTruncate { newsize writeout cacheblock -- ok }
	// attempt to evict all of the cacheblock's page frames beyond newsize.
	// also evicts the page that contains newsize, to prevent a weird
	// interaction with the dirty page writer.

	auto maxpage
	newsize@ PAGENUMBERMASK & maxpage!

	0 ok!

	auto pfdbe
	auto lpfdbe

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (cacheblock@ IOCacheInfoBlock_MapCount + @)
		// this file is currently mapped. truncation isn't allowed.

		ipl@ KeIPLLower

		STATUS_TRY_AGAIN_LATER ok!

		return
	end

	if (cacheblock@ IOCacheInfoBlock_BCBTreeRoot + @)
		newsize@ // newsize
		cacheblock@ // cacheblock
		VcCacheInfoBlockTruncate
	end

	IOCACHEBLOCKFLAG_TRUNCATING cacheblock@ IOCacheInfoBlock_Flags + |=

	newsize@ // value
	cacheblock@ IOCacheInfoBlock_SplayTreeRoot + // rootptr
	ExSplayTreeFindNodeByValue pfdbe! lpfdbe!

	if (pfdbe@ ~~)
		lpfdbe@ pfdbe!
	end

	while (pfdbe@)
		IOPageFrameEntryCache_Parent pfdbe -=

		if (pfdbe@ IOPageFrameEntryCache_OffsetInFile + @ newsize@ >=)
			pfdbe@ MmEvictablePageReference drop

			while (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_IOINPROGRESS &)
				0 // process
				MUSTSUCCEEDL2 CANBLOCK | // pri
				pfdbe@ // pfdbe
				MmEvictablePageWait drop
			end

			if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED &)
				if (writeout@)
					// this is a dirty page, and caller wants us to
					// write them out to disk. the alternative is
					// writeout==0, which means the caller says its fine
					// to ignore and throw them out.

					0 // transfer
					IOKFLAG_URGENT // kflags
					pfdbe@ // pfdbe
					IOCachePageWrite ok!

					if (ok@)
						pfdbe@ MmEvictablePageDereference drop

						break
					end
				end
			end

			auto npfdbe
			pfdbe@ IOPageFrameEntryCache_Parent + // node
			ExSplayTreeNodeNext npfdbe!

			pfdbe@ IOPageFrameEntryCache_Parent + // node
			cacheblock@ IOCacheInfoBlock_SplayTreeRoot + // rootptr
			ExSplayTreeRemove

			pfdbe@ MmEvictablePageDelete

			pfdbe@ MmEvictablePageDereference drop

			npfdbe@ pfdbe!

			1 IOCachePagesUsed -=
		end else
			pfdbe@ IOPageFrameEntryCache_Parent + // node
			ExSplayTreeNodeNext pfdbe!
		end
	end

	IOCACHEBLOCKFLAG_TRUNCATING ~ cacheblock@ IOCacheInfoBlock_Flags + &=

	ipl@ KeIPLLower
end

fn IOCacheInfoBlockDestroy { writeout cacheblock -- ok }
	fnsection "PAGE$text"

	// assumes caller made sure there's no way this cacheblock can be used by
	// anybody else.

	KeThreadCurrent@ KeThreadIgnoreKill drop

	0 // newsize
	writeout@ // writeout
	cacheblock@ // cacheblock
	IOCacheInfoBlockTruncate ok!

	if (ok@ ~~)
		cacheblock@ IOCacheInfoBlockDereference drop
	end

	KeThreadCurrent@ KeThreadAcceptKill drop
end