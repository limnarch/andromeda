//
// Implements pagefile management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALArgs.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<inc>/Transfer.h"

#include "<ll>/OSDLL/OS.h"

#include "../../Common/Common.h"

extern MmMPWAssessTransfers { transfer1 -- }

var IOSwapPagesUsed 0
public IOSwapPagesUsed

var IOSwapPagesCount 0
public IOSwapPagesCount

var IOSwapPagesUsedPeak 0
public IOSwapPagesUsedPeak

var IOSwapPagesWritten 0
public IOSwapPagesWritten

var IOSwapPagesRead 0
public IOSwapPagesRead

struct IOPageFile
	4 MinimumSize
	4 MaximumSize
	4 FileObject
	4 CapturedFCB
	ComBitmapHeader_SIZEOF BitmapHeader
	4 Hint
	4 CurrentSize
	4 UsedCount
	4 Priority
	4 Number
	4 Next
endstruct

buffer IOPageFileCreationMutex KeMutex_SIZEOF

buffer IOPageFileExtendEvent KeEvent_SIZEOF
public IOPageFileExtendEvent

table IOPageFiles[IOPAGEFILEMAX]

table IOPageFilePriorityListHeads[IOPAGEFILEMAXPRI]
table IOPageFilePriorityListTails[IOPAGEFILEMAXPRI]

var IOPageFileExtensionIndex 0

var IOPageFileCount 0
public IOPageFileCount

fn IOPageFileInsert { pri fcb pagefile -- }
	// set system file flag
	auto rs
	HALCPUInterruptDisable rs!
	IOFCBFLAG_SYSTEMFILE fcb@ IOFileControlBlock_Flags + |=

	pagefile@ [IOPageFileCount@]IOPageFiles!
	pagefile@ IOPageFile_MinimumSize + @ IOSwapPagesCount +=

	auto h
	[pri@]IOPageFilePriorityListHeads@ h!

	h@ pagefile@ IOPageFile_Next + !
	pagefile@ [pri@]IOPageFilePriorityListHeads!

	if (h@ ~~)
		pagefile@ [pri@]IOPageFilePriorityListTails!
	end

	2 MmAnonTransfersAvailable +=

	rs@ HALCPUInterruptRestore

	if (IOPageFileCount@ 0 ==)
		// this is the first pagefile created.
		// set the commit limit to its size and signal the creation event.

		pagefile@ IOPageFile_MinimumSize + @ MmCommitLimit!
		pagefile@ IOPageFile_MaximumSize + @ MmTheoreticalCommitLimit!
	end else
		HALCPUInterruptDisable rs!
		pagefile@ IOPageFile_MinimumSize + @ MmCommitLimit +=
		pagefile@ IOPageFile_MaximumSize + @ MmTheoreticalCommitLimit +=
		rs@ HALCPUInterruptRestore
	end

	1 IOPageFileCount +=
end

fn IOPageFileGetPriority { pagefile -- pri }
	pagefile@ IOPageFile_Priority + @ pri!
end

fn IOPageFileGetFree { pagefile -- free }
	pagefile@ IOPageFile_CurrentSize + @ pagefile@ IOPageFile_UsedCount + @ - free!
end

fn IOPageFileInit { -- }
	fnsection "INIT$text"

	"IOPageFileCreationMutex" // name
	KERNELMODE // mode
	IOPageFileCreationMutex // mutex
	KeMutexInitialize
end

fn IOPageFileCreateLock { -- }
	fnsection "PAGE$text"

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	IOPageFileCreationMutex // object
	KeThreadWaitForObject drop
end

fn IOPageFileCreateUnlock { -- }
	fnsection "PAGE$text"

	0 // abandon
	IOPageFileCreationMutex // mutex
	KeMutexRelease drop
end

fn IOPageFileCreate { minpages maxpages pri path -- ok }
	fnsection "PAGE$text"

	SeAmIAdmin ok!

	if (ok@)
		STATUS_PERMISSION_DENIED ok!

		return
	end

	if (pri@ IOPAGEFILEMAXPRI >=)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	if (maxpages@ minpages@ <)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	IOPageFileCreateLock

	if (IOPageFileCount@ IOPAGEFILEMAX >=)
		IOPageFileCreateUnlock

		STATUS_TOO_MANY_PAGEFILES ok!

		return
	end

	416 KeThreadCurrent@ PsThread_FileCreationPermissions + !

	auto handle
	OSFILEFLAG_CREATE OSFILEFLAG_PAGEFILE | // flags
	ACCESS_READ ACCESS_WRITE | // access
	OSNONE // initialobjecthandle
	path@ // path
	ObObjectOpenByPath ok! handle!

	if (ok@)
		IOPageFileCreateUnlock

		return
	end

	auto fileobject
	auto access
	IOFileTypeObject@ // type
	handle@ // handle
	ObObjectReferenceByHandle ok! fileobject! access!

	handle@ ObObjectClose drop

	if (ok@)
		IOPageFileCreateUnlock

		return
	end

	access@ ACCESS_WRITE ACCESS_READ | SeCheckAccess ok!

	if (ok@)
		IOPageFileCreateUnlock

		fileobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	if (fcb@ IOFileControlBlock_Flags + @ IOFCBFLAG_SYSTEMFILE &)
		IOPageFileCreateUnlock

		fileobject@ ObObjectDereferenceByPointer drop

		STATUS_DEVICE_BUSY ok!

		return
	end

	if (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_BLOCKDEVICE ==)
		// disk or otherwise, can't resize.

		fcb@ IOFileControlBlock_SizeInBytes + @ PAGESHIFT >> dup minpages! maxpages!
	end elseif (fcb@ IOFileControlBlock_FileType + @ OSFILETYPE_FILE ==)
		// file, truncate to minpages.

		minpages@ PAGESHIFT << // newsize
		0 // growing
		0 // keeplocked
		0 // zero
		OSFILEFLAG_NOCACHE // flags
		fcb@ // fcb
		IOFileControlBlockTruncate ok! drop

		if (ok@)
			IOPageFileCreateUnlock

			fileobject@ ObObjectDereferenceByPointer drop

			return
		end
	end else
		// bad

		IOPageFileCreateUnlock

		fileobject@ ObObjectDereferenceByPointer drop

		STATUS_INVALID_ARGUMENT ok!

		return
	end

	if (minpages@ 128 <)
		// needs to be at least 128 pages (512KB with 4KB pages)

		IOPageFileCreateUnlock

		fileobject@ ObObjectDereferenceByPointer drop

		STATUS_SWAP_TOO_SMALL ok!

		return
	end

	// do an inline allocation of the pagefile, two transfer structures, and
	// the bitmap.

	auto pagefile
	IOPageFile_SIZEOF
	IOTransfer_SIZEOF 2 * +
	maxpages@ 7 + 3 >> + // bytes
	'SwFi' // tag
	CANBLOCK // flags
	MmAllocWithTag ok! pagefile!

	if (ok@)
		IOPageFileCreateUnlock

		fileobject@ ObObjectDereferenceByPointer drop

		return
	end

	auto transfer1
	pagefile@ IOPageFile_SIZEOF + transfer1!

	pagefile@ // pagefile
	transfer1@ // transfer
	MmMPWAnonTransferInitialize

	auto transfer2
	transfer1@ IOTransfer_SIZEOF + transfer2!

	pagefile@ // pagefile
	transfer2@ // transfer
	MmMPWAnonTransferInitialize

	auto bitmap
	transfer2@ IOTransfer_SIZEOF + bitmap!

	// initialize the bitmap
	maxpages@ // sizeinbits
	bitmap@ // data
	pagefile@ IOPageFile_BitmapHeader + // header
	ComBitmapInitialize

	// clear the minimum size
	minpages@ // runlength
	0 // index
	pagefile@ IOPageFile_BitmapHeader + // header
	ComBitmapClearBits

	// set beyond the minimum size
	maxpages@ minpages@ - // runlength
	minpages@ // index
	pagefile@ IOPageFile_BitmapHeader + // header
	ComBitmapSetBits

	// initialize pagefile structures
	minpages@ pagefile@ IOPageFile_MinimumSize + !
	maxpages@ pagefile@ IOPageFile_MaximumSize + !
	fileobject@ pagefile@ IOPageFile_FileObject + !
	fileobject@ IOFile_FileControlBlock + @ pagefile@ IOPageFile_CapturedFCB + !
	0 pagefile@ IOPageFile_Hint + !
	minpages@ pagefile@ IOPageFile_CurrentSize + !
	0 pagefile@ IOPageFile_UsedCount + !
	pri@ pagefile@ IOPageFile_Priority + !
	IOPageFileCount@ pagefile@ IOPageFile_Number + !

	pri@ // pri
	fcb@ // fcb
	pagefile@ // pagefile
	IOPageFileInsert

	transfer1@ IOTransferComplete
	transfer2@ IOTransferComplete

	IOPageFileCreateUnlock

	// leave fileobject refcount biased

	0 ok!
end

fn IOPageFileQuery { query id -- ok }
	fnsection "PAGE$text"

	if (id@ IOPageFileCount@ >=)
		STATUS_INVALID_ARGUMENT ok!

		return
	end

	0 ok!

	auto pagefile
	[id@]IOPageFiles@ pagefile!

	if (pagefile@ IOPageFile_FileObject + @ IOFile_OpenedPath + @)
		query@ OSPageFileInformation_Name + // dest
		pagefile@ IOPageFile_FileObject + @ IOFile_OpenedPath + @ // src
		strcpy
	end else
		query@ OSPageFileInformation_Name + // dest
		"unknown" // src
		strcpy
	end

	pagefile@ IOPageFile_MinimumSize + @ query@ OSPageFileInformation_MinimumSize + !
	pagefile@ IOPageFile_MaximumSize + @ query@ OSPageFileInformation_MaximumSize + !
	pagefile@ IOPageFile_CurrentSize + @ query@ OSPageFileInformation_CurrentSize + !
	pagefile@ IOPageFile_UsedCount + @ query@ OSPageFileInformation_UsedCount + !
	pagefile@ IOPageFile_Priority + @ query@ OSPageFileInformation_Priority + !
end

fn IOPageFileReserve { pagesneeded pagefile -- offset ok }
	auto bmpheader
	pagefile@ IOPageFile_BitmapHeader + bmpheader!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (pagefile@ IOPageFile_CurrentSize + @ pagefile@ IOPageFile_UsedCount + @ - pagesneeded@ <)
		ipl@ KeIPLLower

		STATUS_NO_SWAP ok!

		return
	end

	pagefile@ IOPageFile_Hint + @ // hint
	pagesneeded@ // runlength
	bmpheader@ // header
	ComBitmapFindRun ok! offset!

	if (ok@)
		ipl@ KeIPLLower

		STATUS_NO_SWAP ok!

		return
	end

	pagesneeded@ IOSwapPagesUsed +=

	if (IOSwapPagesUsed@ IOSwapPagesUsedPeak@ >)
		IOSwapPagesUsed@ IOSwapPagesUsedPeak!
	end

	pagesneeded@ pagefile@ IOPageFile_UsedCount + +=

	pagesneeded@ // runlength
	offset@ // index
	bmpheader@ // header
	ComBitmapSetBits

	ipl@ KeIPLLower

	offset@ pagefile@ IOPageFile_Hint + !
end

fn IOPageFileRelease { pages offset pagefile -- }
	if (pages@ ~~)
		return
	end

	auto ipl
	IPLDPC KeIPLRaise ipl!

	pages@ IOSwapPagesUsed -=
	pages@ pagefile@ IOPageFile_UsedCount + -=

	pages@ // runlength
	offset@ // index
	pagefile@ IOPageFile_BitmapHeader + // header
	ComBitmapClearBits

	if (MmAnonTransfersAvailable@ ~~
		pagefile@ IOPageFile_CurrentSize + @ pagefile@ IOPageFile_UsedCount + @ - IOPAGEFILEFREELOW >= ||)
		pagefile@ IOPageFile_SIZEOF + MmMPWAssessTransfers
	end

	ipl@ KeIPLLower
end

fn IOSwapPageFree { pno pagefile -- }
	// frees a page in swap

	auto ipl
	IPLDPC KeIPLRaise ipl!

	1 // runlength
	pno@ // index
	pagefile@ IOPageFile_BitmapHeader + // header
	ComBitmapClearBits

	1 IOSwapPagesUsed -=
	1 pagefile@ IOPageFile_UsedCount + -=

	if (DEBUGCHECKS)
		if (IOSwapPagesUsed@ z<)
			"IOSwapPageFree: underflow\n" KeCrash
		end
	end

	if (MmAnonTransfersAvailable@ ~~
		pagefile@ IOPageFile_CurrentSize + @ pagefile@ IOPageFile_UsedCount + @ - IOPAGEFILEFREELOW >= ||)
		pagefile@ IOPageFile_SIZEOF + MmMPWAssessTransfers
	end

	ipl@ KeIPLLower
end

fn IOSwapPageFreePTE { pte -- }
	if (DEBUGCHECKS)
		if (pte@ PTE_INSWAP & ~~)
			"IOSwapPageFreePTE: not an INSWAP pte\n" KeCrash
		end
	end

	pte@ PAGESHIFT >> // pno
	[pte@ PTE_PAGEFILE_SHIFT >> PTE_PAGEFILE_MASK &]IOPageFiles@ // pagefile
	IOSwapPageFree
end

fn IOSwapPageReadPTE { kflags pfdbe pte -- ok }
	// reads swap page at pno into pageframe

	if (DEBUGCHECKS)
		if (pte@ PTE_INSWAP & ~~)
			"IOSwapPageReadPTE: not an INSWAP pte\n" KeCrash
		end
	end

	auto pagefile
	[pte@ PTE_PAGEFILE_SHIFT >> PTE_PAGEFILE_MASK &]IOPageFiles@ pagefile!

	auto fcb
	pagefile@ IOPageFile_CapturedFCB + @ fcb!

	auto readfunc
	fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Read + @ readfunc!

	// perform the read operation

	auto event
	KeEvent_SIZEOF alloc event!

	0 // signaled
	OSEVENT_NOTIF // type
	"IOSwapPageReadEvent" // name
	event@ // event
	KeEventInitialize

	auto mdl
	MmMDLHeader_SIZEOF 4 2 * + alloc mdl!

	pfdbe@ mdl@ MmMDLHeader_SIZEOF + !
	-1 mdl@ MmMDLHeader_SIZEOF + 4 + !

	KERNELMODE // mode
	PAGESIZE // length
	0 // vaddr
	mdl@ // mdl
	MmMDLInitialize

	MMMDL_PINNED MMMDL_DONTUNPIN | mdl@ MmMDLHeader_Flags + !

	event@ mdl@ MmMDLHeader_Event + !

	OSWAIT_TIMEOUTINFINITE // timeout
	0 // flags
	kflags@ // kflags
	pte@ PAGENUMBERMASK & // offset
	mdl@ // mdl
	fcb@ // fcb
	readfunc@ IODispatchReadFunction ok!

	if (ok@)
		// complete the MDL so we can wait for any fragments to finish

		ok@ // status
		0 // priboost
		mdl@ // mdl
		MmMDLComplete
	end

	if (event@ KeEvent_DispatchHeader + KeDispatchHeader_Signaled + @ ~~)
		KERNELMODE // waitmode
		0 // alertable
		OSWAIT_TIMEOUTINFINITE // timeout
		event@ // object
		KeThreadWaitForObject drop
	end

	if (ok@)
		return
	end

	mdl@ MmMDLHeader_Status + @ ok!

	if (ok@)
		return
	end

	auto rs
	HALCPUInterruptDisable rs!
	1 IOSwapPagesRead +=
	1 MmPageInCount +=
	rs@ HALCPUInterruptRestore
end

fn IOPageFileWriteMDL { pagecount offset mdl -- ok }
	KERNELMODE // mode
	pagecount@ PAGESHIFT << // length
	0 // vaddr
	mdl@ // mdl
	MmMDLInitialize

	MMMDL_DONTUNPIN MMMDL_PINNED | mdl@ MmMDLHeader_Flags + |=
	pointerof IOSwapPageWriteMDLComplete mdl@ MmMDLHeader_CompleteRoutine + !
	offset@ mdl@ MmMDLHeader_Context + !

	auto pagefile
	mdl@ IOTransfer_PageFile + @ pagefile!

	auto fcb
	pagefile@ IOPageFile_CapturedFCB + @ fcb!

	auto writefunc
	fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_Write + @ writefunc!

	0 // flags
	IOKFLAG_SWAPOUT // kflags
	offset@ PAGESHIFT << // offset
	mdl@ // mdl
	fcb@ // fcb
	writefunc@ IODispatchWriteFunction ok!

	if (ok@)
		ok@ // status
		0 // priboost
		mdl@ // mdl
		MmMDLComplete

		return
	end

	pagecount@ IOSwapPagesWritten +=
end

fn (MmMDLCompleteRoutine) IOSwapPageWriteMDLComplete { mdl -- }
	// runs as an APC in the context of the modified page writer.

	auto status
	mdl@ MmMDLHeader_Status + @ status!

	auto pagecount
	mdl@ MmMDLHeader_Pages + @ pagecount!

	auto pagefile
	mdl@ IOTransfer_PageFile + @ pagefile!

	auto offset
	mdl@ MmMDLHeader_Context + @ offset!

	auto mdlpos
	mdl@ MmMDLHeader_SIZEOF + mdlpos!

	auto number
	pagefile@ IOPageFile_Number + @ number!

	while (pagecount@)
		auto pfdbe
		mdlpos@@ pfdbe!

		if (status@)
			// IO error, don't save the swap page

			offset@ pagefile@ IOSwapPageFree

			auto rs
			HALCPUInterruptDisable rs!
			pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb MMEVICTFLAG_MODIFIED |
			pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + sb
			rs@ HALCPUInterruptRestore
		end else
			if (pfdbe@ MmPageFrameEntryEvictable_EvictionFlagsB + gb
				MMEVICTFLAG_MODIFIED MMEVICTFLAG_DELETED | &)
				// modified or deleted, free the swap page :(

				offset@ pagefile@ IOSwapPageFree
			end else
				auto swappte
				pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + @ swappte!

				offset@ PAGESHIFT << number@ PTE_PAGEFILE_SHIFT << | PTE_INSWAP |
				swappte@ PTE_TLBHACK & |
#ifdef DEBUGCHECKS
				swappte@ PTE_KERNELSTACK & |
#endif
				pfdbe@ MmPageFrameEntryAnonymous_SwapPTE + !
			end
		end

		pfdbe@ MmEvictablePageDereference drop

		1 offset +=
		1 pagecount -=
		4 mdlpos +=
	end

	if (status@)
		// TODO pop-up window or something
		status@ "IO error while writing data to swap (%i)\n" Printf
	end

	// root MDL, complete transfer.
	// this requires no synchronization as the transfer structures are
	// only accessed by the modified page writer, which is currently
	// executing this routine

	mdl@ IOTransferComplete
end

var IOPageFileExtensionListHead 0
var IOPageFileExtensionListTail 0

struct IOPageFileExtension
	4 Next
	4 Pages
	KeEvent_SIZEOF Event
	4 Success
endstruct

fn IOPageFileRequestExpansion { pages -- ok }
	// entered and left at IPLDPC.

	// quick check to make sure this can feasibly work before we go to the
	// trouble of queuing a request and waking the worker thread.

	auto i
	0 i!

	auto avail
	0 avail!

	while (i@ IOPageFileCount@ <)
		auto pagefile
		[i@]IOPageFiles@ pagefile!

		pagefile@ IOPageFile_MaximumSize + @ pagefile@ IOPageFile_CurrentSize + @ - avail +=

		if (avail@ pages@ >=)
			break
		end

		1 i +=
	end

	if (avail@ pages@ MmCommitUsage@ + MmCommitLimit@ - <)
		// not enough potential expansion left to satisfy this.
		STATUS_COMMIT_EXCEEDED ok!
		return
	end

	IPLLOW KeIPLLower

	auto extension
	IOPageFileExtension_SIZEOF alloc extension!

	0 extension@ IOPageFileExtension_Next + !
	pages@ extension@ IOPageFileExtension_Pages + !
	-1 extension@ IOPageFileExtension_Success + !

	0 // signaled
	OSEVENT_SYNCH // type
	"IOPageFileRequestExpansionEvent" // name
	extension@ IOPageFileExtension_Event + // event
	KeEventInitialize

	auto rs
	HALCPUInterruptDisable rs!

	auto t
	IOPageFileExtensionListTail@ t!

	if (t@ ~~)
		extension@ IOPageFileExtensionListHead!
	end else
		extension@ t@ IOPageFileExtension_Next + !
	end

	extension@ IOPageFileExtensionListTail!

	rs@ HALCPUInterruptRestore

	0 // priboost
	IOPageFileExtendEvent // event
	KeEventSignal

	KERNELMODE // waitmode
	0 // alertable
	OSWAIT_TIMEOUTINFINITE // timeout
	extension@ IOPageFileExtension_Event + // object
	KeThreadWaitForObject drop

	extension@ IOPageFileExtension_Success + @ ok!

	IPLDPC KeIPLRaise drop
end

fn IOPageFileExtend { -- }
	// called by worker thread.
	// pops extension requests off the listhead and tries to satisfy them.
	// satisfying a request is done by extending the pagefile & signaling the
	// event to wake up the waiting thread.

	while (IOPageFileExtensionListHead@)
		auto extension

		auto rs
		HALCPUInterruptDisable rs!

		IOPageFileExtensionListHead@ extension!
		extension@ IOPageFileExtension_Next + @ IOPageFileExtensionListHead!

		if (IOPageFileExtensionListHead@ ~~)
			0 IOPageFileExtensionListTail!
		end

		rs@ HALCPUInterruptRestore

		extension@ IOPageFileSatisfyExtension
	end
end

fn IOPageFileSatisfyExtension { extension -- }
	auto i
	0 i!

	auto avail
	0 avail!

	auto ipl
	IPLDPC KeIPLRaise ipl!

	if (extension@ IOPageFileExtension_Pages + @ MmCommitUsage@ + MmCommitLimit@ <=)
		// immediately succeed
		ipl@ KeIPLLower

		0 extension@ IOPageFileExtension_Success + !

		0 // priboost
		extension@ IOPageFileExtension_Event + // event
		KeEventSignal

		return
	end

	while (i@ IOPageFileCount@ <)
		auto pagefile
		[i@]IOPageFiles@ pagefile!

		pagefile@ IOPageFile_MaximumSize + @ pagefile@ IOPageFile_CurrentSize + @ - avail +=

		if (avail@ extension@ IOPageFileExtension_Pages + @ >=)
			break
		end

		1 i +=
	end

	auto requiredextension
	extension@ IOPageFileExtension_Pages + @ MmCommitUsage@ + MmCommitLimit@ - requiredextension!

	if (avail@ requiredextension@ <)
		// immediately fail
		ipl@ KeIPLLower

		STATUS_COMMIT_EXCEEDED extension@ IOPageFileExtension_Success + !

		0 // priboost
		extension@ IOPageFileExtension_Event + // event
		KeEventSignal

		return
	end

	ipl@ KeIPLLower

	requiredextension@ IOPageFileTryExtendAll extension@ IOPageFileExtension_Success + !

	0 // priboost
	extension@ IOPageFileExtension_Event + // event
	KeEventSignal
end

fn IOPageFileTryExtendAll { extension -- ok }
	fnsection "PAGE$text"

	if (IOPageFileExtensionIndex@ IOPageFileCount@ >=)
		0 IOPageFileExtensionIndex!
	end

	0 ok!

	auto i
	0 i!

	while (i@ 2 <)
		auto max
		auto j

		if (i@ 0 ==)
			IOPageFileCount@ max!
			IOPageFileExtensionIndex@ j!
		end else
			IOPageFileExtensionIndex@ max!
			0 j!
		end

		while (j@ max@ <)
			auto realextension
			extension@ // extension
			[j@]IOPageFiles@ // pagefile
			IOPageFileTryExtend realextension!

			if (realextension@ extension@ >)
				0 extension!
			end else
				realextension@ extension -=
			end

			if (extension@ ~~)
				break
			end

			1 j +=
		end

		if (extension@ ~~)
			j@ 1 + IOPageFileExtensionIndex!
			break
		end

		1 i +=
	end

	if (extension@)
		STATUS_COMMIT_EXCEEDED ok!
	end
end

const IOPAGEFILEMINIMUMEXTENSION 128

fn IOPageFileTryExtend { extension pagefile -- realextension }
	auto maxextend
	pagefile@ IOPageFile_MaximumSize + @ pagefile@ IOPageFile_CurrentSize + @ - maxextend!

	auto i
	0 i!

	auto tryextension
	extension@ tryextension!

	if (tryextension@ IOPAGEFILEMINIMUMEXTENSION <)
		IOPAGEFILEMINIMUMEXTENSION tryextension!
	end

	if (maxextend@ tryextension@ <)
		maxextend@ tryextension!
	end

	if (extension@ tryextension@ ==)
		1 i!
	end

	while (i@ 2 <)
		auto ok
		pagefile@ IOPageFile_CurrentSize + @ tryextension@ + PAGESHIFT << // newsize
		1 // growing
		0 // keeplocked
		0 // zero
		OSFILEFLAG_NOCACHE // flags
		pagefile@ IOPageFile_CapturedFCB + @ // fcb
		IOFileControlBlockTruncate ok! drop

		if (ok@ ~~)
			break
		end else
			if (ok@ STATUS_END_OF_DISK ~=)
				0 realextension!
				return
			end

			if (i@ 1 ==)
				0 realextension!
				return
			end

			extension@ tryextension!
		end

		1 i +=
	end

	tryextension@ realextension!

	// growing the pagefile succeeded. update the structures.

	auto ipl
	IPLDPC KeIPLRaise ipl!

	realextension@ // runlength
	pagefile@ IOPageFile_CurrentSize + @ // index
	pagefile@ IOPageFile_BitmapHeader + // header
	ComBitmapClearBits

	realextension@ pagefile@ IOPageFile_CurrentSize + +=
	realextension@ IOSwapPagesCount +=
	realextension@ MmCommitLimit +=

	0 pagefile@ IOPageFile_Hint + !

	pagefile@ IOPageFile_SIZEOF + MmMPWAssessTransfers

	ipl@ KeIPLLower
end

fn IOPageFileContract { -- }
	fnsection "PAGE$text"

	// called by the worker thread every 5 seconds to scan the pagefiles and
	// determine if any of them should be shrunk.

	if (MmEventLowMemory KeDispatchIsSignaled)
		// don't shrink pagefiles while pages are being dumped to disk
		return
	end

	auto potentialcontraction
	MmCommitLimit@ MmCommitUsage@ - potentialcontraction!

	if (potentialcontraction@ IOPAGEFILEMINIMUMEXTENSION 2 * <)
		// if commit usage is within 2 megabytes of the commit limit then it
		// probably isn't worth it to bother scanning the pagefiles.

		return
	end

	auto i
	0 i!

	0 potentialcontraction!

	while (i@ IOPageFileCount@ <)
		auto pagefile
		[i@]IOPageFiles@ pagefile!

		auto free
		pagefile@ IOPageFile_CurrentSize + @ pagefile@ IOPageFile_UsedCount + @ - free!

		auto excess
		pagefile@ IOPageFile_CurrentSize + @ pagefile@ IOPageFile_MinimumSize + @ - excess!

		if (excess@ IOPAGEFILEMINIMUMEXTENSION >=)
			if (free@ IOPAGEFILEMINIMUMEXTENSION >=)
				excess@ free@ min potentialcontraction +=
			end
		end

		1 i +=
	end

	if (potentialcontraction@ IOPAGEFILEMINIMUMEXTENSION 2 * <)
		return
	end

	potentialcontraction@ IOPageFileTryContractAll
end

fn IOPageFileTryContractAll { contraction -- }
	fnsection "PAGE$text"

	if (IOPageFileExtensionIndex@ IOPageFileCount@ >=)
		0 IOPageFileExtensionIndex!
	end

	auto i
	0 i!

	while (i@ 2 <)
		auto max
		auto j

		if (i@ 0 ==)
			IOPageFileCount@ max!
			IOPageFileExtensionIndex@ j!
		end else
			IOPageFileExtensionIndex@ max!
			0 j!
		end

		while (j@ max@ <)
			auto contractedby
			contraction@ // contraction
			[j@]IOPageFiles@ // pagefile
			IOPageFileTryContract contractedby!

			if (contractedby@ contraction@ >=)
				0 contraction!
				break
			end

			contractedby@ contraction -=

			1 j +=
		end

		if (contraction@ ~~)
			j@ 1 + IOPageFileExtensionIndex!
			break
		end

		1 i +=
	end
end

fn IOPageFileTryContract { contraction pagefile -- contractedby }
	0 contractedby!

	if (contraction@ IOPAGEFILEMINIMUMEXTENSION <)
		IOPAGEFILEMINIMUMEXTENSION contraction!
	end

	if (contraction@ pagefile@ IOPageFile_CurrentSize + @ pagefile@ IOPageFile_MinimumSize + @ - >)
		pagefile@ IOPageFile_CurrentSize + @ pagefile@ IOPageFile_MinimumSize + @ - contraction!
	end

	if (contraction@ IOPAGEFILEMINIMUMEXTENSION <)
		return
	end

	while (contraction@ IOPAGEFILEMINIMUMEXTENSION >=)
		auto ipl
		IPLDPC KeIPLRaise ipl!

		if (contraction@ MmCommitLimit@ >)
			ipl@ KeIPLLower

			break
		end

		if (MmCommitLimit@ contraction@ - MmCommitUsage@ IOPAGEFILEMINIMUMEXTENSION 2 * + <)
			ipl@ KeIPLLower

			break
		end

		auto clear
		contraction@ // runlength
		pagefile@ IOPageFile_CurrentSize + @ contraction@ - // index
		pagefile@ IOPageFile_BitmapHeader + // header
		ComBitmapCheckClearBits clear!

		if (clear@)
			// chop!

			contraction@ // runlength
			pagefile@ IOPageFile_CurrentSize + @ contraction@ - // index
			pagefile@ IOPageFile_BitmapHeader + // header
			ComBitmapSetBits

			contraction@ pagefile@ IOPageFile_CurrentSize + -=
			contraction@ IOSwapPagesCount -=
			contraction@ MmCommitLimit -=

			0 pagefile@ IOPageFile_Hint + !

			ipl@ KeIPLLower

			pagefile@ IOPageFile_CurrentSize + @ PAGESHIFT << // newsize
			0 // growing
			0 // keeplocked
			0 // zero
			OSFILEFLAG_NOCACHE // flags
			pagefile@ IOPageFile_CapturedFCB + @ // fcb
			IOFileControlBlockTruncate drop drop

			return
		end

		ipl@ KeIPLLower

		1 contraction >>=
	end
end