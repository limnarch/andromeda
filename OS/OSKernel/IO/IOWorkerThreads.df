#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/Security.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

fn IOFilesystemSyncWorker { context1 context2 -- }
	PRIORITY_LOWREALTIME // priority
	KeThreadCurrent@ // thread
	KeThreadPrioritySet

	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	auto ok

	while (1)
		// iterate all mounted filesystems every 25 seconds and ask them
		// to flush any internal buffers to disk.

		25000 // interval
		KERNELMODE // waitmode
		0 // alertable
		KeThreadSleep ok!

		if (DEBUGCHECKS)
			if (ok@ STATUS_WAIT_TIMEOUT ~=)
				ok@ "IOFilesystemSyncWorker: wait failed (%i)\n" KeCrash
			end
		end

		IOFilesystemSyncAll ok!

		if (ok@)
			ok@ "IOFilesystemSyncWorker: failed to sync (%i)\n" KeCrash
		end
	end
end

const IOMODIFIEDWRITEINTERVALSEC 10 // how frequently should we flush?
const IOMODIFIEDWRITEPAGEDELAY   6  // how many seconds must elapse before we
                                    // can write the same page again?

buffer IOModifiedPageEvent KeEvent_SIZEOF
public IOModifiedPageEvent

fn IOModifiedPageWorker { context1 context2 -- }
	PRIORITY_LOWREALTIME 1 + // priority
	KeThreadCurrent@ // thread
	KeThreadPrioritySet

	IPLLOW KeIPLLower // kernel threads start in IPLDPC

	auto objecttable
	8 alloc objecttable!

	auto flushtime
	KeTime_SIZEOF alloc flushtime!

	auto flushtimesec

	MmEventLowMemory objecttable@!
	IOModifiedPageEvent objecttable@ 4 + !

	KeThreadCurrent@ KeThreadIgnoreKill drop

	// the modified page writer

	while (1)
		// write out all modified pages every 10 seconds, whenever the system
		// is low on memory, and whenever the number of modified pages crosses
		// the maximum.

		// XXX we don't do this currently, but it's possible that it would be
		// best to go to sleep for every, say, 64-128 pages written out, in
		// order to avoid tying up the disk controller for too long.

		auto ok
		auto waitok

		KERNELMODE // waitmode
		0 // alertable
		THREADWAITANY // waittype
		IOMODIFIEDWRITEINTERVALSEC 1000 * // timeout
		2 // objectcount
		objecttable@ // objecttable
		KeThreadWaitForMultipleObjects waitok!

		if (DEBUGCHECKS)
			if (waitok@ 0 s<)
				if (waitok@ STATUS_WAIT_TIMEOUT ~=)
					waitok@ "IOModifiedPageWorker: failed to wait on low memory event (%i)\n" KeCrash
				end
			end
		end

		auto writescore
		0 writescore!

		auto delayscore
		0 delayscore!

		auto failed

		auto modcount
		IOCachePagesModifiedCount@ 2 max modcount! // used for heuristics

		while (1)
			if (writescore@ modcount@ 1 >> >=)
				// if we tried to unsuccessfully write modcount/2 times in a
				// row, odds are we're stuck in an infinite loop and we need
				// to let user threads run for a bit in order to successfully
				// write out any more pages. go to sleep for 50ms.

				0 writescore!

				50 // interval
				KERNELMODE // waitmode
				0 // alertable
				KeThreadSleep ok!

				if (DEBUGCHECKS)
					if (ok@ STATUS_WAIT_TIMEOUT ~=)
						ok@ "IOModifiedPageWorker: wait failed (%i)\n" KeCrash
					end
				end

				0 ok!
			end

			IOCachePagesModifiedCount@ 2 max modcount! // used for heuristics

			flushtime@ HALRTCQuery
			flushtime@ KeTime_SecPart + @ flushtimesec!

			auto none
			0 none!

			auto pfdbe
			IOCacheModifiedPageListHead@ pfdbe!

			if (pfdbe@)
				auto ipl
				IPLDPC KeIPLRaise ipl!

				IOCacheModifiedPageListHead@ pfdbe!

				if (pfdbe@)
					0 failed!

					if (flushtimesec@ pfdbe@ IOPageFrameEntryCache_LastFlushTime + @ - IOMODIFIEDWRITEPAGEDELAY <)
						if (MmEventLowMemory KeDispatchIsSignaled ~~)
							// don't flush the same page more than once every
							// IOMODIFIEDWRITEPAGEDELAY seconds if memory is
							// plentiful.

							// XXX we wouldn't need this odd heuristic if we
							// had a way to asynchronously write out modified
							// pages. this is needed here because this thread
							// will block when it writes a page and will allow
							// user threads to run, who could potentially
							// modify the same pages in rapid succession,
							// preventing us from emptying the list fully, and
							// sending us into an infinite loop of thrashing.
							
							// the behavior this heuristic introduces, while
							// "better", is likely incorrect considering how
							// much nicer this would all be if we had async
							// page IO for the modified page writer.

							1 failed!
							1 delayscore +=

							if (delayscore@ modcount@ 2 >> >=)
								// a quarter of the modified page count was
								// delayed, break out.

								ipl@ KeIPLLower

								break
							end
						end
					end

					if (failed@ ~~)
						auto cacheblock
						pfdbe@ IOPageFrameEntryCache_FCB + @ IOFileControlBlock_CacheInfoBlock + @ cacheblock!

						cacheblock@ // cacheblock
						IOCacheInfoBlockTryLockShared ok!

						if (ok@)
							// locked successfully

							ipl@ KeIPLLower

							flushtimesec@ pfdbe@ IOPageFrameEntryCache_LastFlushTime + !

							// write out page

							0 // dontunbias
							pfdbe@ // pfdbe
							IOCachePageWriteModified drop

							cacheblock@ // cacheblock
							IOCacheInfoBlockUnlock

							0 writescore!
							0 delayscore!
						end else
							1 failed!
						end
					end

					if (failed@)
						// write failed, move this page to the tail so that we
						// don't try it infinitely

						if (pfdbe@ IOCacheModifiedPageListTail@ ~=)
							pfdbe@ IOCachePageRemoveModified

							pfdbe@ IOCachePageInsertModified
						end

						ipl@ KeIPLLower

						1 writescore +=
					end
				end else
					ipl@ KeIPLLower

					1 none!
				end
			end else
				1 none!
			end

			if (none@)
				if (waitok@ 0 ==)
					// low memory event woke us. sleep for 100ms or until the
					// maximum threshold of modified pages is crossed, to make
					// sure we don't infinite loop here since there aren't any
					// more modified pages.

					KERNELMODE // waitmode
					0 // alertable
					100 // timeout
					IOModifiedPageEvent // object
					KeThreadWaitForObject ok!

					if (ok@ STATUS_WAIT_TIMEOUT ~=)
						if (DEBUGCHECKS)
							if (ok@ 0 ~=)
								"IOModifiedPageWorker: failed to wait\n" KeCrash
							end
						end

						continue
					end
				end

				break
			end
		end
	end
end