//
// Implements device objects.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"
#include "<inc>/HALMap.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

#include "IOInternal.h"

fn IOLockDeviceDatabase { alertable -- ok }
	fnsection "PAGE$text"

	alertable@ // alertable
	0 // nowait
	IOiDeviceDatabaseRwLock // rwlock
	ExRwLockAcquireExclusive ok!
end

fn IOLockDeviceDatabaseShared { alertable -- ok }
	fnsection "PAGE$text"

	alertable@ // alertable
	0 // nowait
	0 // canstarve
	IOiDeviceDatabaseRwLock // rwlock
	ExRwLockAcquireShared ok!
end

fn IOUnlockDeviceDatabase { -- }
	fnsection "PAGE$text"

	IOiDeviceDatabaseRwLock ExRwLockRelease
end

fn IODeviceLock { alertable device -- ok }
	fnsection "PAGE$text"

	alertable@ // alertable
	0 // nowait
	device@ IODevice_FileControlBlock + @ IOFileControlBlock_RwLock + // rwlock
	ExRwLockAcquireExclusive ok!
end

fn IODeviceLockShared { alertable device -- ok }
	fnsection "PAGE$text"

	1 // alertable
	0 // nowait
	0 // canstarve
	device@ IODevice_FileControlBlock + @ IOFileControlBlock_RwLock + // rwlock
	ExRwLockAcquireShared ok!
end

fn IODeviceUnlock { device -- }
	fnsection "PAGE$text"

	device@ IODevice_FileControlBlock + @ IOFileControlBlock_RwLock + ExRwLockRelease
end

fn IODeviceGetAttached { deviceobject -- attacheddeviceobject }
	fnsection "PAGE$text"

	// assumes device database is locked at least shared.

	deviceobject@ attacheddeviceobject!

	while (attacheddeviceobject@ IODevice_AttachedBy + @)
		attacheddeviceobject@ IODevice_AttachedBy + @ attacheddeviceobject!
	end
end

fn IODeviceReferenceAttached { locked failmounted deviceobject -- attacheddeviceobject ok }
	fnsection "PAGE$text"

	if (locked@ ~~)
		0 IOLockDeviceDatabaseShared drop
	end

	deviceobject@ attacheddeviceobject!

	while (attacheddeviceobject@ IODevice_AttachedBy + @)
		attacheddeviceobject@ IODevice_AttachedBy + @ attacheddeviceobject!
	end

	if (failmounted@)
		if (attacheddeviceobject@ IODevice_RelevantMount + @)
			STATUS_DEVICE_BUSY ok!

			if (locked@ ~~)
				IOUnlockDeviceDatabase
			end

			return
		end
	end

	attacheddeviceobject@ ObConditionallyReferenceObject ok!

	if (locked@ ~~)
		IOUnlockDeviceDatabase
	end

	if (ok@)
		STATUS_DEVICE_BUSY ok!

		return
	end
end

fn IODeviceAttachObject { deviceobject todeviceobject -- realdeviceobject ok }
	fnsection "PAGE$text"

	// references the realdeviceobject.
	// assumes the device database is locked exclusively.

	todeviceobject@ realdeviceobject!

	if (realdeviceobject@ IODevice_AttachedBy + @)
		realdeviceobject@ IODeviceGetAttached realdeviceobject!
	end

	if (realdeviceobject@ IODevice_RelevantMount + @)
		STATUS_DEVICE_BUSY ok!

		return
	end

	realdeviceobject@ ObConditionallyReferenceObject ok!

	if (ok@)
		STATUS_DEVICE_BUSY ok!

		return
	end

	deviceobject@ realdeviceobject@ IODevice_AttachedBy + !
	realdeviceobject@ IODevice_BlockLog + @ deviceobject@ IODevice_BlockLog + !

	// only set the stack depth on the device object if it would increase.
	// otherwise multiple attachments might result in there being insufficient
	// IOP stack space for some of the lower devices on the stack.

	if (realdeviceobject@ IODevice_StackDepth + @ 1 +
		deviceobject@ IODevice_StackDepth + @ >)
		realdeviceobject@ IODevice_StackDepth + @ 1 + deviceobject@ IODevice_StackDepth + !
	end

	// inherit permissions

	deviceobject@ // destobject
	realdeviceobject@ // srcobject
	ObObjectInheritPermissions
end

fn IODeviceDetachObject { todeviceobject -- }
	fnsection "PAGE$text"

	// assumes the device database is locked exclusively.
	// should be used only in device object deletion routines, since there are
	// interactions with the object manager's pointer count due to the usage
	// of ObConditionallyReferenceObject above.

	0 todeviceobject@ IODevice_AttachedBy + !
	todeviceobject@ ObObjectDereferenceByPointer drop
end

fn IODeviceDirectoryInsert { deviceobject -- ok }
	fnsection "PAGE$text"

	deviceobject@ // object
	IODevicesDirectoryObject@ // directory
	ObDirectoryInsertByPointers ok!
end

fn IODeviceCreateFileObject { flags deviceobject -- fileobject ok }
	fnsection "PAGE$text"

	deviceobject@ ObObjectReferenceByPointer drop

	auto fullpath
	OBNAMEMAX 4 + alloc fullpath!

	':' fullpath@ sb

	if (deviceobject@ ObObjectName)
		fullpath@ 1 + // dest
		deviceobject@ ObObjectName // src
		strcpy
	end

	fullpath@ // openedpath
	flags@ // flags
	deviceobject@ ObObjectPermissions // permissions
	deviceobject@ IODevice_FileControlBlock + @ // fcb
	IOFileCreateObject ok! fileobject!

	if (ok@)
		deviceobject@ ObObjectDereferenceByPointer drop
	end else
		auto uid
		auto gid
		deviceobject@ ObObjectUIDGID gid! uid!

		uid@ // uid
		gid@ // gid
		-1 // permissions
		fileobject@ // object
		ObObjectSetUIDGIDPermissions
	end
end

fn IOVolumeDeviceCreate { mountflags extensionsize sizeinbytes filesystem deviceobject -- mount fsdeviceobject ok }
	fnsection "PAGE$text"

	// assumes the device database and device object are locked exclusively, if
	// relevant.

	if (DEBUGCHECKS)
		if (deviceobject@)
			if (deviceobject@ IODevice_RelevantMount + @)
				"IOVolumeDeviceCreate: device already mounted\n" KeCrash
			end
		end
	end

	auto type

	if (deviceobject@)
		// the volume object will not be visible and will be used for caching
		// fs data.

		OSFILETYPE_BLOCKDEVICE type!
	end else
		// the volume object will be visible and will be a gateway to the
		// virtual filesystem.

		OSFILETYPE_DIRECTORY type!
		0 sizeinbytes!
	end

	IOMount_SIZEOF extensionsize@ + // extensionsize
	type@ // type
	0 // name
	sizeinbytes@ // sizeinbytes
	filesystem@ IOFilesystem_Driver + @ // driver
	0 // permissions
	0 // permanent
	IODeviceCreateEx ok! fsdeviceobject!

	if (ok@)
		return
	end

	fsdeviceobject@ IODevice_Extension + @ mount!
	mount@ IOMount_SIZEOF + mount@ IOMount_Extension + !

	if (sizeinbytes@)
		// initialize caching on the volume file.

		auto cacheblock
		fsdeviceobject@ IODevice_FileControlBlock + @ IOFileControlBlockCacheCheck ok! cacheblock!

		if (ok@)
			fsdeviceobject@ IODeviceDeallocateObject

			return
		end
	end

	0 mount@ IOMount_RootFCB + !
	mountflags@ mount@ IOMount_Flags + !
	0 mount@ IOMount_ReclaimedFrom + !
	0 mount@ IOMount_Next + !
	0 mount@ IOMount_Prev + !
	filesystem@ mount@ IOMount_Filesystem + !

	mount@ fsdeviceobject@ IODevice_RelevantMount + !
	fsdeviceobject@ mount@ IOMount_FsDeviceObject + !
	deviceobject@ mount@ IOMount_UnderlyingDeviceObject + !

	if (deviceobject@)
		mount@ deviceobject@ IODevice_RelevantMount + !

		deviceobject@ ObObjectReferenceByPointer drop

		// if there's no deviceobject, (i.e. a network redirector), the
		// filesystem driver will have to initialize these fields
		// appropriately.

		deviceobject@ IODevice_BlockLog + @ fsdeviceobject@ IODevice_BlockLog + !
		deviceobject@ IODevice_StackDepth + @ 1 + fsdeviceobject@ IODevice_StackDepth + !
	end
end

fn IOVolumeDeviceUninitialize { fsdeviceobject -- }
	fnsection "PAGE$text"

	auto mount
	fsdeviceobject@ IODevice_RelevantMount + @ mount!

	if (fsdeviceobject@ IODevice_FileControlBlock + @ IOFileControlBlock_CacheInfoBlock + @)
		1 // writeout
		fsdeviceobject@ IODevice_FileControlBlock + @ // fcb
		IOFileControlBlockDestroyCache
	end

	auto devobj
	mount@ IOMount_UnderlyingDeviceObject + @ devobj!

	if (devobj@)
		0 devobj@ IODevice_RelevantMount + !

		devobj@ ObObjectDereferenceByPointer drop
	end

	fsdeviceobject@ ObObjectDereferenceByPointer drop
end

fn IODeviceCreateEx { extensionsize type name sizeinbytes driver permissions permanent -- deviceobject ok }
	fnsection "PAGE$text"

	auto flags

	if (permanent@)
		OBFLAGS_PERMANENT flags!
	end else
		0 flags!
	end

	name@ // name
	flags@ // flags
	permissions@ // permissions
	0 // npquotabias
	0 // pquotabias
	IODevice_SIZEOF extensionsize@ + // bodysize
	IODeviceTypeObject@ // type
	ObObjectCreate ok! deviceobject!

	if (ok@)
		return
	end

	driver@ deviceobject@ IODevice_Driver + !
	deviceobject@ IODevice_SIZEOF + deviceobject@ IODevice_Extension + !
	0 deviceobject@ IODevice_BlockLog + !
	0 deviceobject@ IODevice_RelevantMount + !
	1 deviceobject@ IODevice_StackDepth + !
	0 deviceobject@ IODevice_Flags + !

	0 deviceobject@ IODevice_ConsoleHeader + !
	0 deviceobject@ IODevice_AttachedBy + !

	0 deviceobject@ IODevice_Label + !

	auto fcb
	deviceobject@ // devobj
	type@ // filetype
	0 // flags
	IOFileControlBlockCreate ok! fcb!

	if (ok@)
		deviceobject@ ObObjectDeallocate

		return
	end

	fcb@ deviceobject@ IODevice_FileControlBlock + !

	sizeinbytes@ fcb@ IOFileControlBlock_SizeInBytes + !
end

fn IODeviceCreate { extensionsize type name sizeinbytes driver permissions -- deviceobject ok }
	fnsection "PAGE$text"

	// makes the device object permanent and inserts it in the Devices object
	// directory. useful for physical device drivers.

	if (name@ ~~)
		"IODeviceCreate: no name\n" KeCrash
	end

	if (driver@ IODriver_VersionMajor + @ IOVERSION_MAJOR ~=)
		name@ "Failed to create device '%s'.\n" "IODeviceCreate" HALLog

		-1 ok!

		return
	end

	if (driver@ IODriver_VersionMinor + @ IOVERSION_MINOR ~=)
		name@ "Device '%s' has mismatched driver interface.\n" "IODeviceCreate" HALLog
	end

	extensionsize@ // extensionsize
	type@ // type
	name@ // name
	sizeinbytes@ // sizeinbytes
	driver@ // driver
	permissions@ // permissions
	1 // permanent
	IODeviceCreateEx ok! deviceobject!

	if (ok@)
		return
	end

	deviceobject@ IODeviceDirectoryInsert ok!

	if (ok@)
		"IODeviceCreate: failed to insert in Devices directory\n" KeCrash
	end
end

fn IODeviceDeallocateObject { object -- }
	fnsection "PAGE$text"

	auto fcb
	object@ IODevice_FileControlBlock + @ fcb!

	-1 // writeout
	fcb@ // fcb
	IOFileControlBlockDelete drop

	object@ ObObjectDeallocate
end

fn IODeviceSetLabel { label deviceobject -- ok }
	fnsection "PAGE$text"

	auto len
	label@ strlen len!

	auto buf

	len@ 1 + // bytes
	'DeLa' // tag
	PAGED // flags
	MmAllocWithTag ok! buf!

	if (ok@)
		return
	end

	buf@ // dest
	label@ // src
	len@ 1 + // sz
	memcpy

	if (deviceobject@ IODevice_Label + @)
		deviceobject@ IODevice_Label + @ MmFree
	end

	buf@ deviceobject@ IODevice_Label + !
end

fn IODeviceGetLabel { deviceobject -- label }
	fnsection "PAGE$text"

	deviceobject@ IODevice_Label + @ label!
end

fn (ObTypeDeleteFunction) IOiDeviceDeleteObject { object -- }
	fnsection "PAGE$text"

	if (object@ IODevice_Label + @)
		object@ IODevice_Label + @ MmFree
	end

	auto fcb
	object@ IODevice_FileControlBlock + @ fcb!

	auto deletefunc
	object@ IODevice_Driver + @ IODriver_DispatchTable + @ IODispatchTable_DeleteDeviceObject + @ deletefunc!

	if (deletefunc@)
		object@ // object
		deletefunc@ IODispatchDeleteDeviceObjectFunction
	end

	-1 // writeout
	fcb@ // fcb
	IOFileControlBlockDelete drop
end

fn (IODispatchDeleteObjectFunction) IODeviceDeleteFileObject { object -- ok }
	fnsection "PAGE$text"

	// generic function for deleting a file object for device drivers

	0 ok!

	object@ IOFile_FileControlBlock + @ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_DeviceObject + @
	ObObjectDereferenceByPointer drop
end