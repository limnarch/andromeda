//
// Implements open file objects.
//
// A new file object is created each time a file is opened, but each file
// object points to a file control block (FCB) structure that is unique to
// that file.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

#include "IOInternal.h"

fn IOFileCreateObject { openedpath flags permissions fcb -- fileobject ok }
	fnsection "PAGE$text"

	// just shorthand for creating a file object, doesn't open it.
	// also does NOT ref the FCB -- caller must do that.

	auto namelen
	0 namelen!

	if (openedpath@)
		openedpath@ strlen 1 + namelen!
	end

	0 // name
	0 // flags
	permissions@ // permissions
	IOFileControlBlock_SIZEOF MmChargeBytesGet IOAVERAGEFCBCONTEXTNP + // npquotabias
	IOFileControlBlockPaged_SIZEOF MmChargeBytesGet IOAVERAGEFCBCONTEXTPAGED + // pquotabias
	IOFile_SIZEOF namelen@ + // bodysize
	IOFileTypeObject@ // type
	ObObjectCreate ok! fileobject!

	if (ok@)
		return
	end

	fcb@   fileobject@ IOFile_FileControlBlock + !
	0      fileobject@ IOFile_Offset + !
	flags@ fileobject@ IOFile_Flags + !
	0      fileobject@ IOFile_Context + !

	auto path
	0 path!

	if (openedpath@)
		fileobject@ IOFile_SIZEOF + path!

		path@ // dest
		openedpath@ // src
		namelen@ // sz
		memcpy
	end
	
	path@ fileobject@ IOFile_OpenedPath + !
end

// these next 4 are object manager routines -- these are not called directly.
// man I hope I remember to update this comment if there are ever more than 4

fn (ObTypeOpenFunction) IOFileOpenObject { access object process -- ok }
	fnsection "PAGE$text"

	0 ok!

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	auto dispatchtable
	fcb@ IOFileControlBlock_DispatchTable + @ dispatchtable!

	auto openfunc
	dispatchtable@ IODispatchTable_Open + @ openfunc!

	if (openfunc@)
		access@ // access
		object@ // fileobject
		openfunc@ IODispatchOpenFunction ok!
	end
end

fn (ObTypeCloseFunction) IOFileCloseObject { lasthandlecount access object process -- }
	fnsection "PAGE$text"

	auto ok
	0 ok!

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	auto dispatchtable
	fcb@ IOFileControlBlock_DispatchTable + @ dispatchtable!

	auto closefunc
	dispatchtable@ IODispatchTable_Close + @ closefunc!

	if (closefunc@)
		lasthandlecount@ // lasthandlecount
		access@ // access
		object@ // object
		closefunc@ IODispatchCloseFunction ok!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "IOFileClose: failed to close (%i)\n" KeCrash
			end
		end
	end
end

fn (ObTypeDeleteFunction) IOFileDeleteObject { object -- }
	fnsection "PAGE$text"

	auto ok
	0 ok!

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	auto dispatchtable
	fcb@ IOFileControlBlock_DispatchTable + @ dispatchtable!

	auto deletefunc
	dispatchtable@ IODispatchTable_DeleteObject + @ deletefunc!

	if (deletefunc@)
		object@ // object
		deletefunc@ IODispatchDeleteObjectFunction ok!

		if (DEBUGCHECKS)
			if (ok@)
				ok@ "IOFileDelete: failed to delete (%i)\n" KeCrash
			end
		end
	end
end

fn (ObTypeSetSecurityFunction) IOFileSetSecurityObject { uid gid permissions object -- ok }
	fnsection "PAGE$text"

	0 ok!

	auto fcb
	object@ IOFile_FileControlBlock + @ fcb!

	auto dispatchtable
	fcb@ IOFileControlBlock_DispatchTable + @ dispatchtable!

	auto setsecurityfunc
	dispatchtable@ IODispatchTable_SetSecurity + @ setsecurityfunc!

	if (setsecurityfunc@)
		fcb@ IOFileControlBlockLock ok!

		if (ok@)
			return
		end

		uid@ // uid
		gid@ // gid
		permissions@ // permissions
		object@ // object
		setsecurityfunc@ IODispatchSetSecurityFunction ok!

		fcb@ IOFileControlBlockUnlock

		if (ok@)
			return
		end
	end

	auto fcbtype
	fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_FileType + @ fcbtype!

	if (fcbtype@ OSFILETYPE_CHARDEVICE ==
		fcbtype@ OSFILETYPE_BLOCKDEVICE == ||)

		uid@ // uid
		gid@ // gid
		permissions@ // permissions
		fcb@ IOFileControlBlock_Paged + @ IOFileControlBlockPaged_DeviceObject + @ // object
		ObSetSecurityObject ok!
	end
end

fn IOFileInformationQueryObject { fileobject query -- ok }
	fnsection "PAGE$text"

	0 ok!

	query@ // ptr
	OSFileInformation_SIZEOF // size
	0 // word
	memset

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	auto fcbp
	fcb@ IOFileControlBlock_Paged + @ fcbp!

	fcb@ IOFileControlBlock_SizeInBytes + @ query@ OSFileInformation_Size + !
	fcbp@ IOFileControlBlockPaged_FileType + @ query@ OSFileInformation_Type + !

	fcbp@ IOFileControlBlockPaged_AccessTime + KeTime_SecPart + @
	query@ OSFileInformation_ATimeSecPart + !

	fcbp@ IOFileControlBlockPaged_AccessTime + KeTime_MsPart + @
	query@ OSFileInformation_ATimeMsPart + !

	fcbp@ IOFileControlBlockPaged_ModifyTime + KeTime_SecPart + @
	query@ OSFileInformation_MTimeSecPart + !

	fcbp@ IOFileControlBlockPaged_ModifyTime + KeTime_MsPart + @
	query@ OSFileInformation_MTimeMsPart + !

	fcbp@ IOFileControlBlockPaged_ChangeTime + KeTime_SecPart + @
	query@ OSFileInformation_CTimeSecPart + !

	fcbp@ IOFileControlBlockPaged_ChangeTime + KeTime_MsPart + @
	query@ OSFileInformation_CTimeMsPart + !

	fcbp@ IOFileControlBlockPaged_CreationTime + KeTime_SecPart + @
	query@ OSFileInformation_CreationTimeSecPart + !

	fcbp@ IOFileControlBlockPaged_CreationTime + KeTime_MsPart + @
	query@ OSFileInformation_CreationTimeMsPart + !
end

fn IOFileInformationQuery { filehandle query -- ok }
	fnsection "PAGE$text"

	auto fileobject

	IOFileTypeObject@ // type
	filehandle@ // handle
	ObObjectReferenceByHandle ok! fileobject! drop

	if (ok@)
		return
	end

	fileobject@ // fileobject
	query@ // query
	IOFileInformationQueryObject ok!

	fileobject@ ObObjectDereferenceByPointer drop
end