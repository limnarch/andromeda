//
// Implements the system calls for the MINTIA IO subsystem.
//

#include "<df>/dragonfruit.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALRTC.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALDebug.h"
#include "<inc>/HALDriver.h"

#include "<inc>/Kernel.h"

#include "<inc>/Executive.h"

#include "<inc>/Security.h"

#include "<inc>/Memory.h"

#include "<inc>/Object.h"

#include "<inc>/Process.h"

#include "<inc>/IO.h"

#include "<ll>/OSDLL/OS.h"

fn OSFileQuery { filehandle query -- ok }
	fnsection "PAGE$text"

	auto kquery
	OSFileInformation_SIZEOF alloc kquery!

	filehandle@ // filehandle
	kquery@ // query
	IOFileInformationQuery ok!

	if (ok@)
		return
	end

	query@ // dest
	kquery@ // src
	OSFileInformation_SIZEOF // size
	KeSafeCopyOut ok!
end

fn OSFileTruncate { newsize growing handle -- oldsize ok }
	fnsection "PAGE$text"

	newsize@ growing@ handle@ IOFileTruncate ok! oldsize!
end

fn OSFileSeek { offset handle mode -- newoffset ok }
	fnsection "PAGE$text"

	offset@ handle@ mode@ IOFileSeek ok! newoffset!
end

fn OSFileRead { timeout flags length buffer filehandle -- bytesread ok }
	fnsection "PAGE$text"

	timeout@ flags@ length@ buffer@ filehandle@ IOFileRead ok! bytesread!
end

fn OSFileWrite { flags length buffer filehandle -- byteswritten ok }
	fnsection "PAGE$text"

	flags@ length@ buffer@ filehandle@ IOFileWrite ok! byteswritten!
end

fn OSFileFlush { purge filehandle -- ok }
	fnsection "PAGE$text"

	purge@ filehandle@ IOFileFlush ok!
end

fn OSDirectoryRead { dirent filehandle -- ok }
	fnsection "PAGE$text"

	auto kdirent
	OSDirectoryEntry_SIZEOF alloc kdirent!

	kdirent@ // ptr
	OSDirectoryEntry_SIZEOF // size
	0 // word
	memset

	kdirent@ // dirent
	filehandle@ // filehandle
	IODirectoryRead ok!

	if (ok@)
		return
	end

	dirent@ // dest
	kdirent@ // src
	OSDirectoryEntry_SIZEOF // size
	KeSafeCopyOut ok!
end

fn OSSwapFileCreate { minpages maxpages pri path -- ok }
	fnsection "PAGE$text"

	auto kname
	OSFILEPATHMAX // max
	path@ // string
	ExCallGetString ok! kname!

	if (ok@)
		return
	end

	minpages@ // minpages
	maxpages@ // maxpages
	pri@ // pri
	kname@ // path
	IOSwapFileCreate ok!

	kname@ ExCallFreeString
end

fn OSSwapFileQuery { query id -- ok }
	fnsection "PAGE$text"

	auto kquery
	OSSwapFileInformation_SIZEOF alloc kquery!

	kquery@ // ptr
	OSSwapFileInformation_SIZEOF // size
	0 // word
	memset

	kquery@ id@ IOSwapFileQuery ok!

	if (ok@)
		return
	end

	query@ // dest
	kquery@ // src
	OSSwapFileInformation_SIZEOF // size
	KeSafeCopyOut ok!
end

fn OSIOControl { arg2 arg1 filehandle -- ret ok }
	fnsection "PAGE$text"

	auto fileobject
	auto access

	IOFileTypeObject@ // type
	filehandle@ // handle
	ObObjectReferenceByHandle ok! fileobject! access!

	if (ok@)
		return
	end

	if (access@ ACCESS_READ ACCESS_WRITE | & ~~)
		fileobject@ ObObjectDereferenceByPointer drop

		STATUS_PERMISSION_DENIED ok!

		return
	end

	auto fcb
	fileobject@ IOFile_FileControlBlock + @ fcb!

	auto ioctlfunc
	fcb@ IOFileControlBlock_DispatchTable + @ IODispatchTable_IOControl + @ ioctlfunc!

	if (ioctlfunc@ ~~)
		fileobject@ ObObjectDereferenceByPointer drop

		STATUS_NOT_SUPPORTED ok!

		return
	end

	arg2@ // arg2
	arg1@ // arg1
	access@ // access
	fcb@ // fcb
	USERMODE // lastmode
	ioctlfunc@ IODispatchIOControlFunction ok! ret!

	fileobject@ ObObjectDereferenceByPointer drop
end

externptr IOBootDevicePath

fn OSGetBootDevicePath { buffer -- ok }
	fnsection "PAGE$text"

	// should this require any special permissions?

	buffer@ // dest
	IOBootDevicePath // src
	OSFILEPATHMAX 1 - // max
	KeSafeStringCopyOut ok!
end

fn OSMountUpdateFlags { newflags handle -- ok }
	fnsection "PAGE$text"

	newflags@ handle@ IOMountUpdateFlags ok!
end

fn OSMountGetFilesystemName { buffer handle -- ok }
	fnsection "PAGE$text"

	auto kbuffer
	OBNAMEMAX alloc kbuffer!

	kbuffer@ // buffer
	handle@ // handle
	IOMountGetFilesystemName ok!

	if (ok@)
		return
	end

	buffer@ // dest
	kbuffer@ // src
	OBNAMEMAX 1 - // max
	KeSafeStringCopyOut ok!
end

fn OSFilesystemMount { flags handle fsname -- ok }
	fnsection "PAGE$text"

	auto kfsname
	0 kfsname!

	if (fsname@)
		OBNAMEMAX // max
		fsname@ // string
		ExCallGetString ok! kfsname!

		if (ok@)
			return
		end
	end

	flags@ // flags
	handle@ // handle
	kfsname@ // fsname
	IOFilesystemMount ok! drop

	if (kfsname@)
		kfsname@ ExCallFreeString
	end
end

fn OSFilesystemUnmount { handle -- ok }
	fnsection "PAGE$text"

	handle@ IOFilesystemUnmount ok!
end

fn OSMountCountQuery { -- count ok }
	fnsection "PAGE$text"

	0 ok!
	IOMountCount@ count!
end

fn OSMountQueryAll { buffer maxquery -- count ok }
	fnsection "PAGE$text"

	IOMountCount@ maxquery@ min maxquery!

	maxquery@ OSMountInformation_SIZEOF * MmQuotaChargeBuffer ok!

	if (ok@)
		return
	end

	auto kbuffer
	maxquery@ OSMountInformation_SIZEOF * // bytes
	'MoQu' // tag
	CANBLOCK // flags
	MmAllocWithTag ok! kbuffer!

	if (ok@)
		maxquery@ OSMountInformation_SIZEOF * MmQuotaUnchargeBuffer
		return
	end

	kbuffer@ // buffer
	maxquery@ // maxquery
	IOMountQueryAll ok! count!

	if (ok@)
		kbuffer@ MmFree
		maxquery@ OSMountInformation_SIZEOF * MmQuotaUnchargeBuffer
		return
	end

	buffer@ // dest
	kbuffer@ // src
	maxquery@ OSMountInformation_SIZEOF * // size
	KeSafeCopyOut ok!

	kbuffer@ MmFree
	maxquery@ OSMountInformation_SIZEOF * MmQuotaUnchargeBuffer
end

fn OSDirectoryUnlink { name filehandle -- ok }
	fnsection "PAGE$text"

	auto kname
	OSFILEPATHMAX // max
	name@ // string
	ExCallGetString ok! kname!

	if (ok@)
		return
	end

	kname@ // name
	filehandle@ // filehandle
	IODirectoryUnlink ok!

	kname@ ExCallFreeString
end

fn OSDirectoryRename { srcname srcfilehandle destname destfilehandle -- ok }
	fnsection "PAGE$text"

	auto ksrcname
	OSFILEPATHMAX // max
	srcname@ // string
	ExCallGetString ok! ksrcname!

	if (ok@)
		return
	end

	auto kdestname
	OSFILEPATHMAX // max
	destname@ // string
	ExCallGetString ok! kdestname!

	if (ok@)
		ksrcname@ ExCallFreeString

		return
	end

	ksrcname@ // srcname
	srcfilehandle@ // srcfilehandle
	kdestname@ // destname
	destfilehandle@ // destfilehandle
	IODirectoryRename ok!

	ksrcname@ ExCallFreeString
	kdestname@ ExCallFreeString
end