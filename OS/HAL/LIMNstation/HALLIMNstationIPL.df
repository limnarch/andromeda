//
// Implements the platform-dependent part of interrupt support;
// specifically, driving the LIMNstation Interrupt Controller (LSIC).
//

#include "<ll>/rta3x/a3x.h"
#include "<df>/dragonfruit.h"
#include "../../OSLoader/OSLoaderGlobal.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALLIMNstationCitron.h"

#include "<inc>/HALIPL.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALCrash.h"

#include "<ll>/OSDLL/OS.h"

var KeIPLCurrent IPLHIGH
public KeIPLCurrent

table HALLIMNstationIPLMasks
	//   32-63      00-31
	0x00000000 0x00000000 // 00: IPLLOW
	0x00000000 0x00000000 // 01: IPLAPC
	0x00000000 0x00000000 // 02: IPLDPC
	0x00000000 0x00000000 // 03:

	0xFFFF0000 0x00000000 // 04: IPLINTERACTIVE (mask out amanatsu)
	0xFFFFFFFF 0xFFFF0000 // 05: IPLBOARDS (mask out ebus)
	0xFFFFFFFF 0xFFFFFFF0 // 06: IPLSERIAL (mask out serial ports)
	0xFFFFFFFF 0xFFFFFFF8 // 07: IPLDISK (mask out satsuma)
	0xFFFFFFFF 0xFFFFFFFE // 08: IPLDMA (mask out dma (all except clock))

	0xFFFFFFFF 0xFFFFFFFE // 09:
	0xFFFFFFFF 0xFFFFFFFE // 10:
	0xFFFFFFFF 0xFFFFFFFE // 11:
	0xFFFFFFFF 0xFFFFFFFE // 12:
	0xFFFFFFFF 0xFFFFFFFE // 13:
	0xFFFFFFFF 0xFFFFFFFE // 14:
	0xFFFFFFFF 0xFFFFFFFE // 15:
	0xFFFFFFFF 0xFFFFFFFE // 16:
	0xFFFFFFFF 0xFFFFFFFE // 17:
	0xFFFFFFFF 0xFFFFFFFE // 18:
	0xFFFFFFFF 0xFFFFFFFE // 19:
	0xFFFFFFFF 0xFFFFFFFE // 20:
	0xFFFFFFFF 0xFFFFFFFE // 21:
	0xFFFFFFFF 0xFFFFFFFE // 22:
	0xFFFFFFFF 0xFFFFFFFE // 23:
	0xFFFFFFFF 0xFFFFFFFE // 24:
	0xFFFFFFFF 0xFFFFFFFE // 25:
	0xFFFFFFFF 0xFFFFFFFE // 26:
	0xFFFFFFFF 0xFFFFFFFE // 27:
	0xFFFFFFFF 0xFFFFFFFE // 28:

	0xFFFFFFFF 0xFFFFFFFF // 29: IPLCLOCK
	0xFFFFFFFF 0xFFFFFFFF // 30:
	0xFFFFFFFF 0xFFFFFFFF // 31: IPLHIGH
endtable

var HALLIMNstationLSICBase 0

struct LSIC
	4 Mask00_31
	4 Mask32_63
	4 Interrupting00_31
	4 Interrupting32_63
	4 ClaimComplete
endstruct

var HALLIMNstationLSICClaimComplete 0
public HALLIMNstationLSICClaimComplete

table HALPlatformInterruptHandlers[(64 2 *)]
public HALPlatformInterruptHandlers

fn HALLIMNstationLSICInit { ldrinfo -- }
	ldrinfo@ LdrInfo_LSICBase + @ HALLIMNstationLSICBase!

	HALLIMNstationLSICBase@ LSIC_ClaimComplete + HALLIMNstationLSICClaimComplete!

	0 HALLIMNstationLSICBase@ LSIC_Interrupting00_31 + !
	0 HALLIMNstationLSICBase@ LSIC_Interrupting32_63 + !

	IPLHIGH HALPlatformIPLSet

	auto i
	0 i!

	while (i@ 64 <)
		pointerof HALLIMNstationInterruptSpurious [i@ 2 *]HALPlatformInterruptHandlers!

		1 i +=
	end
end

fn HALPlatformInterruptRegister { handler int ipl -- }
	if ([int@ 2 *]HALPlatformInterruptHandlers@ pointerof HALLIMNstationInterruptSpurious ~=)
		int@ "HALPlatformInterruptRegister: attempt to register IRQ #%d twice\n" HALCrash
	end

	handler@ [int@ 2 *]HALPlatformInterruptHandlers!
	ipl@ [int@ 2 * 1 +]HALPlatformInterruptHandlers!
end

fn HALPlatformInterruptUnregister { int -- }
	auto spf
	pointerof HALLIMNstationInterruptSpurious spf!

	if ([int@ 2 *]HALPlatformInterruptHandlers@ spf@ ==)
		int@ "HALPlatformInterruptUnregister: attempt to unregister IRQ #%d; wasn't registered\n" HALCrash
	end

	spf@ [int@ 2 *]HALPlatformInterruptHandlers!
end

fn (HALInterruptHandler) HALLIMNstationInterruptSpurious { int -- }
	int@ "spurious interrupt: %d\n" HALCrash
end

var HALInterruptNested 0
public HALInterruptNested

externptr HALInterruptStackTop

asm "

HALPlatformInterruptAcknowledge:
.global HALPlatformInterruptAcknowledge
	la   t0, HALLIMNstationLSICClaimComplete
	mov  t0, long [t0]
	mov  long [t0], a0
	ret

HALPlatformIPLSet:
.global HALPlatformIPLSet
	la   t0, HALLIMNstationLSICBase
	mov  t0, long [t0]

	lshi t3, a0, 3
	la   t1, HALLIMNstationIPLMasks
	add  t3, t3, t1

	mov  t2, long [t3]
	mov  long [t0 + LSIC_Mask32_63], t2

	mov  t2, long [t3 + 4]
	mov  long [t0 + LSIC_Mask00_31], t2

	ret

HALInterrupt:
.global HALInterrupt
	subi sp, sp, 40
	mov  long [sp], lr
	mov  long [sp + 4], s0
	mov  long [sp + 8], s1
	mov  long [sp + 12], s2
	mov  long [sp + 16], s3
	mov  long [sp + 20], s4
	mov  long [sp + 24], s5
;	mov  long [sp + 28], s6
	mov  long [sp + 32], s7
	mov  long [sp + 36], s8

	la   t0, HALLIMNstationLSICBase
	mov  s0, long [t0]

	addi s8, s0, LSIC_ClaimComplete

	la   s7, HALInterruptStackTop
	mov  s7, long [s7]

	la   s5, HALInterruptNested

	la   s4, HALLIMNstationIPLMasks

	la   s1, HALPlatformInterruptHandlers

	la   s3, KeIPLCurrent
	mov  s2, long [s3]

.loop:
	mov  a0, long [s8]
	beq  a0, .done

	lshi t1, a0, 3
	add  t1, t1, s1

	mov  t2, long [t1]     ;get handler
	mov  t3, long [t1 + 4] ;get IPL

	mov  long [s3], t3

;inlined set LSIC mask

	lshi t3, t3, 3
	add  t3, t3, s4

	mov  t4, long [t3]
	mov  long [s0 + LSIC_Mask32_63], t4

	mov  t4, long [t3 + 4]
	mov  long [s0 + LSIC_Mask00_31], t4

;is this a nested interrupt?

	mov  t3, long [s5]
	bne  t3, .nested

;no it is not.

	mov  long [s5], 1

;call handler in context of interrupt stack

	mov  t0, sp
	mov  sp, s7

	subi sp, sp, 8
	mov  long [sp + 4], t0
	mov  long [sp], zero

	mfcr t0, rs
	ori  t0, t0, LIMN2600_RS_INT
	mtcr rs, t0

	jalr lr, t2, 0

	mfcr t0, rs
	subi t1, zero, 3
	and  t1, t0, t1
	mtcr rs, t1

	mov  sp, long [sp + 4]

	mov  long [s5], 0

	b .loop

.nested:

;inlined enable interrupts

	mfcr t0, rs
	ori  t0, t0, LIMN2600_RS_INT
	mtcr rs, t0

;call handler

	jalr lr, t2, 0

;inlined disable interrupts

	mfcr t0, rs
	subi t1, zero, 3
	and  t1, t0, t1
	mtcr rs, t1

	b    .loop

.done:
	mov  long [s3], s2

;inlined restore LSIC mask

	lshi t3, s2, 3
	add  t3, t3, s4

	mov  t4, long [t3]
	mov  long [s0 + LSIC_Mask32_63], t4

	mov  t4, long [t3 + 4]
	mov  long [s0 + LSIC_Mask00_31], t4

	mov  lr, long [sp]
	mov  s0, long [sp + 4]
	mov  s1, long [sp + 8]
	mov  s2, long [sp + 12]
	mov  s3, long [sp + 16]
	mov  s4, long [sp + 20]
	mov  s5, long [sp + 24]
;	mov  s6, long [sp + 28]
	mov  s7, long [sp + 32]
	mov  s8, long [sp + 36]
	addi sp, sp, 40
	ret

"