//
// Implements access routines for the amtsu peripheral bus.
//

#include "<ll>/rta3x/a3x.h"
#include "<df>/dragonfruit.h"
#include "../../OSLoader/OSLoaderGlobal.h"

#include "<inc>/HALLog.h"
#include "<inc>/HALLIMNstationCitron.h"
#include "<inc>/HALLIMNstationAmtsu.h"

#include "<inc>/HALIPL.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALCrash.h"

const AMTSUPORTDEV 0x30
const AMTSUPORTMID 0x31
const AMTSUPORTCMD 0x32
const AMTSUPORTA   0x33
const AMTSUPORTB   0x34

const AMTSUDEVICES 16

// disabling and restoring interrupts is up to the user of these functions

fn HALLIMNstationAmtsuCheckMID { num -- mid }
	num@ HALLIMNstationAmtsuSelect HALLIMNstationAmtsuReadMID mid!
end

fn HALLIMNstationAmtsuSelect { num -- }
	num@ AMTSUPORTDEV HALLIMNstationCitronOutb
end

fn HALLIMNstationAmtsuReadMID { -- mid }
	AMTSUPORTMID HALLIMNstationCitronInl mid!
end

fn HALLIMNstationAmtsuCommand { cmd -- }
	cmd@ AMTSUPORTCMD HALLIMNstationCitronOutl

	while (AMTSUPORTCMD HALLIMNstationCitronInl 0 ~=) end
end

fn HALLIMNstationAmtsuCommandAsync { cmd -- }
	cmd@ AMTSUPORTCMD HALLIMNstationCitronOutl
end

fn HALLIMNstationAmtsuWriteA { long -- }
	long@ AMTSUPORTA HALLIMNstationCitronOutl
end

fn HALLIMNstationAmtsuWriteB { long -- }
	long@ AMTSUPORTB HALLIMNstationCitronOutl
end

fn HALLIMNstationAmtsuReadA { -- long }
	AMTSUPORTA HALLIMNstationCitronInl long!
end

fn HALLIMNstationAmtsuReadB { -- long }
	AMTSUPORTB HALLIMNstationCitronInl long!
end

fn HALLIMNstationAmtsuSetInterrupt { dev -- }
	0 dev@ 1 HALLIMNstationAmtsuSpecialCMD
end

fn HALLIMNstationAmtsuClearInterrupt { dev -- }
	0 dev@ 3 HALLIMNstationAmtsuSpecialCMD
end

fn HALLIMNstationAmtsuSpecialCMD { a b cmd -- }
	0 HALLIMNstationAmtsuSelect
	a@ HALLIMNstationAmtsuWriteA
	b@ HALLIMNstationAmtsuWriteB

	cmd@ HALLIMNstationAmtsuCommand
end

fn HALLIMNstationAmtsuReset { -- }
	0 0 2 HALLIMNstationAmtsuSpecialCMD
end

fn HALLIMNstationAmtsuInit { ldrinfo -- }
	fnsection "INIT$text"

	HALLIMNstationAmtsuReset
end

fn HALLIMNstationAmtsuEnumerate { func mid -- count }
	auto id
	1 id!

	0 count!

	while (id@ AMTSUDEVICES <)
		if (id@ HALLIMNstationAmtsuCheckMID mid@ ==)
			1 count +=

			id@ // id
			func@ HALLIMNstationAmtsuCallbackF
		end

		1 id +=
	end
end

fn HALLIMNstationAmtsuIDToIrq { id -- irq }
	id@ 48 + irq!
end

fn HALLIMNstationAmtsuIrqToID { irq -- id }
	irq@ 48 - id!
end