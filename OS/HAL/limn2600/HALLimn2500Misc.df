#include "<df>/dragonfruit.h"
#include "<inc>/HALLimn2kContext.h"
#include "<inc>/HALCrash.h"

#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALInterrupt.h"

#include "<inc>/HALDebug.h"

// was once HALLimn2500Exception.df until that stuff was moved into the kernel

asm "

; -- sp
HALCPUGetSP:
.global HALCPUGetSP
	mov  a0, sp
	ret

; -- rs
HALCPUInterruptDisable:
.global HALCPUInterruptDisable
	mfcr a0, rs
	andi t0, a0, RS_INTOFFMASK
	mtcr rs, t0
	ret

; rs --
HALCPUInterruptRestore:
.global HALCPUInterruptRestore
	mtcr rs, a0
	ret

; --
HALCPUInterruptEnable:
.global HALCPUInterruptEnable
	mfcr t0, rs
	ori  t0, t0, RS_INT
	mtcr rs, t0
	ret

; old new -- 
HALCPUContextSwitch:
.global HALCPUContextSwitch
	subi sp, sp, Limn2500Context_SIZEOF

	mov  long [sp + Limn2500Context_lr],  lr
	mov  long [sp + Limn2500Context_s0],  s0
	mov  long [sp + Limn2500Context_s1],  s1
	mov  long [sp + Limn2500Context_s2],  s2
	mov  long [sp + Limn2500Context_s3],  s3
	mov  long [sp + Limn2500Context_s4],  s4
	mov  long [sp + Limn2500Context_s5],  s5
	mov  long [sp + Limn2500Context_s6],  s6
	mov  long [sp + Limn2500Context_s7],  s7
	mov  long [sp + Limn2500Context_s8],  s8
	mov  long [sp + Limn2500Context_s9],  s9
	mov  long [sp + Limn2500Context_s10], s10
	mov  long [sp + Limn2500Context_s11], s11
	mov  long [sp + Limn2500Context_s12], s12
	mov  long [sp + Limn2500Context_s13], s13
	mov  long [sp + Limn2500Context_s14], s14
	mov  long [sp + Limn2500Context_s15], s15
	mov  long [sp + Limn2500Context_s16], s16
	mov  long [sp + Limn2500Context_s17], s17
	mov  long [sp + Limn2500Context_s18], s18

	mov  long [a1], sp
	mov  sp, a0

	mov  s0,  long [sp + Limn2500Context_s0]
	mov  s1,  long [sp + Limn2500Context_s1]
	mov  s2,  long [sp + Limn2500Context_s2]
	mov  s3,  long [sp + Limn2500Context_s3]
	mov  s4,  long [sp + Limn2500Context_s4]
	mov  s5,  long [sp + Limn2500Context_s5]
	mov  s6,  long [sp + Limn2500Context_s6]
	mov  s7,  long [sp + Limn2500Context_s7]
	mov  s8,  long [sp + Limn2500Context_s8]
	mov  s9,  long [sp + Limn2500Context_s9]
	mov  s10, long [sp + Limn2500Context_s10]
	mov  s11, long [sp + Limn2500Context_s11]
	mov  s12, long [sp + Limn2500Context_s12]
	mov  s13, long [sp + Limn2500Context_s13]
	mov  s14, long [sp + Limn2500Context_s14]
	mov  s15, long [sp + Limn2500Context_s15]
	mov  s16, long [sp + Limn2500Context_s16]
	mov  s17, long [sp + Limn2500Context_s17]
	mov  s18, long [sp + Limn2500Context_s18]
	mov  lr,  long [sp + Limn2500Context_lr]

	addi sp, sp, Limn2500Context_SIZEOF

	ret

; int handler stack --
HALCPURunInContext:
.global HALCPURunInContext
	mov  t0, sp
	mov  sp, a0

	subi sp, sp, 12
	mov  long [sp + 8], lr
	mov  long [sp + 4], t0
	mov  long [sp], zero

	mfcr t0, rs
	ori  t0, t0, RS_INT
	mtcr rs, t0

	mov  a0, a2

	jalr lr, a1, 0

	mfcr t0, rs
	andi t0, t0, RS_INTOFFMASK
	mtcr rs, t0

	mov  lr, long [sp + 8]
	mov  sp, long [sp + 4]

	ret

; handler stack arg1 arg0 -- ret0 ret1
HALCPURunInContextNoInterrupts:
.global HALCPURunInContextNoInterrupts
	mov  t0, sp
	mov  sp, a2

	subi sp, sp, 12
	mov  long [sp + 8], lr
	mov  long [sp + 4], t0
	mov  long [sp], zero

	jalr lr, a3, 0

	mov  lr, long [sp + 8]
	mov  sp, long [sp + 4]

	ret

; MUST BE CALLED WITH INTERRUPTS DISABLED
; asid pgtb -- oldasid oldpgtb
HALCPUMapSwitch:
.global HALCPUMapSwitch
	mfcr t0, asid
	mfcr t1, pgtb

	mtcr asid, a1
	mtcr pgtb, a0

	mov  a0, t0
	mov  a1, t1

	ret

;a3 - exit function
;a2 - context
;a1 - ustack
;a0 - usermode entry function
HALCPUEnterUserMode:
.global HALCPUEnterUserMode
	;disable interrupts
	mfcr t0, rs
	andi t0, t0, RS_INTOFFMASK
	mtcr rs, t0

	mov  sp, a1

	;drop to usermode
	li   t0, RS_UTHREAD
	mtcr ers, t0
	mtcr epc, a0
	mov  a0, a2
	mov  lr, a3
	rfe

HALLimn2500TLBFlush:
.global HALLimn2500TLBFlush
	ftlb a0, a1
	ret

"

extern HALLimn2500TLBFlush { vpn asid -- }

fn HALLimn2500TLBFlushASID { asid -- }
	-1 asid@ HALLimn2500TLBFlush
end

fn HALLimn2500TLBFlushAll { -- }
	-1 -1 HALLimn2500TLBFlush
end

extern LoadInitialContext { -- }

table HALLimn2500UsedASIDs[257]

fn HALCPUASIDRegister { asid -- }
	if (asid@ 0 ==)
		// kernel process, dont care

		return
	end

	asid@ 255 & 1 + asid!

	auto rs
	HALCPUInterruptDisable rs!

	1 [asid@]HALLimn2500UsedASIDs +=

	rs@ HALCPUInterruptRestore
end

fn HALCPUASIDUnregister { asid -- }
	if (asid@ 0 ==)
		"HALCPUASIDUnregister: asid==0\n" HALCrash
	end

	asid@ 255 & 1 + asid!

	auto rs
	HALCPUInterruptDisable rs!

	1 [asid@]HALLimn2500UsedASIDs -=

	asid@ HALLimn2500TLBFlushASID

	rs@ HALCPUInterruptRestore
end

fn HALCPUAddressSpaceSwitch { asid pdir -- }
	if (asid@)
		asid@ 255 & 1 + asid!
	end

	auto rs
	HALCPUInterruptDisable rs!

	if (asid@)
		if ([asid@]HALLimn2500UsedASIDs@ 1 >)
			asid@ HALLimn2500TLBFlushASID
		end
	end

	asid@ pdir@ HALCPUMapSwitch drop drop

	rs@ HALCPUInterruptRestore
end