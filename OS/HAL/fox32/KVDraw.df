//
// Implements basic kernel video support.
// Used primarily by CoVideoConsole.
//

#include "<df>/dragonfruit.h"
#include "../../OSLoader/OSLoaderGlobal.h"

#include "<inc>/HALConsole.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALResource.h"
#include "<inc>/HALCrash.h"

table HALfox32IndexPalette
	0x000000
	0x220022
	0x000044
	0x220066
	0x000088
	0x2200aa
	0x0000cc
	0x2200ee
	0x440000
	0x660022
	0x440044
	0x660066
	0x440088
	0x6600aa
	0x4400cc
	0x6600ee
	0x880000
	0xaa0022
	0x880044
	0xaa0066
	0x880088
	0xaa00aa
	0x8800cc
	0xaa00ee
	0xcc0000
	0xee0022
	0xcc0044
	0xee0066
	0xcc0088
	0xee00aa
	0xcc00cc
	0xee00ee
	0x002200
	0x222222
	0x002244
	0x222266
	0x002288
	0x2222aa
	0x0022cc
	0x2222ee
	0x442200
	0x662222
	0x442244
	0x662266
	0x442288
	0x6622aa
	0x4422cc
	0x6622ee
	0x882200
	0xaa2222
	0x882244
	0xaa2266
	0x882288
	0xaa22aa
	0x8822cc
	0xaa22ee
	0xcc2200
	0xee2222
	0xcc2244
	0xee2266
	0xcc2288
	0xee22aa
	0xcc22cc
	0xee22ee
	0x004400
	0x224422
	0x004444
	0x224466
	0x004488
	0x2244aa
	0x0044cc
	0x2244ee
	0x444400
	0x664422
	0x444444
	0x664466
	0x444488
	0x6644aa
	0x4444cc
	0x6644ee
	0x884400
	0xaa4422
	0x884444
	0xaa4466
	0x884488
	0xaa44aa
	0x8844cc
	0xaa44ee
	0xcc4400
	0xee4422
	0xcc4444
	0xee4466
	0xcc4488
	0xee44aa
	0xcc44cc
	0xee44ee
	0x006600
	0x226622
	0x006644
	0x226666
	0x006688
	0x2266aa
	0x0066cc
	0x2266ee
	0x446600
	0x666622
	0x446644
	0x666666
	0x446688
	0x6666aa
	0x4466cc
	0x6666ee
	0x886600
	0xaa6622
	0x886644
	0xaa6666
	0x886688
	0xaa66aa
	0x8866cc
	0xaa66ee
	0xcc6600
	0xee6622
	0xcc6644
	0xee6666
	0xcc6688
	0xee66aa
	0xcc66cc
	0xee66ee
	0x008800
	0x228822
	0x008844
	0x228866
	0x008888
	0x2288aa
	0x0088cc
	0x2288ee
	0x448800
	0x668822
	0x448844
	0x668866
	0x448888
	0x6688aa
	0x4488cc
	0x6688ee
	0x888800
	0xaa8822
	0x888844
	0xaa8866
	0x888888
	0xaa88aa
	0x8888cc
	0xaa88ee
	0xcc8800
	0xee8822
	0xcc8844
	0xee8866
	0xcc8888
	0xee88aa
	0xcc88cc
	0xee88ee
	0x00aa00
	0x22aa22
	0x00aa44
	0x22aa66
	0x00aa88
	0x22aaaa
	0x00aacc
	0x22aaee
	0x44aa00
	0x66aa22
	0x44aa44
	0x66aa66
	0x44aa88
	0x66aaaa
	0x44aacc
	0x66aaee
	0x88aa00
	0xaaaa22
	0x88aa44
	0xaaaa66
	0x88aa88
	0xaaaaaa
	0x88aacc
	0xaaaaee
	0xccaa00
	0xeeaa22
	0xccaa44
	0xeeaa66
	0xccaa88
	0xeeaaaa
	0xccaacc
	0xeeaaee
	0x00cc00
	0x22cc22
	0x00cc44
	0x22cc66
	0x00cc88
	0x22ccaa
	0x00cccc
	0x22ccee
	0x44cc00
	0x66cc22
	0x44cc44
	0x66cc66
	0x44cc88
	0x66ccaa
	0x44cccc
	0x66ccee
	0x88cc00
	0xaacc22
	0x88cc44
	0xaacc66
	0x88cc88
	0xaaccaa
	0x88cccc
	0xaaccee
	0xcccc00
	0xeecc22
	0xcccc44
	0xeecc66
	0xcccc88
	0xeeccaa
	0xcccccc
	0xeeccee
	0x00ee00
	0x22ee22
	0x00ee44
	0x22ee66
	0x00ee88
	0x22eeaa
	0x00eecc
	0x22eeee
	0x44ee00
	0x66ee22
	0x44ee44
	0x66ee66
	0x44ee88
	0x66eeaa
	0x44eecc
	0x66eeee
	0x88ee00
	0xaaee22
	0x88ee44
	0xaaee66
	0x88ee88
	0xaaeeaa
	0x88eecc
	0xaaeeee
	0xccee00
	0xeeee22
	0xccee44
	0xeeee66
	0xccee88
	0xeeeeaa
	0xcceecc
	0xffffff
endtable
public HALfox32IndexPalette

externptr HALLoaderInfo

var FBAddr 0
var FBSize 0
var FBModulo 0

fn KVInit { -- }
	fnsection "INIT$text"

	if (HALLoaderInfo@ LdrInfo_HALConsoleFBFormat + @ OSBOOTFBFORMAT_RGBA32 ~=)
		0 FBAddr!
		return
	end

	if (HALConsoleWidthPix@ ~~)
		0 FBAddr!
		return
	end

	HALLoaderInfo@ LdrInfo_HALConsoleFBAddr + @ FBAddr!
	HALConsoleWidthPix@ HALConsoleHeightPix@ * FBSize!
	HALConsoleWidthPix@ HALConsoleFontWidth@ - FBModulo!
end

fn KVQuery { -- w h ok }
	if (FBAddr@ ~~)
		-1 ok!
		return
	end

	0 ok!

	HALConsoleWidthPix@ w!
	HALConsoleHeightPix@ h!
end

fn KVFontGet { name -- font ok }
	auto rsrc
	name@ HALResourceByName rsrc!

	if (rsrc@ ~~)
		-1 ok!
		return
	end

	rsrc@ LdrBootResource_Data + @ font!

	if (font@ HCFHeader_Magic + @ HCFMAGIC ~=)
		-1 ok!
		return
	end

	0 ok!

	rsrc@ HALResourceWire
end

fn KVFontQuery { font -- width height }
	font@ HCFHeader_Width + @ width!
	font@ HCFHeader_Height + @ height!
end

fn KVI8ToNative { i8 -- nativecolor }
	[i8@]HALfox32IndexPalette@ nativecolor!
end

fn KVClearScreen { nativecolor -- }
	0xFF000000 nativecolor |=

	FBAddr@ FBSize@ nativecolor@ memset
end

fn KVDrawFilledRectangle { nativecolor x y w h -- }
	0xFF000000 nativecolor |=

	auto row
	0 row!

	auto gw
	HALConsoleWidthPix@ gw!

	auto fb
	FBAddr@ fb!

	auto ptr
	y@ gw@ * 4 * x@ 4 * + fb@ + ptr!

	auto mod
	gw@ 4 * mod!

	auto rowsz
	w@ 4 * rowsz!

	while (row@ h@ <)
		ptr@ rowsz@ nativecolor@ memset

		1 row +=
		mod@ ptr +=
	end
end

fn KVDrawEmptyRectangle { nativecolor x y w h -- }
	0xFF000000 nativecolor |=

	auto gw
	HALConsoleWidthPix@ gw!

	auto mod
	gw@ 4 * mod!

	auto kptr
	y@ gw@ * 4 * x@ 4 * + FBAddr@ + kptr!

	auto rowsz
	w@ 4 * rowsz!

	// top edge
	kptr@ rowsz@ nativecolor@ memset

	if (h@ 1 >)
		auto bptr
		h@ 1 - gw@ * 4 * kptr@ + bptr!

		// bottom edge
		bptr@ rowsz@ nativecolor@ memset
	end

	auto ptr
	kptr@ ptr!

	auto hk
	h@ hk!

	// left edge
	while (hk@)
		nativecolor@ ptr@ !

		mod@ ptr +=
		1 hk -=
	end

	if (w@ 1 >)
		kptr@ w@ 1 - 4 * + ptr!

		h@ hk!

		// right edge
		while (hk@)
			nativecolor@ ptr@ !

			mod@ ptr +=
			1 hk -=
		end
	end
end

fn KVDrawCharacter { char nativefg nativebg x y font -- }
	auto gw
	HALConsoleWidthPix@ gw!

	auto w
	font@ HCFHeader_Width + @ w!

	auto h
	font@ HCFHeader_Height + @ h!

	auto dest
	y@ gw@ * 4 * x@ 4 * + FBAddr@ + dest!

	auto mod
	gw@ w@ - 4 * mod!

	auto bmp
	w@ 7 + 3 >> h@ * char@ * font@ HCFHeader_SIZEOF + + bmp!

	auto bitd
	font@ HCFHeader_Flags + @ HCFFLAG_REVERSE & ~~ bitd!

	if (nativefg@ -1 ==)
		if (nativebg@ -1 ==)
			return
		end

		0xFF000000 nativebg |=
		0xFF000000 nativefg |=

		if (bitd@)
			nativebg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastBackwardsBG
		end else
			nativebg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastBG
		end
	end elseif (nativebg@ -1 ==)
		0xFF000000 nativefg |=

		if (bitd@)
			nativefg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastBackwardsFG
		end else
			nativefg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastFG
		end
	end else
		0xFF000000 nativebg |=

		if (bitd@)
			nativefg@ nativebg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastBackwardsFGBG
		end else
			nativefg@ nativebg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastFGBG
		end
	end
end

// mountains of redundant functions for various bit blit ops

fn KVBlitBitsFastFG { fg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@)
				if (byte@ 128 &)
					fg@ dest@ 28 + !
				end

				if (byte@ 64 &)
					fg@ dest@ 24 + !
				end

				if (byte@ 32 &)
					fg@ dest@ 20 + !
				end

				if (byte@ 16 &)
					fg@ dest@ 16 + !
				end

				if (byte@ 8 &)
					fg@ dest@ 12 + !
				end

				if (byte@ 4 &)
					fg@ dest@ 8 + !
				end

				if (byte@ 2 &)
					fg@ dest@ 4 + !
				end

				if (byte@ 1 &)
					fg@ dest@ !
				end
			end

			32 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=
			1 j!

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ !
				end

				4 dest +=
				1 j <<=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn KVBlitBitsFastBG { bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ !
				bg@ dest@ 4 + !
				bg@ dest@ 8 + !
				bg@ dest@ 12 + !
				bg@ dest@ 16 + !
				bg@ dest@ 20 + !
				bg@ dest@ 24 + !
				bg@ dest@ 28 + !
			end else
				if (byte@ 128 & ~~)
					bg@ dest@ 28 + !
				end

				if (byte@ 64 & ~~)
					bg@ dest@ 24 + !
				end

				if (byte@ 32 & ~~)
					bg@ dest@ 20 + !
				end

				if (byte@ 16 & ~~)
					bg@ dest@ 16 + !
				end

				if (byte@ 8 & ~~)
					bg@ dest@ 12 + !
				end

				if (byte@ 4 & ~~)
					bg@ dest@ 8 + !
				end

				if (byte@ 2 & ~~)
					bg@ dest@ 4 + !
				end

				if (byte@ 1 & ~~)
					bg@ dest@ !
				end
			end

			32 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=
			1 j!

			while (left@)
				if (byte@ j@ & ~~)
					bg@ dest@ !
				end

				4 dest +=
				1 j <<=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn KVBlitBitsFastFGBG { fg bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ !
				bg@ dest@ 4 + !
				bg@ dest@ 8 + !
				bg@ dest@ 12 + !
				bg@ dest@ 16 + !
				bg@ dest@ 20 + !
				bg@ dest@ 24 + !
				bg@ dest@ 28 + !
			end else
				if (byte@ 128 &)
					fg@ dest@ 28 + !
				end else
					bg@ dest@ 28 + !
				end

				if (byte@ 64 &)
					fg@ dest@ 24 + !
				end else
					bg@ dest@ 24 + !
				end

				if (byte@ 32 &)
					fg@ dest@ 20 + !
				end else
					bg@ dest@ 20 + !
				end

				if (byte@ 16 &)
					fg@ dest@ 16 + !
				end else
					bg@ dest@ 16 + !
				end

				if (byte@ 8 &)
					fg@ dest@ 12 + !
				end else
					bg@ dest@ 12 + !
				end

				if (byte@ 4 &)
					fg@ dest@ 8 + !
				end else
					bg@ dest@ 8 + !
				end

				if (byte@ 2 &)
					fg@ dest@ 4 + !
				end else
					bg@ dest@ 4 + !
				end

				if (byte@ 1 &)
					fg@ dest@ !
				end else
					bg@ dest@ !
				end
			end

			32 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=
			1 j!

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ !
				end else
					bg@ dest@ !
				end

				4 dest +=
				1 j <<=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

// reversed ones

fn KVBlitBitsFastBackwardsFG { fg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@)
				if (byte@ 128 &)
					fg@ dest@ !
				end

				if (byte@ 64 &)
					fg@ dest@ 4 + !
				end

				if (byte@ 32 &)
					fg@ dest@ 8 + !
				end

				if (byte@ 16 &)
					fg@ dest@ 12 + !
				end

				if (byte@ 8 &)
					fg@ dest@ 16 + !
				end

				if (byte@ 4 &)
					fg@ dest@ 20 + !
				end

				if (byte@ 2 &)
					fg@ dest@ 24 + !
				end

				if (byte@ 1 &)
					fg@ dest@ 28 + !
				end
			end

			32 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=

			if (w@ 3 >>)
				128 j!
			end else
				1 left@ << j!
			end

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ !
				end

				4 dest +=
				1 j >>=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn KVBlitBitsFastBackwardsBG { bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ !
				bg@ dest@ 4 + !
				bg@ dest@ 8 + !
				bg@ dest@ 12 + !
				bg@ dest@ 16 + !
				bg@ dest@ 20 + !
				bg@ dest@ 24 + !
				bg@ dest@ 28 + !
			end else
				if (byte@ 128 & ~~)
					bg@ dest@ !
				end

				if (byte@ 64 & ~~)
					bg@ dest@ 4 + !
				end

				if (byte@ 32 & ~~)
					bg@ dest@ 8 + !
				end

				if (byte@ 16 & ~~)
					bg@ dest@ 12 + !
				end

				if (byte@ 8 & ~~)
					bg@ dest@ 16 + !
				end

				if (byte@ 4 & ~~)
					bg@ dest@ 20 + !
				end

				if (byte@ 2 & ~~)
					bg@ dest@ 24 + !
				end

				if (byte@ 1 & ~~)
					bg@ dest@ 28 + !
				end
			end

			32 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=

			if (w@ 3 >>)
				128 j!
			end else
				1 left@ << j!
			end

			while (left@)
				if (byte@ j@ & ~~)
					bg@ dest@ !
				end

				4 dest +=
				1 j >>=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn KVBlitBitsFastBackwardsFGBG { fg bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ !
				bg@ dest@ 4 + !
				bg@ dest@ 8 + !
				bg@ dest@ 12 + !
				bg@ dest@ 16 + !
				bg@ dest@ 20 + !
				bg@ dest@ 24 + !
				bg@ dest@ 28 + !
			end else
				if (byte@ 128 &)
					fg@ dest@ !
				end else
					bg@ dest@ !
				end

				if (byte@ 64 &)
					fg@ dest@ 4 + !
				end else
					bg@ dest@ 4 + !
				end

				if (byte@ 32 &)
					fg@ dest@ 8 + !
				end else
					bg@ dest@ 8 + !
				end

				if (byte@ 16 &)
					fg@ dest@ 12 + !
				end else
					bg@ dest@ 12 + !
				end

				if (byte@ 8 &)
					fg@ dest@ 16 + !
				end else
					bg@ dest@ 16 + !
				end

				if (byte@ 4 &)
					fg@ dest@ 20 + !
				end else
					bg@ dest@ 20 + !
				end

				if (byte@ 2 &)
					fg@ dest@ 24 + !
				end else
					bg@ dest@ 24 + !
				end

				if (byte@ 1 &)
					fg@ dest@ 28 + !
				end else
					bg@ dest@ 28 + !
				end
			end

			32 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=

			if (w@ 3 >>)
				128 j!
			end else
				1 left@ << j!
			end

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ !
				end else
					bg@ dest@ !
				end

				4 dest +=
				1 j >>=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end