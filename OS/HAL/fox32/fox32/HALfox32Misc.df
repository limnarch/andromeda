#include "<df>/dragonfruit.h"
#include "<inc>/HALCrash.h"

#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALInterrupt.h"

#include "<inc>/HALDebug.h"

#include "<ll>/OSDLL/OS.h"

// was once HALLimn2500Exception.df until that stuff was moved into the kernel

asm "

; -- sp
HALCPUGetSP:
.global HALCPUGetSP
	mov  a0, sp
	ret

; -- rs
HALCPUInterruptDisable:
.global HALCPUInterruptDisable
	ret

; rs --
HALCPUInterruptRestore:
.global HALCPUInterruptRestore
	ret

; --
HALCPUInterruptEnable:
.global HALCPUInterruptEnable
	ret

; old new -- 
HALCPUContextSwitch:
.global HALCPUContextSwitch
	ret

; int handler stack --
HALCPURunInContext:
.global HALCPURunInContext
	ret

; handler stack arg1 arg0 -- ret0 ret1
HALCPURunInContextNoInterrupts:
.global HALCPURunInContextNoInterrupts
	ret

; MUST BE CALLED WITH INTERRUPTS DISABLED
; asid pgtb --
HALCPUMapSwitch:
.global HALCPUMapSwitch
	ret

;sp+4 - teb
;a3 - exit function
;a2 - context
;a1 - ustack
;a0 - usermode entry function
HALCPUEnterUserMode:
.global HALCPUEnterUserMode
	ret

HALfox32TLBFlushAll:
.global HALfox32TLBFlushAll
	ret

HALfox32TLBFlush:
.global HALfox32TLBFlush
	ret

HALDcacheExpunge:
.global HALDcacheExpunge
	ret

HALIcacheSynchronize:
.global HALIcacheSynchronize
	ret

HALCPUFence:
.global HALCPUFence
	ret

"

extern HALfox32TLBFlushAll { -- }

extern LoadInitialContext { -- }

fn HALCPUASIDRegister { asid -- }
	return
end

fn HALCPUASIDUnregister { asid -- }
	return
end

fn HALCPUAddressSpaceSwitch { asid pdir -- }
	auto rs
	HALCPUInterruptDisable rs!

	asid@ pdir@ HALCPUMapSwitch

	rs@ HALCPUInterruptRestore
end