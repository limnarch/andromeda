//
// Initialization of the fox32 HAL.
//

#include "<df>/dragonfruit.h"
#include "../../OSLoader/OSLoaderGlobal.h"

#include "<inc>/HALDriver.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALCrash.h"
#include "<inc>/HALLog.h"
#include "<inc>/HALfox32IO.h"
#include "<inc>/HALIPL.h"

#include "<ll>/OSDLL/OS.h"

extern HALMain { ldrinfo -- ret }

extern HALfox32InterruptInit { -- }

externptr HALLoaderInfo

var KeThreadCurrentStackTop 0
public KeThreadCurrentStackTop

var InfoTotalRAM 0

var HALPlatformKernelPageDirectory 0
public HALPlatformKernelPageDirectory

buffer HALPlatformModel 32
public HALPlatformModel

buffer HALCPUModel 32
public HALCPUModel

buffer HALBusModel 32
public HALBusModel

fn HALPlatformInfo { -- }
	// we're supposed to print platform info in this function

	InfoTotalRAM@ 1048576 /
	"Fox32 (%dMB)" Printf
end

fn HALPlatformInit { ldrinfo -- ret }
	fnsection "INIT$text"

	0 ret!

	HALPlatformModel
	"Fox32"
	strcpy

	HALCPUModel
	"fox32"
	strcpy

	HALBusModel
	"foxbus"
	strcpy

	ldrinfo@ LdrInfo_TotalRAM + @ InfoTotalRAM!

	"Platform: " "HALMain" HALLog
	HALPlatformInfo

	HALfox32InterruptInit
end

fn HALPlatformCrash { -- }
	// HALPlatformMapKernelSwitch drop drop
end

asm "

; value port --
HALfox32Out:
.global HALfox32Out
	out a0, a1
	ret

; port -- value
HALfox32In:
.global HALfox32In
	in a0, a0
	ret

"

const FOX32POWERPORT 0x80010000

extern HALfox32Reset { -- }

fn HALPlatformExit { ret mode -- }
	// MUST BE CALLED WITH INTERRUPTS DISABLED

	if (mode@ OSSHUTDOWN_HALT ==)
		0 FOX32POWERPORT HALfox32Out
		while (1) end
	end elseif (mode@ OSSHUTDOWN_REBOOT ==)
		HALfox32Reset
	end else
		"?" Printf

		HALfox32Reset
	end
end