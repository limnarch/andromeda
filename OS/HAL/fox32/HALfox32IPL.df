//
// Implements the platform-dependent part of interrupt support
//

#include "<ll>/rta3x/a3x.h"
#include "<df>/dragonfruit.h"
#include "../../OSLoader/OSLoaderGlobal.h"

#include "<inc>/HALLog.h"

#include "<inc>/HALMap.h"
#include "<inc>/HALIPL.h"
#include "<inc>/HALInterrupt.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALCrash.h"

#include "<ll>/OSDLL/OS.h"

var KeIPLCurrent IPLHIGH
public KeIPLCurrent

table HALPlatformInterruptHandlers[256]
public HALPlatformInterruptHandlers

fn HALfox32InterruptInit { -- }
	auto i
	0 i!

	while (i@ 256 <)
		pointerof HALfox32InterruptSpurious [i@]HALPlatformInterruptHandlers!

		1 i +=
	end
end

fn HALPlatformInterruptRegister { handler int ipl -- }
	if ([int@]HALPlatformInterruptHandlers@ pointerof HALfox32InterruptSpurious ~=)
		int@ "HALPlatformInterruptRegister: attempt to register IRQ #%d twice\n" HALCrash
	end

	handler@ [int@]HALPlatformInterruptHandlers!
end

fn HALPlatformInterruptUnregister { int -- }
	auto spf
	pointerof HALfox32InterruptSpurious spf!

	if ([int@]HALPlatformInterruptHandlers@ spf@ ==)
		int@ "HALPlatformInterruptUnregister: attempt to unregister IRQ #%d; wasn't registered\n" HALCrash
	end

	spf@ [int@]HALPlatformInterruptHandlers!
end

fn (HALInterruptHandler) HALfox32InterruptSpurious { trapframe int -- }
	int@ "spurious interrupt: 0x%x\n" HALCrash
end

fn HALPlatformIPLSet { ipl -- }
	// nothing
end