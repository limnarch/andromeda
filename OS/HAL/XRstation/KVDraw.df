//
// Implements basic kernel video support.
// Used primarily by CoVideoConsole.
//

#include "<ll>/rta3x/a3x.h"
#include "<df>/dragonfruit.h"
#include "../../OSLoader/OSLoaderGlobal.h"

#include "<inc>/HALConsole.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALResource.h"
#include "<inc>/HALCrash.h"

externptr HALLoaderInfo

var FBAddr 0
var FBSize 0
var FBModulo 0

fn KVInit { -- }
	fnsection "INIT$text"

	if (HALLoaderInfo@ LdrInfo_HALConsoleFBFormat + @ OSBOOTFBFORMAT_LGFX_I8 ~=)
		0 FBAddr!
		return
	end

	if (HALConsoleWidthPix@ ~~)
		0 FBAddr!
		return
	end

	HALLoaderInfo@ LdrInfo_HALConsoleFBAddr + @ FBAddr!
	HALConsoleWidthPix@ HALConsoleHeightPix@ * FBSize!
	HALConsoleWidthPix@ HALConsoleFontWidth@ - FBModulo!
end

fn KVQuery { -- w h ok }
	if (FBAddr@ ~~)
		-1 ok!
		return
	end

	0 ok!

	HALConsoleWidthPix@ w!
	HALConsoleHeightPix@ h!
end

fn KVFontGet { name -- font ok }
	auto rsrc
	name@ HALResourceByName rsrc!

	if (rsrc@ ~~)
		-1 ok!
		return
	end

	rsrc@ LdrBootResource_Data + @ font!

	if (font@ HCFHeader_Magic + @ HCFMAGIC ~=)
		-1 ok!
		return
	end

	0 ok!

	rsrc@ HALResourceWire
end

fn KVFontQuery { font -- width height }
	font@ HCFHeader_Width + @ width!
	font@ HCFHeader_Height + @ height!
end

fn KVI8ToNative { i8 -- nativecolor }
	i8@ 0xFF & nativecolor!
end

fn KVClearScreen { nativecolor -- }
	auto c32
	nativecolor@ nativecolor@ 8 << | nativecolor@ 16 << | nativecolor@ 24 << | c32!

	FBAddr@ FBSize@ c32@ memset
end

fn KVDrawFilledRectangle { nativecolor x y w h -- }
	auto row
	0 row!

	auto v
	nativecolor@ nativecolor@ 8 << | nativecolor@ 16 << | nativecolor@ 24 << | v!

	auto gw
	HALConsoleWidthPix@ gw!

	auto fb
	FBAddr@ fb!

	auto ptr
	y@ gw@ * x@ + fb@ + ptr!

	auto mod
	gw@ mod!

	auto rowsz
	w@ rowsz!

	while (row@ h@ <)
		ptr@ rowsz@ v@ memset

		1 row +=
		mod@ ptr +=
	end
end

fn KVDrawEmptyRectangle { nativecolor x y w h -- }
	auto gw
	HALConsoleWidthPix@ gw!

	auto mod
	gw@ mod!

	auto v
	nativecolor@ nativecolor@ 8 << | nativecolor@ 16 << | nativecolor@ 24 << | v!

	auto kptr
	y@ gw@ * x@ + FBAddr@ + kptr!

	auto rowsz
	w@ rowsz!

	// top edge
	kptr@ rowsz@ v@ memset

	if (h@ 1 >)
		auto bptr
		h@ 1 - gw@ * kptr@ + bptr!

		// bottom edge
		bptr@ rowsz@ v@ memset
	end

	auto ptr
	kptr@ ptr!

	auto hk
	h@ hk!

	// left edge
	while (hk@)
		nativecolor@ ptr@ sb

		mod@ ptr +=
		1 hk -=
	end

	if (w@ 1 >)
		kptr@ w@ 1 - + ptr!

		h@ hk!

		// right edge
		while (hk@)
			nativecolor@ ptr@ sb

			mod@ ptr +=
			1 hk -=
		end
	end
end

fn KVDrawCharacter { char nativefg nativebg x y font -- }
	auto gw
	HALConsoleWidthPix@ gw!

	auto w
	font@ HCFHeader_Width + @ w!

	auto h
	font@ HCFHeader_Height + @ h!

	auto dest
	y@ gw@ * x@ + FBAddr@ + dest!

	auto mod
	gw@ w@ - mod!

	auto bmp
	w@ 7 + 3 >> h@ * char@ * font@ HCFHeader_SIZEOF + + bmp!

	auto bitd
	font@ HCFHeader_Flags + @ HCFFLAG_REVERSE & ~~ bitd!

	if (nativefg@ -1 ==)
		if (nativebg@ -1 ==)
			return
		end

		if (bitd@)
			nativebg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastBackwardsBG
		end else
			nativebg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastBG
		end
	end elseif (nativebg@ -1 ==)
		if (bitd@)
			nativefg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastBackwardsFG
		end else
			nativefg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastFG
		end
	end else
		if (bitd@)
			nativefg@ nativebg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastBackwardsFGBG
		end else
			nativefg@ nativebg@ bmp@ dest@ mod@ w@ h@ KVBlitBitsFastFGBG
		end
	end
end

// mountains of redundant functions for various bit blit ops

fn KVBlitBitsFastFG { fg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@)
				if (byte@ 128 &)
					fg@ dest@ 7 + sb
				end

				if (byte@ 64 &)
					fg@ dest@ 6 + sb
				end

				if (byte@ 32 &)
					fg@ dest@ 5 + sb
				end

				if (byte@ 16 &)
					fg@ dest@ 4 + sb
				end

				if (byte@ 8 &)
					fg@ dest@ 3 + sb
				end

				if (byte@ 4 &)
					fg@ dest@ 2 + sb
				end

				if (byte@ 2 &)
					fg@ dest@ 1 + sb
				end

				if (byte@ 1 &)
					fg@ dest@ sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=
			1 j!

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ sb
				end

				1 dest +=
				1 j <<=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn KVBlitBitsFastBG { bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ sb
				bg@ dest@ 1 + sb
				bg@ dest@ 2 + sb
				bg@ dest@ 3 + sb
				bg@ dest@ 4 + sb
				bg@ dest@ 5 + sb
				bg@ dest@ 6 + sb
				bg@ dest@ 7 + sb
			end else
				if (byte@ 128 & ~~)
					bg@ dest@ 7 + sb
				end

				if (byte@ 64 & ~~)
					bg@ dest@ 6 + sb
				end

				if (byte@ 32 & ~~)
					bg@ dest@ 5 + sb
				end

				if (byte@ 16 & ~~)
					bg@ dest@ 4 + sb
				end

				if (byte@ 8 & ~~)
					bg@ dest@ 3 + sb
				end

				if (byte@ 4 & ~~)
					bg@ dest@ 2 + sb
				end

				if (byte@ 2 & ~~)
					bg@ dest@ 1 + sb
				end

				if (byte@ 1 & ~~)
					bg@ dest@ sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=
			1 j!

			while (left@)
				if (byte@ j@ & ~~)
					bg@ dest@ sb
				end

				1 dest +=
				1 j <<=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn KVBlitBitsFastFGBG { fg bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ sb
				bg@ dest@ 1 + sb
				bg@ dest@ 2 + sb
				bg@ dest@ 3 + sb
				bg@ dest@ 4 + sb
				bg@ dest@ 5 + sb
				bg@ dest@ 6 + sb
				bg@ dest@ 7 + sb
			end else
				if (byte@ 128 &)
					fg@ dest@ 7 + sb
				end else
					bg@ dest@ 7 + sb
				end

				if (byte@ 64 &)
					fg@ dest@ 6 + sb
				end else
					bg@ dest@ 6 + sb
				end

				if (byte@ 32 &)
					fg@ dest@ 5 + sb
				end else
					bg@ dest@ 5 + sb
				end

				if (byte@ 16 &)
					fg@ dest@ 4 + sb
				end else
					bg@ dest@ 4 + sb
				end

				if (byte@ 8 &)
					fg@ dest@ 3 + sb
				end else
					bg@ dest@ 3 + sb
				end

				if (byte@ 4 &)
					fg@ dest@ 2 + sb
				end else
					bg@ dest@ 2 + sb
				end

				if (byte@ 2 &)
					fg@ dest@ 1 + sb
				end else
					bg@ dest@ 1 + sb
				end

				if (byte@ 1 &)
					fg@ dest@ sb
				end else
					bg@ dest@ sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=
			1 j!

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ sb
				end else
					bg@ dest@ sb
				end

				1 dest +=
				1 j <<=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

// reversed ones

fn KVBlitBitsFastBackwardsFG { fg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@)
				if (byte@ 128 &)
					fg@ dest@ sb
				end

				if (byte@ 64 &)
					fg@ dest@ 1 + sb
				end

				if (byte@ 32 &)
					fg@ dest@ 2 + sb
				end

				if (byte@ 16 &)
					fg@ dest@ 3 + sb
				end

				if (byte@ 8 &)
					fg@ dest@ 4 + sb
				end

				if (byte@ 4 &)
					fg@ dest@ 5 + sb
				end

				if (byte@ 2 &)
					fg@ dest@ 6 + sb
				end

				if (byte@ 1 &)
					fg@ dest@ 7 + sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=

			if (w@ 3 >>)
				128 j!
			end else
				1 left@ << j!
			end

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ sb
				end

				1 dest +=
				1 j >>=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn KVBlitBitsFastBackwardsBG { bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ sb
				bg@ dest@ 1 + sb
				bg@ dest@ 2 + sb
				bg@ dest@ 3 + sb
				bg@ dest@ 4 + sb
				bg@ dest@ 5 + sb
				bg@ dest@ 6 + sb
				bg@ dest@ 7 + sb
			end else
				if (byte@ 128 & ~~)
					bg@ dest@ sb
				end

				if (byte@ 64 & ~~)
					bg@ dest@ 1 + sb
				end

				if (byte@ 32 & ~~)
					bg@ dest@ 2 + sb
				end

				if (byte@ 16 & ~~)
					bg@ dest@ 3 + sb
				end

				if (byte@ 8 & ~~)
					bg@ dest@ 4 + sb
				end

				if (byte@ 4 & ~~)
					bg@ dest@ 5 + sb
				end

				if (byte@ 2 & ~~)
					bg@ dest@ 6 + sb
				end

				if (byte@ 1 & ~~)
					bg@ dest@ 7 + sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=

			if (w@ 3 >>)
				128 j!
			end else
				1 left@ << j!
			end

			while (left@)
				if (byte@ j@ & ~~)
					bg@ dest@ sb
				end

				1 dest +=
				1 j >>=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end

fn KVBlitBitsFastBackwardsFGBG { fg bg ptr dest mod w h -- }
	auto j
	auto byte

	auto left

	while (h@)
		w@ 3 >> left!
		while (left@)
			ptr@ gb byte!

			if (byte@ ~~)
				bg@ dest@ sb
				bg@ dest@ 1 + sb
				bg@ dest@ 2 + sb
				bg@ dest@ 3 + sb
				bg@ dest@ 4 + sb
				bg@ dest@ 5 + sb
				bg@ dest@ 6 + sb
				bg@ dest@ 7 + sb
			end else
				if (byte@ 128 &)
					fg@ dest@ sb
				end else
					bg@ dest@ sb
				end

				if (byte@ 64 &)
					fg@ dest@ 1 + sb
				end else
					bg@ dest@ 1 + sb
				end

				if (byte@ 32 &)
					fg@ dest@ 2 + sb
				end else
					bg@ dest@ 2 + sb
				end

				if (byte@ 16 &)
					fg@ dest@ 3 + sb
				end else
					bg@ dest@ 3 + sb
				end

				if (byte@ 8 &)
					fg@ dest@ 4 + sb
				end else
					bg@ dest@ 4 + sb
				end

				if (byte@ 4 &)
					fg@ dest@ 5 + sb
				end else
					bg@ dest@ 5 + sb
				end

				if (byte@ 2 &)
					fg@ dest@ 6 + sb
				end else
					bg@ dest@ 6 + sb
				end

				if (byte@ 1 &)
					fg@ dest@ 7 + sb
				end else
					bg@ dest@ 7 + sb
				end
			end

			8 dest +=
			1 left -=
			1 ptr +=
		end

		w@ 7 & left!
		if (left@)
			ptr@ gb byte!
			1 ptr +=

			if (w@ 3 >>)
				128 j!
			end else
				1 left@ << j!
			end

			while (left@)
				if (byte@ j@ &)
					fg@ dest@ sb
				end else
					bg@ dest@ sb
				end

				1 dest +=
				1 j >>=
				1 left -=
			end
		end

		mod@ dest +=
		1 h -=
	end
end