//
// Initialization of the XRstation HAL.
//

#include "<ll>/rta3x/a3x.h"
#include "<df>/dragonfruit.h"
#include "../../OSLoader/OSLoaderGlobal.h"

#include "<inc>/HALDriver.h"
#include "<inc>/HALCPU.h"
#include "<inc>/HALMap.h"
#include "<inc>/HALCrash.h"
#include "<inc>/HALLog.h"

#include "<ll>/OSDLL/OS.h"

extern HALMain { ldrinfo -- ret }

externptr HALLoaderInfo

// gluing with rta3x
fn Main { ldrinfo args -- ret }
	ldrinfo@ HALMain ret!
end

var InfoTotalRAM 0

var KeThreadCurrentStackTop 0
public KeThreadCurrentStackTop

var HALPlatformKernelPageDirectory 0
public HALPlatformKernelPageDirectory

buffer HALPlatformModel 32
public HALPlatformModel

buffer HALCPUModel 32
public HALCPUModel

buffer HALBusModel 32
public HALBusModel

fn HALPlatformInfo { -- }
	// we're supposed to print platform info in this function

	InfoTotalRAM@ 1048576 /
	"XR/STATION (%dMB) AISA,ebus xr17032" Printf
end

extern HALXRstationCitronInit { ldrinfo -- }

extern HALXRstationLSICInit { ldrinfo -- }

extern HALXRstationAmtsuInit { ldrinfo -- }

fn HALPlatformInit { ldrinfo -- ret }
	fnsection "INIT$text"

	0 ret!

	HALPlatformModel
	"XRstation"
	strcpy

	HALCPUModel
	"xr17032"
	strcpy

	HALBusModel
	"AISA,ebus"
	strcpy

	ldrinfo@ LdrInfo_TotalRAM + @ InfoTotalRAM!

	ldrinfo@ HALXRstationCitronInit

	ldrinfo@ HALXRstationLSICInit

	ldrinfo@ HALXRstationAmtsuInit

	"Platform: " "HALMain" HALLog
	HALPlatformInfo
end

fn HALPlatformCrash { -- }
	// HALPlatformMapKernelSwitch drop drop
end

extern HALXr17032Exit { code sp -- }

extern HALXr17032Reset { -- }

extern HALCPUExit { -- }

fn HALPlatformExit { ret mode -- }
	// MUST BE CALLED WITH INTERRUPTS DISABLED

	// HALPlatformMapKernelSwitch drop drop

	// HALCPUExit

	if (mode@ OSSHUTDOWN_HALT ==)
		// ret@ HALLoaderInfo@ LoaderInfo_ReturnSP + @ HALXr17032Exit
	end elseif (mode@ OSSHUTDOWN_REBOOT ==)
		HALXr17032Reset
	end else
		"?" Printf

		HALXr17032Reset
	end
end

fn HALPlatformIsComputerOnFire { -- isonfire ok }
	// the XR/17032 CPU is not heat-tolerant; therefore this function will
	// never be called if the workstation is ablaze.

	0 isonfire!
	0 ok!
end