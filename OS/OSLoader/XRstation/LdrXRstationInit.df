//
// Implements the XRstation-specific part of bootloader initialization.
//

#include "<df>/dragonfruit.h"
#include "<ll>/rta3x/a3x.h"

#include "../OSLoader.h"

buffer LdrArgsBuffer 256
public LdrArgsBuffer

var LdrPlatformHALName 0
public LdrPlatformHALName

fn ArgsInit { argp -- }
	auto p
	LdrArgsBuffer p!

	auto l
	0 l!

	auto esc
	0 esc!

	if (argp@ ~~)
		return
	end

	while (argp@ gb)
		if (l@ 255 >=)
			1 p -=

			while (p@ gb)
				0 p@ sb
				1 p -=
			end

			return
		end

		if (esc@)
			0 esc!
			argp@ gb p@ sb
			1 p +=
			1 l +=
		end elseif (argp@ gb ' ' ==)
			0 p@ sb
			1 p +=
			1 l +=
		end elseif (argp@ gb '\\' ==)
			1 esc!
		end else
			argp@ gb p@ sb
			1 p +=
			1 l +=
		end

		1 argp +=
	end

	0 p@ sb
end

fn Main { args -- ret }
	// a3x entrypoint

	// clear BSS section

	pointerof _bss
	pointerof _bss_end pointerof _bss -
	0 memset

	// convert arguments to HAL-preferred format

	args@ ArgsInit

	// get HAL name

	"HALXRstation.dll" LdrPlatformHALName!

	// call generic bootloader entrypoint

	LdrMain ret!

	ret@ LdrExit
end

const BOOTLOADERSTART 0x20000

const LDRINITIALHEAPSIZE 8192

fn LdrXRstationBuildDescriptors { -- }
	// use the bad a3x memory descriptors to make good OSLoader descriptors.

	// we need to extend the first descriptor to reach the end of our bss
	// section and add that to our list as reclaimable memory. similarly we
	// have to contract the second descriptor (which should be free memory) by
	// the same amount. everything after that we just copy over 1:1.

	BOOTLOADERSTART LdrMemoryTotalRAM!

	"/memory" a3xDeviceSelect

	auto desc
	-1 "nextDescriptor" a3xDCallMethod drop drop drop desc!

	if (desc@ ~~)
		a3xDeviceExit

		"LdrXRstationBuildDescriptors: no first descriptor\n" LdrCrash
	end

	auto dtype
	auto dsize
	auto daddr

	desc@ "getDescriptorInfo" a3xDCallMethod drop dtype! dsize! daddr!

	if (dtype@ MEMORYRESERVED ~=)
		a3xDeviceExit

		"LdrXRstationBuildDescriptors: unexpected first descriptor type\n" LdrCrash
	end

	if (daddr@ PAGESIZE 2 * ~=)
		a3xDeviceExit

		"LdrXRstationBuildDescriptors: unexpected first descriptor address\n" LdrCrash
	end

	if (dsize@ BOOTLOADERSTART PAGESIZE 2 * - ~=)
		a3xDeviceExit

		dsize@ "LdrXRstationBuildDescriptors: unexpected first descriptor size %d\n" LdrCrash
	end

	// we'll come back to that later after we have a bump allocator

	desc@ "nextDescriptor" a3xDCallMethod drop drop drop desc!

	if (desc@ ~~)
		a3xDeviceExit

		"LdrXRstationBuildDescriptors: no second descriptor\n" LdrCrash
	end

	desc@ "getDescriptorInfo" a3xDCallMethod drop dtype! dsize! daddr!

	if (dtype@ MEMORYFREE ~=)
		a3xDeviceExit

		"LdrXRstationBuildDescriptors: unexpected second descriptor type\n" LdrCrash
	end

	if (daddr@ BOOTLOADERSTART ~=)
		a3xDeviceExit

		"LdrXRstationBuildDescriptors: unexpected second descriptor address\n" LdrCrash
	end

	if (dsize@ pointerof _bss_end BOOTLOADERSTART - <)
		a3xDeviceExit

		"LdrXRstationBuildDescriptors: unexpected second descriptor size\n" LdrCrash
	end

	if (dsize@ LDRINITIALHEAPSIZE <)
		a3xDeviceExit

		"Not enough RAM in slot 0 (at least 256+16KB required)\n" LdrCrash
	end

	dsize@ LdrMemoryTotalRAM +=

	// initialize the heap as a 16KB chunk at the end of the first memory
	// descriptor.

	BOOTLOADERSTART dsize@ + LDRINITIALHEAPSIZE - LdrHeapPointer!
	BOOTLOADERSTART dsize@ + LdrHeapTop!

	auto rtop
	pointerof _bss_end 0xFFF + 0xFFFFF000 & rtop!

	auto ok
	auto ldrdesc

	// allocate the descriptor for the reclaimable memory range.

	LdrMemoryDescriptor_SIZEOF // size
	LdrMemoryAllocate ok! ldrdesc!

	if (ok@)
		a3xDeviceExit

		ok@ "LdrXRstationBuildDescriptors: failed to allocate descriptor (%i)\n" LdrCrash
	end

	0 ldrdesc@ LdrMemoryDescriptor_Next + !
	OSLOADERMEM_RECLAIMABLE ldrdesc@ LdrMemoryDescriptor_Type + !
	2 ldrdesc@ LdrMemoryDescriptor_StartPFN + !
	rtop@ PAGESIZE 2 * - PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_Pages + !

	1 ldrdesc@ LdrMemoryDescriptor_OriginalDescriptor + !
	rtop@ PAGESIZE 2 * - PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_OriginalExtent + !

	ldrdesc@ LdrMemoryDescriptorListHead!
	ldrdesc@ LdrMemoryDescriptorListTail!

	// allocate the descriptor for the first free range.

	LdrMemoryDescriptor_SIZEOF // size
	LdrMemoryAllocate ok! ldrdesc!

	if (ok@)
		a3xDeviceExit

		ok@ "LdrXRstationBuildDescriptors: failed to allocate descriptor (%i)\n" LdrCrash
	end

	LDRINITIALHEAPSIZE dsize -=

	0 ldrdesc@ LdrMemoryDescriptor_Next + !
	OSLOADERMEM_FREE ldrdesc@ LdrMemoryDescriptor_Type + !
	rtop@ PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_StartPFN + !
	dsize@ rtop@ BOOTLOADERSTART - - PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_Pages + !

	1 ldrdesc@ LdrMemoryDescriptor_OriginalDescriptor + !
	dsize@ rtop@ BOOTLOADERSTART - - PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_OriginalExtent + !

	ldrdesc@ LdrMemoryDescriptorListTail@ LdrMemoryDescriptor_Next + !
	ldrdesc@ LdrMemoryDescriptorListTail!

	// allocate the descriptor for the first heap range.

	LdrMemoryDescriptor_SIZEOF // size
	LdrMemoryAllocate ok! ldrdesc!

	if (ok@)
		a3xDeviceExit

		ok@ "LdrXRstationBuildDescriptors: failed to allocate descriptor (%i)\n" LdrCrash
	end

	0 ldrdesc@ LdrMemoryDescriptor_Next + !
	OSLOADERMEM_RECLAIMABLE ldrdesc@ LdrMemoryDescriptor_Type + !
	BOOTLOADERSTART dsize@ + PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_StartPFN + !
	LDRINITIALHEAPSIZE PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_Pages + !

	1 ldrdesc@ LdrMemoryDescriptor_OriginalDescriptor + !
	LDRINITIALHEAPSIZE PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_OriginalExtent + !

	ldrdesc@ LdrMemoryDescriptorListTail@ LdrMemoryDescriptor_Next + !
	ldrdesc@ LdrMemoryDescriptorListTail!

	desc@ "nextDescriptor" a3xDCallMethod drop drop drop desc!

	while (desc@)
		desc@ "getDescriptorInfo" a3xDCallMethod drop dtype! dsize! daddr!

		if (dtype@ MEMORYFREE ==)
			dsize@ LdrMemoryTotalRAM +=

			// allocate the descriptor for this free range.

			LdrMemoryDescriptor_SIZEOF // size
			LdrMemoryAllocate ok! ldrdesc!

			if (ok@)
				a3xDeviceExit

				ok@ "LdrXRstationBuildDescriptors: failed to allocate descriptor (%i)\n" LdrCrash
			end

			0 ldrdesc@ LdrMemoryDescriptor_Next + !
			OSLOADERMEM_FREE ldrdesc@ LdrMemoryDescriptor_Type + !
			daddr@ PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_StartPFN + !
			dsize@ PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_Pages + !

			1 ldrdesc@ LdrMemoryDescriptor_OriginalDescriptor + !
			dsize@ PAGESHIFT >> ldrdesc@ LdrMemoryDescriptor_OriginalExtent + !

			ldrdesc@ LdrMemoryDescriptorListTail@ LdrMemoryDescriptor_Next + !
			ldrdesc@ LdrMemoryDescriptorListTail!
		end

		desc@ "nextDescriptor" a3xDCallMethod drop drop drop desc!
	end

	a3xDeviceExit
end

extern LdrXr17032MapInit { -- }

fn LdrPlatformMemoryInit { -- }
	// allocate a kernel space bitmap from a3x's heap.

	MANAGEDKERNELSPACESIZE PAGESHIFT >> 7 + 3 >> Calloc LdrKernelSpaceBitmap!

	if (LdrKernelSpaceBitmap@ ERR ==)
		"Failed to allocate kernel space bitmap\n\n" Printf

		-1 a3xReturn
	end

	// build memory descriptors

	LdrXRstationBuildDescriptors

	// create IDENTITYSPACE and enable paging

	LdrXr17032MapInit
end

extern LdrXr17032MapExit { -- }

fn LdrPlatformExit { ret -- }
	// disable paging

	LdrXr17032MapExit

	// free the kernel space bitmap (it was allocated in a3x heap)

	LdrKernelSpaceBitmap@ Free

	// return to firmware

	ret@ a3xReturn
end

fn LdrPlatformIOInit { bootdevname -- }
	auto ok
	auto devaddr

	auto a3xdev

	if (bootdevname@)
		bootdevname@ a3xDevTreeWalk a3xdev!

		if (a3xdev@ ~~)
			bootdevname@
			"LdrPlatformIOInit: couldn't find a3x device node for %s\n" LdrCrash
		end
	end else
		a3xMyDevice@ a3xdev!
	end

	// try to auto-identify the name of the boot device

	a3xdev@ a3xDeviceSelectNode
		if ("model" a3xDGetProperty "AISA,satsuma-disk" strcmp ~~)
			"LdrPlatformIOInit: don't know how to auto-identify this boot device\n" LdrCrash
		end else
			LdrBootDeviceName "dks" strcpy
			"satsuma,id" a3xDGetProperty LdrBootDeviceName 3 + itoa

			if ("deviceType" a3xDGetProperty "disk-logical" strcmp)
				// we're booting from a partition, add partition identifier

				's' LdrBootDeviceName 4 + sb
				"partition#" a3xDGetProperty LdrBootDeviceName 5 + itoa
			end
		end

		"blockSize" a3xDGetProperty LdrBootDevice LdrFile_BlockSize + !
	a3xDeviceExit

	a3xdev@ LdrBootDevice LdrFile_DriverContext + !
	pointerof LdrXRstationReadA3XDevice LdrBootDevice LdrFile_ReadFunction + !

	// map MMIO areas

	"/bus/pboard/citron" a3xDevTreeWalk a3xdev!

	if (a3xdev@)
		a3xdev@ a3xDeviceSelectNode
			"address" a3xDGetProperty devaddr!

			1 // pages
			devaddr@ // phyaddr
			LDRMEM_NONCACHED // noncached
			LdrMemoryMapIORegion ok! devaddr!

			if (ok@ ~~)
				if (DEBUGCHECKS)
					devaddr@ "LdrPlatformIOInit: citron @ 0x%08x\n" Printf
				end

				devaddr@ LdrInfoBlock LdrInfo_CitronBase + !
			end
		a3xDeviceExit
	end

	"/platform/lsic" a3xDevTreeWalk a3xdev!

	if (a3xdev@)
		a3xdev@ a3xDeviceSelectNode
			"address" a3xDGetProperty devaddr!

			1 // pages
			devaddr@ // phyaddr
			LDRMEM_NONCACHED // noncached
			LdrMemoryMapIORegion ok! devaddr!

			if (ok@ ~~)
				if (DEBUGCHECKS)
					devaddr@ "LdrPlatformIOInit: lsic @ 0x%08x\n" Printf
				end

				devaddr@ LdrInfoBlock LdrInfo_LSICBase + !
			end
		a3xDeviceExit
	end

	"/platform/ebus/nvram" a3xDevTreeWalk a3xdev!

	if (a3xdev@)
		a3xdev@ a3xDeviceSelectNode
			"address" a3xDGetProperty devaddr!

			1 // pages
			devaddr@ // phyaddr
			LDRMEM_NONCACHED // noncached
			LdrMemoryMapIORegion ok! devaddr!

			if (ok@ ~~)
				if (DEBUGCHECKS)
					devaddr@ "LdrPlatformIOInit: nvram @ 0x%08x\n" Printf
				end

				devaddr@ LdrInfoBlock LdrInfo_NVRAMBase + !
			end
		a3xDeviceExit
	end

	"/screen" a3xDevTreeWalk a3xdev!

	if (a3xdev@)
		a3xdev@ a3xDeviceSelectNode
			auto format
			"model" a3xDGetProperty format!

			if (format@ "AISA,kinnowfb8" strcmp)
				"vram" a3xDGetProperty devaddr!

				"vramSize" a3xDGetProperty PAGEOFFSETMASK + PAGESHIFT >> // pages
				devaddr@ // phyaddr
				LDRMEM_WRITECOMBINE // noncached
				LdrMemoryMapIORegion ok! devaddr!

				if (ok@ ~~)
					if (DEBUGCHECKS)
						devaddr@ "LdrPlatformIOInit: HAL console @ 0x%08x\n" Printf
					end

					"width"  a3xDGetProperty LdrInfoBlock LdrInfo_HALConsoleFBWidth + !
					"height" a3xDGetProperty LdrInfoBlock LdrInfo_HALConsoleFBHeight + !
					OSBOOTFBFORMAT_LGFX_I8   LdrInfoBlock LdrInfo_HALConsoleFBFormat + !
					devaddr@                 LdrInfoBlock LdrInfo_HALConsoleFBAddr + !
				end
			end
		a3xDeviceExit
	end
end

fn LdrXRstationLoadNode { -- }
	auto name
	128 alloc name!

	auto rv
	16 alloc rv!

	auto model
	"model" a3xDGetProperty model!

	auto wp

	if (model@)
		name@ model@ strcpy

		model@ strlen wp!

		name@ wp@ + "," strcpy

		1 wp +=

		"revision" a3xDGetProperty rv@ itoa

		name@ wp@ + rv@ strcpy

		rv@ strlen wp +=

		name@ wp@ + ".sys" strcpy

		4 wp +=

		auto ok
		0 // flags
		name@ // name
		LdrBootDriverLoad ok! drop

		if (ok@)
			if (model@ "AISA,ebus" strcmp)
				// this is the "mobo driver", so this is fatal

				ok@ name@ "LdrBootDrivers: failed to load %s (%i)\n" LdrCrash
			end elseif (ok@ LDRSTATUS_NOT_FOUND ~=)
				ok@ name@ "LdrBootDrivers: failed to load %s (%i)\n" Printf
			end
		end
	end
end

fn LdrXRstationIterateNode { iter -- }
	while (iter@)
		iter@ a3xDevIterate iter!
			LdrXRstationLoadNode

			a3xDevIteratorInit LdrXRstationIterateNode
		a3xDeviceExit
	end
end

fn LdrPlatformBootDriversLoadAll { -- }
	"/platform" a3xDeviceSelect
		a3xDevIteratorInit LdrXRstationIterateNode
	a3xDeviceExit
end

extern LdrXr17032StartSystem { -- }

fn LdrPlatformStartSystem { -- }
	LdrXr17032StartSystem
end

fn (LdrReadFunction) LdrXRstationReadA3XDevice { length buf offset file -- bytesread ok }
	auto blocksize
	file@ LdrFile_BlockSize + @ blocksize!

	if (buf@ blocksize@ %)
		LDRSTATUS_UNALIGNED ok!
		return
	end

	if (length@ blocksize@ %)
		LDRSTATUS_UNALIGNED ok!
		return
	end

	0 ok!

	0 bytesread!

	file@ LdrFile_DriverContext + @ a3xDeviceSelectNode

	while (bytesread@ length@ <)
		buf@
		offset@ blocksize@ /
		"readBlock" a3xDCallMethod drop drop drop ok!

		if (ok@ 1 ~=)
			LDRSTATUS_IO_ERROR ok!

			a3xDeviceExit

			return
		end

		0 ok!

		blocksize@ buf +=
		blocksize@ bytesread +=
		blocksize@ offset +=
	end

	a3xDeviceExit
end