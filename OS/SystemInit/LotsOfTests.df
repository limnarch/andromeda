#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<ll>/OSDLL/OSVideoControl.h"

var Seed 0x12AB34CD

fn SimpleRandom { -- num }
	Seed@ num!

	num@ 1103515245 * 12345 + 0xFFFFFFFF % num!

	num@ Seed!
end

buffer TestBuffer 8192

fn UsermodeThreadTest { context -- ret }
	context@ "Hi! 0x%08x\n" Printf

	// usermode mutex test

	auto handle
	ACCESS_OWNER_ALL // permissions
	0 // name
	OSMutexCreate ret! handle!

	if (ret@)
		ret@ OSStatusGetName "failed to create: %s\n" OSAbort
	end

	1 // alertable
	2000 // timeout
	handle@ // objecthandle
	OSWaitForObject ret!

	ret@ "hi %i\n" Printf

	1000 OSThreadSleep drop

	0xDEADBEEF ret!
end

fn LotsOfTests { -- }
	auto ret

	if (0)
		// usermode thread test

		0xAABBCCDD // context
		pointerof UsermodeThreadTest // startfunc
		0 // creationflags
		ACCESS_OWNER_ALL // permissions
		"UsermodeThreadTest" // name
		OSCURRENTPROCESS // processhandle
		OSThreadCreate ret! handle!

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to create thread: %s\n" OSAbort
		end

		1 // alertable
		OSWAIT_TIMEOUTINFINITE // timeout
		handle@ // objecthandle
		OSWaitForObject ret!

		auto status
		handle@ OSThreadReadStatus ret! status!

		ret@ "%i\n" Printf
		status@ "0x%08x\n" Printf

		handle@ OSClose drop
	end

	if (0)
		// usermode process test

		auto processhandle
		auto threadhandle

		"/mintia/cmd.exe" // path
		0 // creationflags
		0 // creationparams
		ACCESS_OWNER_ALL // permissions
		0 // name
		OSSpawn ret! processhandle! threadhandle!

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to create process: %s\n" OSAbort
		end

		threadhandle@ OSClose drop
		processhandle@ OSClose drop
	end

	if (0)
		// serial tty test

		0 // flags
		ACCESS_READ ACCESS_WRITE | // access
		"//:/Devices/ttyS0" // path
		0 // ftype
		OSFileOpen ret! handle!

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to open e: %s\n" OSAbort
		end

		handle@ OSSetStdOut

		while (1)
			OSWAIT_TIMEOUTINFINITE // timeout
			0 // flags
			8191 // length
			TestBuffer // buffer
			handle@ // filehandle
			OSFileRead ret! written!

			0 TestBuffer written@ + sb

			TestBuffer "read %s\n" Printf
			written@ "read %d bytes\n" Printf
			ret@ OSStatusGetName "status: %s\n" Printf
		end
	end

	if (0)
		// framebuffer mmap test

		auto query
		0 // flags
		ACCESS_READ ACCESS_WRITE | // access
		":kinnowfb0" // path
		0 // ftype
		OSFileOpen ret! handle!

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to open e: %s\n" OSAbort
		end

		OSVideoQuery_SIZEOF alloc query!

		query@ // arg2
		OSVIDEOIOCONTROL_QUERY // arg1
		handle@ // filehandle
		OSIOControl ret! drop

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to get video parameters: %s\n" OSAbort
		end

		query@ OSVideoQuery_Height + @
		query@ OSVideoQuery_Width + @ "%dx%d\n" Printf

		ACCESS_READ ACCESS_WRITE | // pageprotection
		0 // anonsize
		handle@ // filehandle
		ACCESS_OWNER_ALL // permissions
		0 // name
		OSSectionCreate ret! handle2!

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to make section: %s\n" OSAbort
		end

		query@ OSVideoQuery_Width + @ query@ OSVideoQuery_Height + @ * 2 * // length
		HEAPSTART // startva
		0 // sectionoffset
		handle2@ // sectionhandle
		OSCURRENTPROCESS // processhandle
		PAGEACCESS_READ PAGEACCESS_WRITE | PAGEACCESS_NONCACHED | // pageprotection
		0 // flags
		OSSectionMapView ret! realva!

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to map section: %s\n" OSAbort
		end

		while (1)
			query@ OSVideoQuery_Width + @ query@ OSVideoQuery_Height + @ * 2 * hugeareasize!
			realva@ ptr!

			while (hugeareasize@)
				SimpleRandom ptr@!

				4 hugeareasize -=
				4 ptr +=
			end
		end
	end

	if (0)
		auto i
		10 i!

		while (i@)
			// usermode mutex test

			auto handle
			ACCESS_OWNER_ALL // permissions
			0 // name
			OSMutexCreate ret! handle!

			if (ret@)
				ret@ OSStatusGetName "failed to create: %s\n" OSAbort
			end

			1 // alertable
			2000 // timeout
			handle@ // objecthandle
			OSWaitForObject ret!

			ret@ OSStatusGetName "hi: %s\n" Printf

			1 // alertable
			2000 // timeout
			handle@ // objecthandle
			OSWaitForObject ret!

			ret@ OSStatusGetName "hi: %s\n" Printf

			auto handles
			8 alloc handles!

			handle@ handles@!
			handle@ handles@ 4 + !

			1 // alertable
			OSWAITANY // waittype
			2000 // timeout
			2 // objectcount
			handles@ // objecthandletable
			OSWaitForMultipleObjects ret!

			ret@ OSStatusGetName "hi: %s\n" Printf

			handle@ OSMutexRelease ret!
			ret@ OSStatusGetName "bye: %s\n" Printf

			handle@ OSMutexRelease ret!
			ret@ OSStatusGetName "bye: %s\n" Printf

			handle@ OSMutexRelease ret!
			ret@ OSStatusGetName "bye: %s\n" Printf

			handle@ OSClose drop

			1 i -=
		end
	end

	auto realva
	auto hugeareasize
	auto written

	if (0)
		// disk write test

		8192 hugeareasize!
		TestBuffer realva!

		while (hugeareasize@)
			SimpleRandom realva@!

			4 realva +=
			4 hugeareasize -=
		end

		0 // flags
		PAGEACCESS_READ PAGEACCESS_WRITE | // access
		":dks3" // path
		0 // ftype
		OSFileOpen ret! handle!

		if (ret@)
			ret@ OSStatusGetName "SystemInit.exe: failed to open e: %s\n" OSAbort
		end

		while (1)
			0 // flags
			8192 // length
			TestBuffer // buffer
			handle@ // filehandle
			OSFileWrite ret! written!

			if (written@ 8192 ~=)
				break
			end
		end
	end

	if (0)
		// mmap disk write test

		0 // flags
		PAGEACCESS_READ PAGEACCESS_WRITE | // access
		":dks3" // path
		0 // ftype
		OSFileOpen ret! handle!

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to open e: %s\n" OSAbort
		end

		auto handle2
		PAGEACCESS_READ PAGEACCESS_WRITE | // pageprotection
		0 // anonsize
		handle@ // filehandle
		ACCESS_OWNER_ALL // permissions
		0 // name
		OSSectionCreate ret! handle2!

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to make section: %s\n" OSAbort
		end

		16 1024 * 1024 * // length
		HEAPSTART // startva
		0 // sectionoffset
		handle2@ // sectionhandle
		OSCURRENTPROCESS // processhandle
		PAGEACCESS_READ PAGEACCESS_WRITE | // pageprotection
		0 // flags
		OSSectionMapView ret! realva!

		if (ret@)
			ret@ OSStatusGetName "SystemInit: failed to map section: %s\n" OSAbort
		end

		realva@ "0x%08x\n" Printf

		// extern OSUnmapView { length vaddr processhandle -- ok }

		16 1024 * 1024 * hugeareasize!

		while (hugeareasize@)
			SimpleRandom realva@!

			4 hugeareasize -=
			4 realva +=
		end
	end

	if (0)
		// swap test

		6 1024 * 1024 * hugeareasize!

		auto hugearea
		auto ok

		hugeareasize@ OSHeapAllocate ok! hugearea!

		if (ok@)
			ok@ OSStatusGetName "couldn't allocate big area: %s\n" Printf
		end else
			hugearea@ "\nhugearea = 0x%08x\n" Printf

			"swap test: writing a 6MB region with random data\n" Printf

			"if you didn't specify a swapfile the system will bsod in about 5 seconds\n" Printf
			"one dot represents 64KB\n" Printf

			auto ptr
			hugearea@ ptr!

			while (hugeareasize@)
				if (hugeareasize@ 65535 & ~~)
					'.' Putc
					OSFlushLine
				end

				SimpleRandom ptr@!

				4 ptr +=
				4 hugeareasize -=
			end

			"\npulled it off even though we don't even have that much RAM!\n" Printf
			"behold the power of swap\n" Printf

			hugearea@ OSHeapFree
		end
	end

	if (0)
		ConfigTest
	end
end

fn ConfigTest { -- }
	auto ret
	auto config
	"hello.cfg" // path
	0 // create
	OSConfigFileLoad ret! config!

	if (ret@)
		ret@ OSStatusGetName "couldn't load config file: %s\n" Printf
		return
	end

	auto section
	"" config@ OSConfigGetSection ret! section!

	if (ret@)
		"noo\n" Printf
		return
	end

	auto key
	"akey" // keyname
	section@ // section
	OSConfigGetKey ret! key!

	if (ret@)
		"noo\n" Printf
	end else
		auto valueptr
		key@ OSConfigGetKeyValue valueptr!

		if (valueptr@)
			valueptr@ "%s\n" Printf
		end
	end

	"hello its me" // valueptr
	"anotherkey" // keyname
	section@ // section
	OSConfigCreateKey ret! key!

	if (ret@)
		"noo\n" Printf
	end

	config@ OSConfigFileWrite ret!

	if (ret@)
		ret@ OSStatusGetName "couldn't write: %s\n" Printf
	end

	config@ OSConfigFileFree
end