//
// Implements standard IO support.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OSMap.h"
#include "<ll>/OSDLL/OSCalls.h"
#include "<ll>/OSDLL/OSFile.h"
#include "<ll>/OSDLL/OSObject.h"
#include "<ll>/OSDLL/OSWait.h"
#include "<ll>/OSDLL/OSStatus.h"
#include "<ll>/OSDLL/OSSignal.h"
#include "<ll>/OSDLL/OSProcess.h"
#include "<ll>/OSDLL/OSFastMutex.h"
#include "<ll>/OSDLL/OSStream.h"
#include "<ll>/OSDLL/OSAccess.h"
#include "<ll>/OSDLL/OSConsoleControl.h"
#include "<ll>/OSDLL/OSEnvironment.h"
#include "<ll>/OSDLL/OSIOControl.h"

#include "OSDLL.h"

var DLLStdInStream 0
public DLLStdInStream

var DLLStdOutStream 0
public DLLStdOutStream

var DLLStdErrStream 0
public DLLStdErrStream

fn OSGetStdIn { -- fd }
	OSPEB OSPEBs_StdIn + @ fd!
end

fn OSGetStdOut { -- fd }
	OSPEB OSPEBs_StdOut + @ fd!
end

fn OSGetStdErr { -- fd }
	OSPEB OSPEBs_StdErr + @ fd!
end

fn OSGetStdInStream { -- stream }
	DLLStdInStream@ stream!
end

fn OSGetStdOutStream { -- stream }
	DLLStdOutStream@ stream!
end

fn OSGetStdErrStream { -- stream }
	DLLStdErrStream@ stream!
end

fn OSSetStdIn { fd -- }
	fd@ OSPEB OSPEBs_StdIn + !
	fd@ DLLStdInStream!
end

fn OSSetStdOut { fd -- }
	if (OSPEB OSPEBs_StdOut + @ fd@ ==)
		// same handle. nothing to do

		return
	end

	// acquire the stdio mutex

	DLLStdIoFastMutex OSFastMutexAcquire

	// if there's an existing stream, close it.

	if (DLLStdOutStream@ DLLNOSTREAM ~=)
		DLLStdOutStream@ OSStreamClose drop
	end

	// set the new stdout handle in the PEB.
	
	fd@ OSPEB OSPEBs_StdOut + !

	if (fd@ OSNONE ~=)
		// there's really a stdout handle (i.e. its not being cleared).
		// create a stream object to manage the buffering for the stdout
		// object.

		auto ok
		OSSTREAMTYPE_LINEBUFFER // flags
		ACCESS_WRITE // access
		fd@ // filehandle
		OSStreamObjectCreate ok! DLLStdOutStream!

		if (ok@)
			DLLNOSTREAM DLLStdOutStream!
			DLLNOSTREAM OSPEB OSPEBs_StdOut + !

			ok@ OSStatusGetName "OSSetStdOut: %s\n" OSAbort
		end
	end else
		DLLNOSTREAM DLLStdOutStream!
	end

	DLLStdIoFastMutex OSFastMutexRelease
end

fn OSSetStdErr { fd -- }
	fd@ OSPEB OSPEBs_StdErr + !
	fd@ DLLStdErrStream!
end

fn OSAbort { ... fmt -- }
	argv
	argc@
	fmt@
	OSPEB OSPEBs_StdErr + @
	VFPrintf

	OSSIGNALACTION_DEFAULT // action
	OSSIGNAL_ABRT // signum
	OSSignalSetAction drop

	// send OSSIGNAL_ABRT to ourselves

	OSSIGNAL_ABRT // signal
	OSCURRENTTHREAD // thread
	OSThreadSignal drop

	-1 OSExit
end

fn OSError { ... fmt -- }
	argv
	argc@
	fmt@
	OSPEB OSPEBs_StdErr + @
	VFPrintf

	-1 OSExit
end

fn FPuts { fd s -- }
	while (s@ gb)
		fd@ s@ gb FPutc
		1 s +=
	end
end

fn VPrintf { argvt argcn fmt -- }
	argvt@
	argcn@
	fmt@
	DLLStdOutStream@
	VFPrintf
end

fn OSFlushLine { -- }
	if (OSPEB OSPEBs_StdOut + @ DLLNOSTREAM ==)
		return
	end

	DLLStdIoFastMutex OSFastMutexAcquire

	0 // purge
	DLLStdOutStream@ // stream
	OSStreamFlush drop

	DLLStdIoFastMutex OSFastMutexRelease
end

fn FPutc { fd c -- }
	if (fd@ DLLNOSTREAM ==)
		c@ OSConsolePutCharacter drop

		return
	end

	if (fd@ DLLStdOutStream@ ==)
		DLLStdIoFastMutex OSFastMutexAcquire
	end

	c@ // c
	fd@ // stream
	OSStreamWriteCharacter drop

	if (fd@ DLLStdOutStream@ ==)
		DLLStdIoFastMutex OSFastMutexRelease
	end
end

fn Putc { c -- }
	DLLStdOutStream@ // fd
	c@ // c
	FPutc
end

fn Puts { s -- }
	while (s@ gb)
		s@ gb Putc
		1 s +=
	end
end

fn OSReadline { s max -- eof }
	OSFlushLine

	auto bytes
	0 bytes!

	0 eof!

	auto ok
	OSWAIT_TIMEOUTINFINITE // timeout
	0 // flags
	max@ // length
	s@ // buffer
	OSPEB OSPEBs_StdIn + @ // filehandle
	OSFileRead ok! bytes!

	if (ok@)
		ok@ OSStatusGetName "OSReadline: %s\n" OSAbort
	end

	if (bytes@ 0 ==)
		1 eof!
		return
	end

	if (s@ bytes@ 1 - + gb '\n' ~=)
		0 s@ sb
		return
	end

	0 s@ bytes@ 1 - + sb
end

fn Gets { s max -- }
	auto eof
	1 eof!

	while (eof@)
		s@ max@ OSReadline eof!
	end
end

fn OSCharacterIsAlphanumeric { char -- valid }
	1 valid!	

	if (char@ '0' >= char@ '9' <= &&)
		return
	end elseif (char@ 'a' >= char@ 'z' <= &&)
		return
	end elseif (char@ 'A' >= char@ 'Z' <= &&)
		return
	end

	0 valid!
end

fn OSStringIsAlphanumeric { str -- valid }
	while (str@ gb)
		str@ gb OSCharacterIsAlphanumeric valid!

		if (valid@ ~~)
			return
		end

		1 str +=
	end

	1 valid!
end

fn DLLGetResponseString { buf filehandle -- ok }
	0 ok!

	auto charbuf
	4 alloc charbuf!

	auto found
	0 found!

	while (1)
		100 // timeout
		0 // flags
		1 // length
		charbuf@ // buffer
		filehandle@ // filehandle
		OSFileRead ok! drop

		if (ok@)
			if (ok@ STATUS_WAIT_TIMEOUT ==)
				// must be an issue with the tty
				STATUS_IO_ERROR ok!
			end

			return
		end

		if (found@)
			if (charbuf@ gb 'R' ==)
				'R' buf@ sb
				1 buf +=
				0 buf@ sb
				break
			end

			charbuf@ gb buf@ sb
			1 buf +=
		end elseif (charbuf@ gb '\[' ==)
			'\[' buf@ sb
			1 buf +=

			1 found!
		end
	end
end

fn OSConsoleQuerySize { filehandle -- w h ok }
	if (filehandle@ OSGetStdOut ==)
		auto env

		"COLUMNS" // name
		OSFindEnvironmentVariable ok! env! drop

		if (ok@ ~~)
			env@ atoi w!

			"LINES" // name
			OSFindEnvironmentVariable ok! env! drop

			if (ok@ ~~)
				env@ atoi h!

				return
			end
		end

		0 ok!
	end

	filehandle@ OSIsAConsole ok!

	if (ok@)
		return
	end

	auto oldquerybuf
	16 alloc oldquerybuf!

	// set cursor position to corner of screen and then query it.
	// this will determine the height and width of the screen.

	OSCONSOLEMODE_RAW // arg2
	OSCONSOLEIOCONTROL_SETMODE // arg1
	filehandle@ // filehandle
	OSIOControl ok! drop

	if (ok@)
		return
	end

	"\[[6n" filehandle@ FPrintf
	0 filehandle@ OSStreamFlush drop

	oldquerybuf@ // buf
	filehandle@ // filehandle
	DLLGetResponseString ok!

	0 // arg2
	OSCONSOLEIOCONTROL_RESETMODE // arg1
	filehandle@ // filehandle
	OSIOControl drop drop

	if (ok@)
		return
	end

	OSCONSOLEMODE_RAW // arg2
	OSCONSOLEIOCONTROL_SETMODE // arg1
	filehandle@ // filehandle
	OSIOControl drop drop

	"\[[999;999H\[[6n" filehandle@ FPrintf
	0 filehandle@ OSStreamFlush drop

	auto querybuf
	16 alloc querybuf!

	querybuf@ // buf
	filehandle@ // filehandle
	DLLGetResponseString ok!

	0 // arg2
	OSCONSOLEIOCONTROL_RESETMODE // arg1
	filehandle@ // filehandle
	OSIOControl drop drop

	if (ok@)
		return
	end

	// get rid of the open bracket and final R

	2 querybuf +=

	0 querybuf@ querybuf@ strlen + 1 - sb

	// we got a query string. replace the semicolon with a null character.

	auto ptr
	querybuf@ ptr!

	while (ptr@ gb ';' ~=)
		1 ptr +=
	end

	0 ptr@ sb

	querybuf@ atoi h!
	ptr@ 1 + atoi w!

	// reset the cursor position.

	'H' oldquerybuf@ oldquerybuf@ strlen + 1 - sb
	oldquerybuf@ "%s" filehandle@ FPrintf
	0 filehandle@ OSStreamFlush drop

	w@ querybuf@ itoa

	querybuf@ // env
	"COLUMNS" // name
	OSSetEnvironmentVariable drop

	h@ querybuf@ itoa

	querybuf@ // env
	"LINES" // name
	OSSetEnvironmentVariable drop
end

fn DLLStringCompareCaseInsensitive { str1 str2 -- eq }
	while (1)
		auto c1
		str1@ gb c1!

		auto c2
		str2@ gb c2!

		if (c1@ 'a' >= c1@ 'z' <= &&)
			32 c1 -=
		end

		if (c2@ 'a' >= c2@ 'z' <= &&)
			32 c2 -=
		end

		if (c1@ c2@ ~=)
			0 eq!
			return
		end

		if (c1@ ~~)
			1 eq!
			return
		end

		1 str1 +=
		1 str2 +=
	end
end