//
// Implements userspace file object management.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OSCalls.h"
#include "<ll>/OSDLL/OSMap.h"
#include "<ll>/OSDLL/OSFile.h"
#include "<ll>/OSDLL/OSAbort.h"
#include "<ll>/OSDLL/OSAccess.h"
#include "<ll>/OSDLL/OSObject.h"
#include "<ll>/OSDLL/OSStatus.h"

#include "OSDLL.h"

fn OSSetUMask { umask -- }
	umask@ OSPEB OSPEBs_UMask + !
end

fn OSGetUMask { -- umask }
	OSPEB OSPEBs_UMask + @ umask!
end

fn OSRequestInitialize { requestblock -- }
	requestblock@ // ptr
	OSRequest_SIZEOF // sz
	0 // word
	memset

	OSNONE requestblock@ OSRequest_PortHandle + !
	OSNONE requestblock@ OSRequest_EventHandle + !
end

fn OSFileInformationInitialize { info -- }
	// initialize a file information structure to a no-op state

	info@ // ptr
	OSFileInformation_SIZEOF // sz
	0 // word
	memset

	// -1 in the ms part indicates we don't want to change this timestamp.
	// this is obviously a normally impossible value since ms only ranges
	// between 0 and 999.

	-1 info@ OSFileInformation_ATimeMsPart + !
	-1 info@ OSFileInformation_MTimeMsPart + !
	-1 info@ OSFileInformation_CTimeMsPart + !
	-1 info@ OSFileInformation_CreationTimeMsPart + !
end

fn DLLFileOpen { flags access path ftype -- handle ok }
	flags@ OSFILEFLAG_MUSTBEFILE | // flags
	access@ // access
	path@ // path
	OSOpen ok! handle!

	if (ok@)
		return
	end

	auto query

	if (ftype@)
		// there's a required file type

		OSFileInformation_SIZEOF alloc query!

		handle@ // handle
		query@ // query
		OSFileQuery ok!

		if (ok@)
			handle@ OSClose drop

			return
		end

		if (query@ OSFileInformation_Type + @ ftype@ ~=)
			handle@ OSClose drop

			if (ftype@ OSFILETYPE_DIRECTORY ==)
				STATUS_NOT_A_DIRECTORY ok!
			end elseif (ftype@ OSFILETYPE_FILE ==)
				STATUS_NOT_A_FILE ok!
			end else
				STATUS_NOT_CORRECT_FILETYPE ok!
			end

			return
		end
	end
end

fn OSDirectoryCreate { permissions flags access path -- handle ok }
	permissions@ OSPEB OSPEBs_UMask + @ ~ & // filepermissions
	OSThreadSetFilePermissions ok!

	if (ok@)
		return
	end

	flags@ OSFILEFLAG_CREATE | OSFILEFLAG_CREATEDIR | // flags
	access@ // access
	path@ // path
	OSFILETYPE_DIRECTORY // ftype
	DLLFileOpen ok! handle!
end

fn OSFileCreate { permissions flags access path -- handle ok }
	permissions@ OSPEB OSPEBs_UMask + @ ~ & // filepermissions
	OSThreadSetFilePermissions ok!

	if (ok@)
		return
	end

	flags@ OSFILEFLAG_CREATE | // flags
	access@ // access
	path@ // path
	0 // ftype
	DLLFileOpen ok! handle!
end

fn OSFileOpen { flags access path ftype -- handle ok }
	if (flags@ OSFILEFLAG_CREATE &)
		STATUS_INVALID_ARGUMENT ok!
		return
	end

	flags@ access@ path@ ftype@ DLLFileOpen ok! handle!
end