//
// Implements standard time helper functions.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OSCalls.h"
#include "<ll>/OSDLL/OSMap.h"
#include "<ll>/OSDLL/OSFile.h"
#include "<ll>/OSDLL/OSAbort.h"
#include "<ll>/OSDLL/OSAccess.h"
#include "<ll>/OSDLL/OSObject.h"
#include "<ll>/OSDLL/OSStatus.h"
#include "<ll>/OSDLL/OSModule.h"
#include "<ll>/OSDLL/OSAlloc.h"
#include "<ll>/OSDLL/OSWait.h"
#include "<ll>/OSDLL/OSFastMutex.h"
#include "<ll>/OSDLL/OSTime.h"

#include "OSDLL.h"

table DLLMonthNames
	"Jan" "Feb"
	"Mar" "Apr"
	"May" "Jun"
	"Jul" "Aug"
	"Sep" "Oct"
	"Nov" "Dec"
	-1
endtable

table DLLDayNames
	"Mon"
	"Tue"
	"Wed"
	"Thu"
	"Fri"
	"Sat"
	"Sun"
endtable

const SECSPERMIN      60
const SECSPERHOUR     (SECSPERMIN 60 *)
const SECSPERDAY      (SECSPERHOUR 24 *)
const SECSPERYEAR     (SECSPERDAY 365 *)
const SECSPERLEAPYEAR (SECSPERYEAR SECSPERDAY +)

table DLLMonthDays
	31 28 31 30 31 30 31 31 30 31 30 31
endtable

table DLLMonthDaysIntoYear
	0 31 59 90 120 151 181 212 243 273 304 334
endtable

struct DLLTimeZone
	4 Name
	4 Offset
endstruct

table DLLTimeZones
	// North American timezones

	"AST"  (0 4 SECSPERHOUR * -)
	"EST"  (0 5 SECSPERHOUR * -)
	"CST"  (0 6 SECSPERHOUR * -)
	"MST"  (0 7 SECSPERHOUR * -)
	"PST"  (0 8 SECSPERHOUR * -)

	// European timezones

	"WET"  0
	"CET"  (1 SECSPERHOUR *)
	"EET"  (2 SECSPERHOUR *)

	// Australian timezones

	"AWST" (8 SECSPERHOUR *)
	"ACST" (9 SECSPERHOUR * SECSPERHOUR 2 / +)
	"AEST" (10 SECSPERHOUR *)

	// in theory there would be other ones but i'm lazy

	-1 -1
endtable

fn OSLocalTimeToTimestamp { ostime -- sec ms }
	auto offset
	OSTimeZoneGet drop offset!

	ostime@ OSTimeToTimestamp ms! sec!

	offset@ sec -=
end

fn OSTimeToTimestamp { ostime -- sec ms }
	auto month
	ostime@ OSTime_Month + @ month!

	auto day
	ostime@ OSTime_DayOfMonth + @ 1 - day!

	auto year
	ostime@ OSTime_Year + @ year!

	[month@]DLLMonthDaysIntoYear@ SECSPERDAY * sec!

	day@ SECSPERDAY * sec +=

	auto baseyear
	1970 baseyear!

	while (baseyear@ year@ <)
		if (baseyear@ 3 & ~~)
			SECSPERLEAPYEAR sec +=
		end else
			SECSPERYEAR sec +=
		end

		1 baseyear +=
	end

	ostime@ OSTime_Second + @ sec +=
	ostime@ OSTime_Minute + @ SECSPERMIN * sec +=
	ostime@ OSTime_Hour + @ SECSPERHOUR * sec +=

	ostime@ OSTime_Milliseconds + @ ms!
end

fn OSTimeLocalGet { ostime ms sec -- }
	auto offset
	OSTimeZoneGet drop offset!

	ostime@ // ostime
	ms@ // ms
	sec@ offset@ + // sec
	OSTimeUTCGet
end

fn OSTimeUTCGet { ostime ms sec -- }
	ms@ ostime@ OSTime_Milliseconds + !

	sec@ SECSPERDAY / 4 + 7 % ostime@ OSTime_DayOfWeek + !

	auto year
	1970 year!

	while (sec@ SECSPERYEAR >=)
		// very inefficient. O(n) where n is the number of years since 1970.
		// i don't care.

		if (year@ 3 & ~~)
			if (sec@ SECSPERLEAPYEAR <)
				break
			end else
				SECSPERLEAPYEAR sec -=
			end
		end else
			SECSPERYEAR sec -=
		end

		1 year +=
	end

	year@ ostime@ OSTime_Year + !

	auto mday
	sec@ SECSPERDAY / mday!

	mday@ ostime@ OSTime_DayOfYear + !

	auto i
	0 i!

	while (1)
		auto cmp
		[i@]DLLMonthDays@ cmp!

		if (i@ 1 ==)
			if (year@ 3 & ~~)
				29 cmp!
			end
		end

		if (mday@ cmp@ <)
			break
		end

		cmp@ mday -=

		1 i +=
	end

	i@ ostime@ OSTime_Month + !

	mday@ 1 + ostime@ OSTime_DayOfMonth + !
	SECSPERDAY sec %=
	sec@ SECSPERHOUR / ostime@ OSTime_Hour + !
	SECSPERHOUR sec %=
	sec@ SECSPERMIN / ostime@ OSTime_Minute + !
	sec@ SECSPERMIN % ostime@ OSTime_Second + !

	0 ostime@ OSTime_IsDST + !
end

fn OSTimePrint { ostime showyear -- }
	ostime@ OSTime_DayOfMonth + @
	[ostime@ OSTime_Month + @]DLLMonthNames@
	"%s %-2d " Printf

	if (showyear@)
		ostime@ OSTime_Year + @ " %-d " Printf
	end else
		ostime@ OSTime_Minute + @
		ostime@ OSTime_Hour + @
		"%02d:%02d " Printf
	end
end

fn OSDatePrint { ostime -- }
	auto offset
	OSTimeZoneGet drop offset!

	auto tzname
	32 alloc tzname!

	offset@ // offset
	tzname@ // namebuf
	OSTimeZoneOffsetToName

	ostime@ OSTime_Year + @
	tzname@
	ostime@ OSTime_Second + @
	ostime@ OSTime_Minute + @
	ostime@ OSTime_Hour + @
	ostime@ OSTime_DayOfMonth + @
	[ostime@ OSTime_Month + @]DLLMonthNames@
	[ostime@ OSTime_DayOfWeek + @]DLLDayNames@
	"%s %s %-2d %02d:%02d:%02d %s %d\n" Printf
end

fn OSMonthNameToIndex { month -- index }
	0 index!

	while ([index@]DLLMonthNames@ -1 ~=)
		if ([index@]DLLMonthNames@ month@ DLLStringCompareCaseInsensitive)
			return
		end

		1 index +=
	end

	-1 index!
end

fn DLLParseUTCOffset { str -- offset ok }
	if (str@ gb ~~)
		0 offset!
		0 ok!
		return
	end

	auto sign

	if (str@ gb '+' ==)
		1 sign!
	end elseif (str@ gb '-' ==)
		0 sign!
	end else
		-1 ok!
		return
	end

	1 str +=

	auto hr
	16 alloc hr!

	0 hr@ sb

	auto min
	16 alloc min!

	0 min@ sb

	auto switched
	0 switched!

	auto cur
	hr@ cur!

	while (str@ gb)
		if (str@ gb ':' ==)
			if (switched@)
				-1 ok!
				return
			end

			1 switched!

			0 cur@ sb

			min@ cur!
		end elseif (str@ gb '0' >=
					str@ gb '9' <= &&)

			str@ gb cur@ sb
			1 cur +=
		end else
			-1 ok!
			return
		end

		1 str +=
	end

	0 cur@ sb

	// trim leading zeroes so as not to look like octal

	while (hr@ gb '0' ==)
		1 hr +=
	end

	while (min@ gb '0' ==)
		1 min +=
	end

	hr@ atoi SECSPERHOUR * offset!
	min@ atoi SECSPERMIN * offset +=

	if (sign@ ~~)
		0 offset@ - offset!
	end

	0 ok!
end

fn OSTimeZoneNameToOffset { name -- offset ok }
	if (name@ "UTC" 3 strncmp)
		name@ 3 + DLLParseUTCOffset ok! offset!
		return
	end elseif (name@ "GMT" 3 strncmp)
		name@ 3 + DLLParseUTCOffset ok! offset!
		return
	end

	auto tz
	DLLTimeZones tz!

	while (tz@ DLLTimeZone_Name + @ -1 ~=)
		if (name@ tz@ DLLTimeZone_Name + @ strcmp)
			tz@ DLLTimeZone_Offset + @ offset!

			0 ok!

			return
		end

		DLLTimeZone_SIZEOF tz +=
	end

	-1 ok!
end

fn OSTimeZoneOffsetToName { offset namebuf -- }
	auto tz
	DLLTimeZones tz!

	while (tz@ DLLTimeZone_Name + @ -1 ~=)
		if (offset@ tz@ DLLTimeZone_Offset + @ ==)
			namebuf@ // dest
			tz@ DLLTimeZone_Name + @ // src
			strcpy

			return
		end

		DLLTimeZone_SIZEOF tz +=
	end

	// just put the name as an offset from UTC

	auto absoffset
	offset@ abs absoffset!

	auto hr
	absoffset@ 3600 / hr!

	auto min
	absoffset@ 60 / 60 % min!

	if (offset@ z<)
		namebuf@ // dest
		"UTC-" // src
		strcpy
	end else
		namebuf@ // dest
		"UTC+" // src
		strcpy
	end

	if (hr@ 10 <)
		namebuf@ namebuf@ strlen + // dest
		"0" // src
		strcpy
	end

	hr@ // n
	namebuf@ namebuf@ strlen + // str
	itoa

	if (min@)
		namebuf@ namebuf@ strlen + // dest
		":" // src
		strcpy

		if (min@ 10 <)
			namebuf@ namebuf@ strlen + // dest
			"0" // src
			strcpy
		end

		min@ // n
		namebuf@ namebuf@ strlen + // str
		itoa
	end
end

fn OSTimeZoneEnumerate { context func -- ok }
	0 ok!

	auto tz
	DLLTimeZones tz!

	while (tz@ DLLTimeZone_Name + @ -1 ~=)
		context@ // context
		tz@ DLLTimeZone_Name + @ // name
		tz@ DLLTimeZone_Offset + @ // offset
		func@ OSTimeZoneEnumerateF ok!

		if (ok@)
			return
		end

		DLLTimeZone_SIZEOF tz +=
	end
end