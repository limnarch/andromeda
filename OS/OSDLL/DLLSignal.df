//
// Implements userspace signal dispatching.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OSCalls.h"
#include "<ll>/OSDLL/OSMap.h"
#include "<ll>/OSDLL/OSAccess.h"
#include "<ll>/OSDLL/OSAbort.h"
#include "<ll>/OSDLL/OSObject.h"
#include "<ll>/OSDLL/OSStatus.h"
#include "<ll>/OSDLL/OSProcess.h"
#include "<ll>/OSDLL/OSFile.h"
#include "<ll>/OSDLL/OSSignal.h"
#include "<ll>/OSDLL/OSContext.h"
#include "<ll>/OSDLL/OSFastMutex.h"
#include "<ll>/OSDLL/OSConsoleControl.h"

#include "OSDLL.h"

table DLLSignalMessages
	0 // OSSIGNAL_NONE
	0 // OSSIGNAL_HUP
	0 // OSSIGNAL_INT
	"Quit" // OSSIGNAL_QUIT
	"Illegal instruction" // OSSIGNAL_ILL
	"Trap" // OSSIGNAL_TRAP
	"Abort" // OSSIGNAL_ABRT
	"Emulator trap" // OSSIGNAL_EMT
	"Floating point exception" // OSSIGNAL_FPE
	0 // OSSIGNAL_KILL
	"Bus error" // OSSIGNAL_BUS
	"Segmentation fault" // OSSIGNAL_SEGV
	"Bad syscall" // OSSIGNAL_SYS
	0 // OSSIGNAL_PIPE
	0 // OSSIGNAL_ALRM
	0 // OSSIGNAL_TERM
	0 // OSSIGNAL_URG
	0 // OSSIGNAL_STOP
	0 // OSSIGNAL_TSTP
	0 // OSSIGNAL_CONT
	0 // OSSIGNAL_CHLD
	0 // OSSIGNAL_TTIN
	0 // OSSIGNAL_TTOU
	0 // OSSIGNAL_IO
	0 // OSSIGNAL_XCPU
	0 // OSSIGNAL_XFSZ
	0 // OSSIGNAL_VTALRM
	0 // OSSIGNAL_PROF
	0 // OSSIGNAL_WINCH
	0 // OSSIGNAL_INFO
	0 // OSSIGNAL_USR1
	0 // OSSIGNAL_USR2
endtable

table DLLSignalDefaultActions
	0 // OSSIGNAL_NONE
	1 // OSSIGNAL_HUP
	1 // OSSIGNAL_INT
	2 // OSSIGNAL_QUIT
	2 // OSSIGNAL_ILL
	2 // OSSIGNAL_TRAP
	2 // OSSIGNAL_ABRT
	2 // OSSIGNAL_EMT
	2 // OSSIGNAL_FPE
	1 // OSSIGNAL_KILL
	2 // OSSIGNAL_BUS
	2 // OSSIGNAL_SEGV
	2 // OSSIGNAL_SYS
	1 // OSSIGNAL_PIPE
	1 // OSSIGNAL_ALRM
	1 // OSSIGNAL_TERM
	0 // OSSIGNAL_URG
	3 // OSSIGNAL_STOP
	3 // OSSIGNAL_TSTP
	4 // OSSIGNAL_CONT
	0 // OSSIGNAL_CHLD
	3 // OSSIGNAL_TTIN
	3 // OSSIGNAL_TTOU
	0 // OSSIGNAL_IO
	2 // OSSIGNAL_XCPU
	2 // OSSIGNAL_XFSZ
	0 // OSSIGNAL_VTALRM
	1 // OSSIGNAL_PROF
	0 // OSSIGNAL_WINCH
	0 // OSSIGNAL_INFO
	1 // OSSIGNAL_USR1
	1 // OSSIGNAL_USR2
endtable

table DLLSignalNames
	"SIGNONE" // OSSIGNAL_NONE
	"SIGHUP"  // OSSIGNAL_HUP
	"SIGINT"  // OSSIGNAL_INT
	"SIGQUIT" // OSSIGNAL_QUIT
	"SIGILL"  // OSSIGNAL_ILL
	"SIGTRAP" // OSSIGNAL_TRAP
	"SIGABRT" // OSSIGNAL_ABRT
	"SIGEMT"  // OSSIGNAL_EMT
	"SIGFPE"  // OSSIGNAL_FPE
	"SIGKILL" // OSSIGNAL_KILL
	"SIGBUS"  // OSSIGNAL_BUS
	"SIGSEGV" // OSSIGNAL_SEGV
	"SIGSYS"  // OSSIGNAL_SYS
	"SIGPIPE" // OSSIGNAL_PIPE
	"SIGALRM" // OSSIGNAL_ALRM
	"SIGTERM" // OSSIGNAL_TERM
	"SIGURG"  // OSSIGNAL_URG
	"SIGSTOP" // OSSIGNAL_STOP
	"SIGTSTP" // OSSIGNAL_TSTP
	"SIGCONT" // OSSIGNAL_CONT
	"SIGCHLD" // OSSIGNAL_CHLD
	"SIGTTIN" // OSSIGNAL_TTIN
	"SIGTTOU" // OSSIGNAL_TTOU
	"SIGIO"   // OSSIGNAL_IO
	"SIGXCPU" // OSSIGNAL_XCPU
	"SIGXFSZ" // OSSIGNAL_XFSZ
	"SIGVTALRM" // OSSIGNAL_VTALRM
	"SIGPROF"   // OSSIGNAL_PROF
	"SIGWINCH"  // OSSIGNAL_WINCH
	"SIGINFO" // OSSIGNAL_INFO
	"SIGUSR1" // OSSIGNAL_USR1
	"SIGUSR2" // OSSIGNAL_USR2
endtable

fn OSSignalGetName { signum -- signame ok }
	STATUS_NOT_A_SIGNAL ok!

	if (signum@ ~~)
		return
	end

	if (signum@ OSSIGNALCOUNT >=)
		return
	end

	[signum@]DLLSignalNames@ signame!
	0 ok!
end

fn OSSignalGetNumber { signame -- signum ok }
	STATUS_NOT_A_SIGNAL ok!

	1 signum!

	while (signum@ OSSIGNALCOUNT <)
		if (signame@ [signum@]DLLSignalNames@ strcmp)
			0 ok!
			return
		end

		1 signum +=
	end
end

const DEFAULTSIGNALMASK 0xCF66FFFF

fn OSSignalSetDefaults { -- }
	auto sign
	0 sign!

	while (sign@ OSSIGNALCOUNT <)
		if (DEFAULTSIGNALMASK 1 sign@ << &)
			OSSIGNALACTION_DEFAULT // action
			sign@ // signum
			OSSignalSetAction drop
		end else
			OSSIGNALACTION_IGNORE // action
			sign@ // signum
			OSSignalSetAction drop
		end

		1 sign +=
	end
end

fn OSSignalSetAction { action signum -- oldaction }
	if (signum@ ~~)
		return
	end

	if (signum@ OSSIGNALCOUNT >=)
		return
	end

	if (action@ OSSIGNALACTION_IGNORE ==)
		signum@ // signal
		OSCURRENTTHREAD // threadhandle
		OSThreadMaskSignal drop

		action@ OSThreadCurrentTEB OSThreadEnvironmentBlock_SignalActions + signum@ 2 << + !
	end else
		action@ OSThreadCurrentTEB OSThreadEnvironmentBlock_SignalActions + signum@ 2 << + !

		signum@ // signal
		OSCURRENTTHREAD // threadhandle
		OSThreadUnmaskSignal drop
	end
end

fn DLLMessage { message -- }
	auto query
	OSObjectQuery_SIZEOF alloc query!

	auto ok
	OSCURRENTTHREAD // handle
	query@ // query
	OSQuery ok!

	if (ok@ ~~)
		"?" threadname!
	end

	auto threadname
	query@ OSObjectQuery_Name + threadname!

	threadname@
	message@
	OSGetImageName
	"%s: %s (thread: %s)\n" OSGetStdErr FPrintf
end

var DLLAlreadyDied 0

fn DLLSignalDispatchHL { context signum -- }
	auto ok

	auto action
	OSThreadCurrentTEB OSThreadEnvironmentBlock_SignalActions + signum@ 2 << + @ action!

	auto defaultaction
	[signum@]DLLSignalDefaultActions@ defaultaction!

	if (defaultaction@ 2 ==)
		// this is an error signal.
		// unmask the signal before doing anything else.

		signum@ // signal
		OSCURRENTTHREAD // threadhandle
		OSThreadUnmaskSignal drop
	end

	if (action@ OSSIGNALACTION_DEFAULT ==)
		if (defaultaction@ 1 ==)
			// terminate
			signum@ 128 + OSExit
		end elseif (defaultaction@ 2 ==)
			// print debug information/coredump and terminate

			if (DLLAlreadyDied@)
				if (DLLProcessInit@)
					STATUS_FAULT_WHILE_STARTING // activationstatus
					OSProcessSignalActivation drop
				end

				-1 OSExit
			end

			1 DLLAlreadyDied!

			auto message
			[signum@]DLLSignalMessages@ message!

			if (message@ ~~)
				"Exception" message!
			end

			auto oldmode
			0 // arg2
			OSCONSOLEIOCONTROL_RESETMODE // arg1
			OSGetStdErr // filehandle
			OSIOControl ok! oldmode!

			message@ DLLMessage

			context@ DLLDebugTrace

			if (ok@ ~~)
				oldmode@ // arg2
				OSCONSOLEIOCONTROL_SETMODE // arg1
				OSGetStdErr // filehandle
				OSIOControl drop drop
			end

			0 ok!

			if (DLLProcessInit@)
				STATUS_FAULT_WHILE_STARTING // activationstatus
				OSProcessSignalActivation drop
			end

			signum@ 128 + OSExit
		end elseif (defaultaction@ 3 ==)
			// stop
		end
	end elseif (action@ OSSIGNALACTION_IGNORE ~=)
		if (action@ OSPAGESIZE >=)
			context@ // context
			signum@ // signum
			action@ OSSignalHandler
		end
	end

	if (OSThreadCurrentTEB OSThreadEnvironmentBlock_SignalActions + signum@ 2 << + @ OSSIGNALACTION_IGNORE ==)
		// don't unmask it
		-1 signum!
	end

	signum@ context@ OSContinue

	// if OSContinue returned, something bad happened.
	"DLLSignalDispatch: couldn't OSContinue\n" OSError
end