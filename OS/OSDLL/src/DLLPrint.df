//
// Implements standard IO support.
//

#include "<df>/dragonfruit.h"

#include "<inc>/OSMap.h"
#include "<inc>/OSCalls.h"
#include "<inc>/OSFile.h"
#include "<inc>/OSObject.h"
#include "<inc>/OSWait.h"
#include "<inc>/OSStatus.h"
#include "<inc>/OSSignal.h"
#include "<inc>/OSProcess.h"
#include "<inc>/OSFastMutex.h"
#include "<inc>/OSStream.h"

#include "OSDLL.h"

var DLLStdInStream 0
public DLLStdInStream

var DLLStdOutStream 0
public DLLStdOutStream

var DLLStdErrStream 0
public DLLStdErrStream

fn OSGetStdIn { -- fd }
	OSPEB OSPEBs_StdIn + @ fd!
end

fn OSGetStdOut { -- fd }
	OSPEB OSPEBs_StdOut + @ fd!
end

fn OSGetStdErr { -- fd }
	OSPEB OSPEBs_StdErr + @ fd!
end

fn OSGetStdInStream { -- stream }
	DLLStdInStream@ stream!
end

fn OSGetStdOutStream { -- stream }
	DLLStdOutStream@ stream!
end

fn OSGetStdErrStream { -- stream }
	DLLStdErrStream@ stream!
end

fn OSSetStdIn { fd -- }
	fd@ OSPEB OSPEBs_StdIn + !
	fd@ DLLStdInStream!
end

fn OSSetStdOut { fd -- }
	if (OSPEB OSPEBs_StdOut + @ fd@ ~=)
		if (DLLStdOutStream@ DLLNOSTREAM ~=)
			DLLStdOutStream@ OSStreamClose drop
		end
		
		fd@ OSPEB OSPEBs_StdOut + !

		auto ok

		0 // flags
		fd@ // filehandle
		OSStreamObjectCreate ok! DLLStdOutStream!

		if (ok@)
			DLLNOSTREAM DLLStdOutStream!
			DLLNOSTREAM OSPEB OSPEBs_StdOut + !

			ok@ OSStatusGetName "OSSetStdOut: %s\n" OSAbort
		end
	end
end

fn OSSetStdErr { fd -- }
	fd@ OSPEB OSPEBs_StdErr + !
	fd@ DLLStdErrStream!
end

fn OSAbort { ... fmt -- }
	argv
	argc@
	fmt@
	OSPEB OSPEBs_StdErr + @
	VFPrintf

	OSSIGNALACTION_DEFAULT // action
	OSSIGNAL_ABRT // signum
	OSSignalSetAction drop

	// send OSSIGNAL_ABRT to ourselves

	OSSIGNAL_ABRT // signal
	OSThreadException drop

	-1 OSExit
end

fn OSError { ... fmt -- }
	argv
	argc@
	fmt@
	OSPEB OSPEBs_StdErr + @
	VFPrintf

	-1 OSExit
end

fn FPuts { fd s -- }
	while (s@ gb)
		fd@ s@ gb FPutc
		1 s +=
	end
end

fn VPrintf { argvt argcn fmt -- }
	argvt@
	argcn@
	fmt@
	DLLStdOutStream@
	VFPrintf
end

fn OSFlushLine { -- }
	if (OSPEB OSPEBs_StdOut + @ DLLNOSTREAM ==)
		return
	end

	0 // purge
	DLLStdOutStream@ // stream
	OSStreamFlush drop
end

fn FPutc { fd c -- }
	if (fd@ DLLNOSTREAM ==)
		c@ OSConsolePutCharacter drop
	end else
		c@ fd@ OSStreamWriteCharacter drop
	end
end

fn Putc { c -- }
	DLLStdOutStream@
	c@
	FPutc
end

fn Puts { s -- }
	while (s@ gb)
		s@ gb Putc
		1 s +=
	end
end

fn OSReadline { s max -- eof }
	OSFlushLine

	auto bytes
	0 bytes!

	0 eof!

	auto ok
	OSWAIT_TIMEOUTINFINITE // timeout
	0 // flags
	max@ // length
	s@ // buffer
	OSPEB OSPEBs_StdIn + @ // filehandle
	OSFileRead ok! bytes!

	if (ok@)
		ok@ OSStatusGetName "OSReadline: %s\n" OSAbort
	end

	if (bytes@ 0 ==)
		1 eof!
		return
	end

	if (s@ bytes@ 1 - + gb '\n' ~=)
		0 s@ sb
		return
	end

	0 s@ bytes@ 1 - + sb
end

fn Gets { s max -- }
	auto eof
	1 eof!

	while (eof@)
		s@ max@ OSReadline eof!
	end
end