//
// Implements the userspace heap.
// Allocates in steps of 32 bytes.
//

#include "<df>/dragonfruit.h"

#include "<inc>/OSCalls.h"
#include "<inc>/OSMap.h"
#include "<inc>/OSAccess.h"
#include "<inc>/OSFile.h"
#include "<inc>/OSAbort.h"
#include "<inc>/OSFastMutex.h"
#include "<inc>/OSObject.h"
#include "<inc>/OSStatus.h"

#include "OSDLL.h"

buffer DLLHeapMutex OSFastMutex_SIZEOF

table DLLHeapBucketListHeads[(DLLHEAPBLOCKBUCKETS 1 +)]

var DLLHeapExtensionSize 1 // in units of pages

const DLLHEAPEXTENSIONMAXIMUM 8

fn DLLHeapInit { -- }
	"DLLHeapMutex" // name
	DLLHeapMutex // fastmutex
	OSFastMutexInitialize
end

fn OSHeapAllocate { bytes -- ptr ok }
	if (bytes@ 0 ==)
		"OSHeapAllocate: 0 byte allocation\n" OSAbort
	end

	auto mutex
	DLLHeapMutex mutex!

	if (bytes@ DLLAllocatedHeapBlock_SIZEOF + OSPAGESIZE DLLHEAPBLOCKMINSIZE - >=)
		// do a direct private memory allocation

		bytes@ DLLDirectHeapBlock_SIZEOF + // length
		HEAPSTART // startva
		OSCURRENTPROCESS // processhandle
		PAGEACCESS_READ PAGEACCESS_WRITE | // pageprotection
		0 // flags
		OSAllocate ok! ptr!

		if (ok@)
			return
		end

		DLLHEAPDIRECTMAGIC ptr@ DLLDirectHeapBlock_Magic + si
		bytes@ DLLDirectHeapBlock_SIZEOF + OSPAGEOFFSETMASK + OSPAGENUMBERMASK & ptr@ DLLDirectHeapBlock_Size + !

		DLLDirectHeapBlock_SIZEOF ptr +=

		return
	end

	DLLAllocatedHeapBlock_SIZEOF bytes +=

	auto n

	auto bucketindex
	bytes@ DLLHEAPBLOCKSIZEMASK + DLLHEAPBLOCKSIZESHIFT >> bucketindex!

	bucketindex@ DLLHEAPBLOCKSIZESHIFT << bytes!

	mutex@ OSFastMutexAcquire

	[bucketindex@]DLLHeapBucketListHeads@ ptr!

	if (ptr@)
		// there's a properly sized block already

		if (ptr@ DLLHeapBlock_Magic + gi DLLHEAPFREEMAGIC ~=)
			ptr@ DLLHeapBlock_Magic + gi "OSHeapAllocate: bad magic 0x%04x\n" OSAbort
		end

		if (ptr@ DLLHeapBlock_BucketIndex + gb bucketindex@ ~=)
			bucketindex@ ptr@ DLLHeapBlock_BucketIndex + gb "OSHeapAllocate: bad bucketindex %d (expected %d)\n" OSAbort
		end

		// set magic to indicate allocated
		DLLHEAPSWIFTMAGIC ptr@ DLLHeapBlock_Magic + si

		// unlink from free list
		ptr@ DLLHeapBlock_NextFree + @ n!

		if (n@)
			0 n@ DLLHeapBlock_PrevFree + !
		end

		n@ [bucketindex@]DLLHeapBucketListHeads!

		mutex@ OSFastMutexRelease

		// return block
		DLLAllocatedHeapBlock_SIZEOF ptr +=

		0 ok!

		return
	end

	// try to find a bigger block that can be split

	auto newbucketindex

	auto newblock

	auto i
	DLLHEAPBLOCKBUCKETS i!

	while (i@ bucketindex@ >)
		[i@]DLLHeapBucketListHeads@ ptr!

		if (ptr@)
			// found one to split, do that

			if (ptr@ DLLHeapBlock_Magic + gi DLLHEAPFREEMAGIC ~=)
				ptr@ DLLHeapBlock_Magic + gi "OSHeapAllocate: bad magic 2 0x%04x\n" OSAbort
			end

			if (ptr@ DLLHeapBlock_BucketIndex + gb i@ ~=)
				i@ ptr@ DLLHeapBlock_BucketIndex + gb "OSHeapAllocate: bad bucketindex 2 %d (expected %d)\n" OSAbort
			end

			// remove from free list
			ptr@ DLLHeapBlock_NextFree + @ n!

			if (n@)
				0 n@ DLLHeapBlock_PrevFree + !
			end

			n@ [i@]DLLHeapBucketListHeads!

			// set new bucketindex in old block header
			// already has correct lastbucketindex
			bucketindex@ ptr@ DLLHeapBlock_BucketIndex + sb
			DLLHEAPSWIFTMAGIC ptr@ DLLHeapBlock_Magic + si

			// calculate index of bucket to place split block in
			i@ bucketindex@ - newbucketindex!

			ptr@ bytes@ + newblock!

			// create new block header
			bucketindex@ newblock@ DLLHeapBlock_LastBucketIndex + sb
			newbucketindex@ newblock@ DLLHeapBlock_BucketIndex + sb
			DLLHEAPFREEMAGIC newblock@ DLLHeapBlock_Magic + si

			// update next block to point to new block unless it is page
			// -aligned which means theres no next block
			newblock@ newbucketindex@ DLLHEAPBLOCKSIZESHIFT << + n!

			if (n@ OSPAGEOFFSETMASK &)
				newbucketindex@ n@ DLLHeapBlock_LastBucketIndex + sb
			end

			// insert in new bucket list
			[newbucketindex@]DLLHeapBucketListHeads@ n!

			if (n@)
				newblock@ n@ DLLHeapBlock_PrevFree + !
			end

			n@ newblock@ DLLHeapBlock_NextFree + !
			0 newblock@ DLLHeapBlock_PrevFree + !

			newblock@ [newbucketindex@]DLLHeapBucketListHeads!

			mutex@ OSFastMutexRelease

			// return block
			DLLAllocatedHeapBlock_SIZEOF ptr +=

			0 ok!

			return
		end

		1 i -=
	end

	// no sufficient block! allocate a heap extension with the page-aligned
	// allocator and initialize each page to be 1 page-sized block on the
	// highest free list, except for the first page, who we will yoink our
	// requested block from.

	auto pages
	DLLHeapExtensionAllocate ok! ptr! pages!

	if (ok@)
		mutex@ OSFastMutexRelease

		return
	end

	// set bucketindex in our block header
	pages@ ptr@ DLLHeapBlock_LastBucketIndex + sb
	bucketindex@ ptr@ DLLHeapBlock_BucketIndex + sb
	DLLHEAPSWIFTMAGIC ptr@ DLLHeapBlock_Magic + si

	// calculate index of bucket to place split block in
	OSPAGESIZE DLLHEAPBLOCKSIZESHIFT >> bucketindex@ - newbucketindex!

	ptr@ bytes@ + newblock!

	// create free block header
	bucketindex@ newblock@ DLLHeapBlock_LastBucketIndex + sb
	newbucketindex@ newblock@ DLLHeapBlock_BucketIndex + sb
	DLLHEAPFREEMAGIC newblock@ DLLHeapBlock_Magic + si

	// insert in free list
	[newbucketindex@]DLLHeapBucketListHeads@ n!

	if (n@)
		newblock@ n@ DLLHeapBlock_PrevFree + !
	end

	n@ newblock@ DLLHeapBlock_NextFree + !
	0 newblock@ DLLHeapBlock_PrevFree + !

	newblock@ [newbucketindex@]DLLHeapBucketListHeads!

	// initialize each remaining page as 1 block on the highest free list

	1 i!
	ptr@ OSPAGESIZE + newblock!

	while (i@ pages@ <)
		0 newblock@ DLLHeapBlock_LastBucketIndex + sb
		DLLHEAPBLOCKBUCKETS newblock@ DLLHeapBlock_BucketIndex + sb
		DLLHEAPFREEMAGIC newblock@ DLLHeapBlock_Magic + si

		[DLLHEAPBLOCKBUCKETS]DLLHeapBucketListHeads@ n!

		if (n@)
			newblock@ n@ DLLHeapBlock_PrevFree + !
		end

		n@ newblock@ DLLHeapBlock_NextFree + !
		0 newblock@ DLLHeapBlock_PrevFree + !

		newblock@ [DLLHEAPBLOCKBUCKETS]DLLHeapBucketListHeads!

		OSPAGESIZE newblock +=
		1 i +=
	end

	mutex@ OSFastMutexRelease

	DLLAllocatedHeapBlock_SIZEOF ptr +=

	0 ok!
end

fn OSHeapFree { ptr -- }
	auto mutex
	DLLHeapMutex mutex!

	if (ptr@ 2 - gi DLLHEAPDIRECTMAGIC ==)
		// directly unmap.

		DLLDirectHeapBlock_SIZEOF ptr -=

		ptr@ DLLDirectHeapBlock_Size + @ // length
		ptr@ // vaddr
		OSCURRENTPROCESS // processhandle
		OSUnmapView drop

		return
	end

	DLLAllocatedHeapBlock_SIZEOF ptr -=

	// check if the block has free blocks physically to its left or right.
	// if so, merge.

	// then, place the resulting block on the relevant free list.

	auto bucketindex
	auto lastbucketindex
	auto nb
	auto next
	auto prev

	ptr@ DLLHeapBlock_BucketIndex + gb bucketindex!

	mutex@ OSFastMutexAcquire

	if (ptr@ OSPAGEOFFSETMASK &)
		// we're not at the start of the page, check left

		ptr@ DLLHeapBlock_LastBucketIndex + gb lastbucketindex!

		ptr@ lastbucketindex@ DLLHEAPBLOCKSIZESHIFT << - nb!

		if (nb@ DLLHeapBlock_BucketIndex + gb lastbucketindex@ ~=)
			lastbucketindex@ nb@ DLLHeapBlock_BucketIndex + gb "OSHeapFree: bad bucketindex %d (expected %d)\n" OSAbort
		end

		if (nb@ DLLHeapBlock_Magic + gi DLLHEAPFREEMAGIC ==)
			// free! merge left.

			// remove from old free list
			nb@ DLLHeapBlock_PrevFree + @ prev!

			nb@ DLLHeapBlock_NextFree + @ next!

			if (prev@)
				next@ prev@ DLLHeapBlock_NextFree + !
			end else
				next@ [lastbucketindex@]DLLHeapBucketListHeads!
			end

			if (next@)
				prev@ next@ DLLHeapBlock_PrevFree + !
			end

			// turn block into bigger block
			lastbucketindex@ bucketindex +=

			bucketindex@ nb@ DLLHeapBlock_BucketIndex + sb

			// invalidate magic number of old block
			0 ptr@ DLLHeapBlock_Magic + si

			// set block pointer to last block
			nb@ ptr!

			// set right block lastbucketindex to our new one.
			// we might be about to merge with it but its easier to just do
			// this anyway.

			ptr@ bucketindex@ DLLHEAPBLOCKSIZESHIFT << + nb!

			if (nb@ OSPAGEOFFSETMASK &)
				bucketindex@ nb@ DLLHeapBlock_LastBucketIndex + sb
			end
		end
	end

	ptr@ bucketindex@ DLLHEAPBLOCKSIZESHIFT << + nb!

	if (nb@ OSPAGEOFFSETMASK &)
		// next block exists, see if it can be merged

		nb@ DLLHeapBlock_BucketIndex + gb lastbucketindex!

		if (nb@ DLLHeapBlock_Magic + gi DLLHEAPFREEMAGIC ==)
			// free! merge right

			// remove from old free list
			nb@ DLLHeapBlock_PrevFree + @ prev!

			nb@ DLLHeapBlock_NextFree + @ next!

			if (prev@)
				next@ prev@ DLLHeapBlock_NextFree + !
			end else
				next@ [lastbucketindex@]DLLHeapBucketListHeads!
			end

			if (next@)
				prev@ next@ DLLHeapBlock_PrevFree + !
			end

			// turn block into bigger block
			lastbucketindex@ bucketindex +=

			bucketindex@ ptr@ DLLHeapBlock_BucketIndex + sb

			// invalidate magic number of old block
			0 nb@ DLLHeapBlock_Magic + si

			// set right block lastbucketindex to our new one.

			ptr@ bucketindex@ DLLHEAPBLOCKSIZESHIFT << + nb!

			if (nb@ OSPAGEOFFSETMASK &)
				bucketindex@ nb@ DLLHeapBlock_LastBucketIndex + sb
			end
		end
	end

	// set free magic
	DLLHEAPFREEMAGIC ptr@ DLLHeapBlock_Magic + si

	// put on relevant free list
	[bucketindex@]DLLHeapBucketListHeads@ nb!

	if (nb@)
		ptr@ nb@ DLLHeapBlock_PrevFree + !
	end

	nb@ ptr@ DLLHeapBlock_NextFree + !
	0 ptr@ DLLHeapBlock_PrevFree + !

	ptr@ [bucketindex@]DLLHeapBucketListHeads!

	if (ptr@ OSPAGEOFFSETMASK & ~~)
		// this free created a page-sized block, see if we can free the heap
		// extension.
		ptr@ DLLHeapExtensionFree
	end

	mutex@ OSFastMutexRelease
end

fn DLLHeapExtensionAllocate { -- pages ptr ok }
	DLLHeapExtensionSize@ pages!

	pages@ OSPAGESHIFT << // length
	HEAPSTART // startva
	OSCURRENTPROCESS // processhandle
	PAGEACCESS_READ PAGEACCESS_WRITE | // pageprotection
	0 // flags
	OSAllocate ok! ptr!

	if (ok@)
		if (ok@ STATUS_VM_QUOTA_EXCEEDED ~= ok@ STATUS_COMMIT_EXCEEDED ~= &&)
			return
		end

		1 DLLHeapExtensionSize!

		if (pages@ 1 ==)
			return
		end

		1 pages!

		OSPAGESIZE // length
		HEAPSTART // startva
		OSCURRENTPROCESS // processhandle
		PAGEACCESS_READ PAGEACCESS_WRITE | // pageprotection
		0 // flags
		OSAllocate ok! ptr!

		if (ok@)
			return
		end
	end else
		1 DLLHeapExtensionSize +=

		if (DLLHeapExtensionSize@ DLLHEAPEXTENSIONMAXIMUM >)
			DLLHEAPEXTENSIONMAXIMUM DLLHeapExtensionSize!
		end
	end
end

fn DLLHeapExtensionFree { ptr -- }
	// try to free the heap extension this pointer to a page-aligned heap
	// block is part of. this is done through a series of extremely cursed
	// tricks to verify that the entire extension is free.

	// first, seek to the page at the start of the extension.

	while (ptr@ DLLHeapBlock_LastBucketIndex + gb ~~)
		OSPAGESIZE ptr -=
	end

	// now remember this.

	auto extensionstart
	ptr@ extensionstart!

	auto extensionsize
	extensionstart@ DLLHeapBlock_LastBucketIndex + gb extensionsize!

	// now go forward thru the extension to verify that all of the pages are
	// empty.

	while (extensionsize@)
		if (ptr@ DLLHeapBlock_BucketIndex + gb DLLHEAPBLOCKBUCKETS ~=)
			// not empty. can't free.
			return
		end

		if (ptr@ DLLHeapBlock_Magic + gi DLLHEAPFREEMAGIC ~=)
			return
		end

		1 extensionsize -=
		OSPAGESIZE ptr +=
	end

	// all of the pages are verified to be empty. now we need to unlink them
	// from the free list.

	extensionstart@ ptr!
	extensionstart@ DLLHeapBlock_LastBucketIndex + gb extensionsize!

	while (extensionsize@)
		auto p
		ptr@ DLLHeapBlock_PrevFree + @ p!

		if (p@)
			ptr@ DLLHeapBlock_NextFree + @ p@ DLLHeapBlock_NextFree + !
		end else
			ptr@ DLLHeapBlock_NextFree + @ [DLLHEAPBLOCKBUCKETS]DLLHeapBucketListHeads!
		end

		ptr@ DLLHeapBlock_NextFree + @ p!

		if (p@)
			ptr@ DLLHeapBlock_PrevFree + @ p@ DLLHeapBlock_PrevFree + !
		end

		1 extensionsize -=
		OSPAGESIZE ptr +=
	end

	// now we can unmap the extension.

	extensionstart@ DLLHeapBlock_LastBucketIndex + gb OSPAGESHIFT << // length
	extensionstart@ // vaddr
	OSCURRENTPROCESS // processhandle
	OSUnmapView drop
end

fn Malloc { size -- ptr }
	auto ok
	size@ OSHeapAllocate ok! ptr!

	if (ok@)
		ERR ptr!
	end
end

fn Free { ptr -- }
	ptr@ OSHeapFree
end

fn Calloc { size -- ptr }
	size@ Malloc ptr!

	if (ptr@ ERR ==)
		return
	end

	ptr@ size@ 0 memset
end