//
// Implements the interlocked OSFastMutex for the limn2600 architecture.
//

#include "<df>/dragonfruit.h"

#include "<inc>/OSCalls.h"
#include "<inc>/OSMap.h"
#include "<inc>/OSFile.h"
#include "<inc>/OSAbort.h"
#include "<inc>/OSAccess.h"
#include "<inc>/OSObject.h"
#include "<inc>/OSStatus.h"
#include "<inc>/OSModule.h"
#include "<inc>/OSAlloc.h"
#include "<inc>/OSWait.h"
#include "<inc>/OSFastMutex.h"

#include "../OSDLL.h"

asm "

;a0 - fastmutex
OSFastMutexAcquire:
.global OSFastMutexAcquire
	addi t0, a0, OSFastMutex_LockCount
	
.inc:
	mov  t1, locked [t0]
	addi t1, t1, 1
	sc   t2, [t0], t1
	beq  t2, .inc

	bne  t1, .wait

	ret

.wait:
	subi sp, sp, 4
	mov  long [sp], lr

	jal DLLFastMutexWait

	mov  lr, long [sp]
	addi sp, sp, 4
	ret

OSFastMutexRelease:
.global OSFastMutexRelease
	addi t0, a0, OSFastMutex_LockCount
	
.dec:
	mov  t3, locked [t0]
	subi t1, t3, 1
	sc   t2, [t0], t1
	beq  t2, .dec

	bne  t3, .wake

	ret

.wake:
	subi sp, sp, 4
	mov  long [sp], lr

	jal DLLFastMutexWake

	mov  lr, long [sp]
	addi sp, sp, 4
	ret

; shove this stuff in here because why not

; inc ptr -- oldcount
OSInterlockedIncrement:
.global OSInterlockedIncrement
.inc:
	mov  t0, locked [a0]
	add  t1, t0, a1
	sc   t1, [a0], t1
	beq  t1, .inc

	mov  a0, t0

	ret

; dec ptr -- oldcount
OSInterlockedDecrement:
.global OSInterlockedDecrement
.dec:
	mov  t0, locked [a0]
	sub  t1, t0, a1
	sc   t1, [a0], t1
	beq  t1, .dec

	mov  a0, t0
	
	ret

"