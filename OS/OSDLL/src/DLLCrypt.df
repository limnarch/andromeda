//
// Implements support for simple cryptography.
//

#include "<df>/dragonfruit.h"

#include "<inc>/OSCalls.h"
#include "<inc>/OSMap.h"
#include "<inc>/OSAccess.h"
#include "<inc>/OSFile.h"
#include "<inc>/OSObject.h"
#include "<inc>/OSEnvironment.h"
#include "<inc>/OSStatus.h"
#include "<inc>/OSAlloc.h"
#include "<inc>/OSWait.h"
#include "<inc>/OSCrypt.h"

#include "OSDLL.h"

fn OSSimpleCrypt { str salt hash -- }
	// outputs a hash in a buffer that must be at least 16 bytes.

	auto i
	0 i!

	auto bits
	68 alloc bits!

	bits@ // ptr
	68 // size
	0 // word
	memset

	0xFFFF salt &=

	if (salt@ 0xFF & 0 ==)
		salt@ 16 >> salt |=
	end

	auto salthi
	salt@ 8 >> salthi!

	auto saltlo
	salt@ 0xFF & saltlo!

	auto rot
	salthi@ 2 << saltlo@ - 127 & rot!

	auto j

	auto pk

	0 i!
	while (i@ 8 <)
		if (str@ gb 0 ==)
			break
		end

		0 j!
		while (j@ 7 <)
			if (str@ gb 1 j@ << &)
				1 j@ 3 << i@ + bits@ + sb
			end else
				0 j@ 3 << i@ + bits@ + sb
			end

			1 j +=
		end

		if (i@ 2 >> 0 ==)
			saltlo@ pk!
		end else
			salthi@ pk!
		end

		if (pk@ 1 i@ 3 & << &)
			1 i@ 56 + bits@ + sb
		end else
			0 i@ 56 + bits@ + sb
		end

		1 str +=
		1 i +=
	end

	if (saltlo@ 1 &)
		1 bits@ 64 + sb
	end else
		0 bits@ 64 + sb
	end

	if (salthi@ 1 &)
		1 bits@ 65 + sb
	end else
		0 bits@ 65 + sb
	end

	if (rot@ 1 &)
		1 bits@ 66 + sb
	end else
		0 bits@ 66 + sb
	end

	while (rot@)
		65 i!
		while (1)
			if (i@ -1 ==)
				break
			end

			bits@ i@ + gb bits@ i@ + 1 + sb

			1 i -=
		end

		bits@ 66 + gb bits@ sb

		1 rot -=
	end

	0 i!
	while (i@ 12 <)
		auto hq
		0 hq!

		0 j!
		while (j@ 6 <)
			if (bits@ i@ 6 * j@ + + gb)
				1 j@ << hq |=
			end

			1 j +=
		end

		48 hq +=
		if (hq@ '9' >)
			7 hq +=
		end
		if (hq@ 'Z' >)
			6 hq +=
		end

		hq@ hash@ i@ + 2 + sb

		1 i +=
	end

	saltlo@ hash@ sb
	salthi@ hash@ 1 + sb
	0 hash@ 13 + sb
end