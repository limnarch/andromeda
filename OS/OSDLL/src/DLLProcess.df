#include "<df>/dragonfruit.h"

#include "<inc>/OSCalls.h"
#include "<inc>/OSMap.h"
#include "<inc>/OSAccess.h"
#include "<inc>/OSAbort.h"
#include "<inc>/OSObject.h"
#include "<inc>/OSStatus.h"
#include "<inc>/OSProcess.h"
#include "<inc>/OSFile.h"
#include "<inc>/OSSignal.h"

#include "OSDLL.h"

fn OSThreadExit { status -- }
	status@ // status
	OSCURRENTTHREAD // threadhandle
	OSThreadTerminate drop

	while (1)
		1000 OSThreadSleep drop
	end
end

fn OSExit { status -- }
	// send OSSIGNAL_KILL to ourselves

	OSSIGNAL_KILL // signal
	OSCURRENTPROCESS // processhandle
	OSProcessSignal drop

	while (1)
		1000 OSThreadSleep drop
	end
end

fn OSCreationBlockInitialize { creationparams -- }
	creationparams@ // ptr
	OSCreationParams_SIZEOF // size
	0 // word
	memset

	OSNONE creationparams@ OSCreationParams_StdIn + !
	OSNONE creationparams@ OSCreationParams_StdOut + !
	OSNONE creationparams@ OSCreationParams_StdErr + !
end

fn DLLConstructParameters { argcn argvt path fullpath pebaddr -- ok }
	0 ok!

	path@ // path
	fullpath@ // canon
	OSFILEPATHMAX // bufsize
	OSRealPath ok!

	if (ok@)
		// just use relative path then
		path@ fullpath!
	end

	auto paramtable
	pebaddr@ OSPEBs_Parameters + paramtable!

	auto paramend
	paramtable@ OSPARAMETERSIZE + paramend!

	1 argcn +=

	auto paramstring
	paramtable@ argcn@ 2 << + paramstring!

	auto rstring
	OSPEB OSPEBs_Parameters + argcn@ 2 << + rstring!

	auto str

	auto i
	0 i!

	while (i@ argcn@ <)
		if (i@ 0 ==)
			fullpath@ str!
		end else
			argvt@ i@ 1 - 2 << + @ str!
		end

		auto len
		str@ strlen 1 + len!

		if (paramstring@ len@ + paramend@ >)
			STATUS_ARGUMENTS_TOO_LONG ok!

			return
		end

		paramstring@ // dest
		str@ // src
		strcpy

		rstring@ paramtable@!

		4 paramtable +=
		len@ rstring +=
		len@ paramstring +=
		1 i +=
	end

	argcn@ pebaddr@ OSPEBs_ParameterCount + !
end

fn DLLPEBInitialize { argcn argvt path creationflags creationparams pebaddr processhandle -- ok }
	if (path@ gb ~~)
		STATUS_NOT_FOUND ok!
		return
	end

	if (creationflags@ OSPROCESS_NOINHERITENV & ~~)
		// inherit the environment

		pebaddr@ OSPEBs_Environment + // dest
		OSPEB OSPEBs_Environment + // src
		OSENVIRONMENTSIZE // size
		memcpy
	end else
		// inherit only PWD

		auto buf
		"PWD" // name
		OSPEB OSPEBs_Environment + // envblock
		DLLFindEnvironmentVariable ok! buf! drop

		if (ok@)
			return
		end

		buf@ // env
		"PWD" // name
		pebaddr@ OSPEBs_Environment + // envblock
		DLLSetEnvironmentVariable drop
	end

	auto fullpath
	OSFILEPATHMAX alloc fullpath!

	argcn@ // argcn
	argvt@ // argvt
	path@ // path
	fullpath@ // fullpath
	pebaddr@ // pebaddr
	DLLConstructParameters ok!

	if (ok@)
		return
	end

	if (creationflags@ OSPROCESS_NOINHERIT & ~~)
		OSPEB OSPEBs_StdIn + @ pebaddr@ OSPEBs_StdIn + !
		OSPEB OSPEBs_StdOut + @ pebaddr@ OSPEBs_StdOut + !
		OSPEB OSPEBs_StdErr + @ pebaddr@ OSPEBs_StdErr + !
		OSPEB OSPEBs_CurrentDirectory + @ pebaddr@ OSPEBs_CurrentDirectory + !
	end else
		auto handle

		if (creationparams@ OSCreationParams_StdIn + @ OSNONE ~=)
			creationparams@ OSCreationParams_StdIn + @ // handle
			-1 // access
			OSCURRENTPROCESS // srcprocesshandle
			processhandle@ // destprocesshandle
			OSHandleDuplicate ok! handle!

			if (ok@)
				return
			end

			handle@ pebaddr@ OSPEBs_StdIn + !
		end else
			OSNONE pebaddr@ OSPEBs_StdIn + !
		end

		if (creationparams@ OSCreationParams_StdOut + @ OSNONE ~=)
			creationparams@ OSCreationParams_StdOut + @ // handle
			-1 // access
			OSCURRENTPROCESS // srcprocesshandle
			processhandle@ // destprocesshandle
			OSHandleDuplicate ok! handle!

			if (ok@)
				return
			end

			handle@ pebaddr@ OSPEBs_StdOut + !
		end else
			OSNONE pebaddr@ OSPEBs_StdOut + !
		end

		if (creationparams@ OSCreationParams_StdErr + @ OSNONE ~=)
			creationparams@ OSCreationParams_StdErr + @ // handle
			-1 // access
			OSCURRENTPROCESS // srcprocesshandle
			processhandle@ // destprocesshandle
			OSHandleDuplicate ok! handle!

			if (ok@)
				return
			end

			handle@ pebaddr@ OSPEBs_StdErr + !
		end else
			OSNONE pebaddr@ OSPEBs_StdErr + !
		end

		if (OSPEB OSPEBs_CurrentDirectory + @ OSNONE ~=)
			OSPEB OSPEBs_CurrentDirectory + @ // handle
			-1 // access
			OSCURRENTPROCESS // srcprocesshandle
			processhandle@ // destprocesshandle
			OSHandleDuplicate ok! handle!

			if (ok@)
				return
			end
		end else
			OSNONE handle!
		end

		handle@ pebaddr@ OSPEBs_CurrentDirectory + !
	end
end

fn DLLPEBCreate { -- pebaddr pebhandle ok }
	PAGEACCESS_READ PAGEACCESS_WRITE | // pageprotection
	OSPEBSIZE // anonsize
	OSNONE // filehandle
	ACCESS_OWNER_ALL // permissions
	0 // name
	OSSectionCreate ok! pebhandle!

	if (ok@)
		return
	end

	OSPEBSIZE // length
	HEAPSTART // startva
	0 // sectionoffset
	pebhandle@ // sectionhandle
	OSCURRENTPROCESS // processhandle
	PAGEACCESS_READ PAGEACCESS_WRITE | // pageprotection
	0 // flags
	OSSectionMapView ok! pebaddr!

	if (ok@)
		pebhandle@ OSClose drop
	end
end

fn DLLPEBCleanup { pebaddr pebhandle -- }
	pebhandle@ OSClose drop

	OSPEBSIZE // length
	pebaddr@ // vaddr
	OSCURRENTPROCESS // processhandle
	OSUnmapView drop
end

table DLLCreationBlockDefault
	OSNONE // StdIn
	OSNONE // StdOut
	OSNONE // StdErr
	// ... omitted until it exists ...
endtable

extern DLLMain { -- }

fn OSSpawnV { argcn argvt path creationflags creationparams permissions name -- threadhandle processhandle ok }
	if (creationparams@ ~~)
		DLLCreationBlockDefault creationparams!
	end

	auto pebhandle
	auto pebaddr

	DLLPEBCreate ok! pebhandle! pebaddr!

	if (ok@)
		return
	end

	auto rname

	if (name@)
		name@ rname!
	end else
		path@ OSLastComponent rname!
	end

	pebhandle@ // sectionhandle
	creationflags@ // creationflags
	permissions@ // permissions
	rname@ // name
	OSProcessCreate ok! processhandle!

	if (ok@)
		pebaddr@ // pebaddr
		pebhandle@ // pebhandle
		DLLPEBCleanup

		return
	end

	0 // context
	pointerof DLLMain // startfunc
	OSTHREAD_SUSPENDED // creationflags
	ACCESS_OWNER_ALL // permissions
	"Main" // name
	processhandle@ // processhandle
	OSThreadCreate ok! threadhandle!

	if (ok@)
		pebaddr@ // pebaddr
		pebhandle@ // pebhandle
		DLLPEBCleanup

		processhandle@ OSClose drop

		return
	end

	argcn@ // argcn
	argvt@ // argvt
	path@ // path
	creationflags@ // creationflags
	creationparams@ // creationparams
	pebaddr@ // pebaddr
	processhandle@ // processhandle
	DLLPEBInitialize ok!

	pebaddr@ // pebaddr
	pebhandle@ // pebhandle
	DLLPEBCleanup

	if (ok@)
		0 threadhandle@ OSThreadTerminate drop

		threadhandle@ OSClose drop
		processhandle@ OSClose drop

		return
	end

	if (creationflags@ OSPROCESS_SUSPENDED & ~~)
		threadhandle@ OSThreadResume drop

		auto activationstatus
		10000 // timeout
		processhandle@ // processhandle
		OSProcessWaitForActivation ok! activationstatus!

		if (ok@)
			0 threadhandle@ OSThreadTerminate drop

			threadhandle@ OSClose drop
			processhandle@ OSClose drop

			return
		end

		activationstatus@ ok!
	end
end

fn OSSpawn { ... path creationflags creationparams permissions name -- threadhandle processhandle ok }
	argc@ // argcn
	argv // argvt
	path@ // path
	creationflags@ // creationflags
	creationparams@ // creationparams
	permissions@ // permissions
	name@ // name
	OSSpawnV ok! processhandle! threadhandle!
end