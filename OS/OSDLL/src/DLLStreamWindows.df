//
// Implements stream window management.
//

#include "<df>/dragonfruit.h"

#include "<inc>/OSCalls.h"
#include "<inc>/OSMap.h"
#include "<inc>/OSFile.h"
#include "<inc>/OSAbort.h"
#include "<inc>/OSAccess.h"
#include "<inc>/OSObject.h"
#include "<inc>/OSStatus.h"
#include "<inc>/OSStream.h"
#include "<inc>/OSFastMutex.h"

#include "OSDLL.h"

//
// A stream window is a region into which a buffered file can be mapped.
// These are managed globally (to the process).
//

buffer DLLStreamWCBTable (DLLStreamWCB_SIZEOF DLLSTREAMWCBCOUNT *)

var DLLStreamWCBFreeListHead 0

var DLLStreamWCBReclaimableListHead 0
var DLLStreamWCBReclaimableListTail 0

buffer DLLStreamWCBFastMutex OSFastMutex_SIZEOF

fn DLLStreamInit { -- }
	"DLLStreamWCBFastMutex" // name
	DLLStreamWCBFastMutex // fastmutex
	OSFastMutexInitialize

	// link all of the WCBs into the free list

	auto i
	0 i!

	auto wcb
	DLLStreamWCBTable wcb!

	while (i@ DLLSTREAMWCBCOUNT <)
		DLLStreamWCBFreeListHead@ wcb@ DLLStreamWCB_FreeNext + !

		if (DLLStreamWCBFreeListHead@)
			wcb@ DLLStreamWCBFreeListHead@ DLLStreamWCB_FreePrev + !
		end

		wcb@ DLLStreamWCBFreeListHead!

		DLLStreamWCB_SIZEOF wcb +=
		1 i +=
	end

	// create stream for stdout

	auto ok
	-1 ok!

	auto stream

	if (OSPEB OSPEBs_StdOut + @ DLLNOSTREAM ~=)
		0 // flags
		OSPEB OSPEBs_StdOut + @ // filehandle
		OSStreamObjectCreate ok! stream!

		if (ok@ ~~)
			stream@ DLLStdOutStream!
		end
	end
end

fn DLLStreamWindowAllocate { -- }

end

fn DLLStreamWindowFreeChain { wcb -- }
	// free all of the WCBs in a chain
end

fn DLLStreamWindowRead { length buffer streamptr -- bytesread ok }

end

fn DLLStreamWindowWrite { length buffer streamptr -- bytesread ok }

end