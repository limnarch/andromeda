//
// Implements support for configuration files.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OSCalls.h"
#include "<ll>/OSDLL/OSMap.h"
#include "<ll>/OSDLL/OSAccess.h"
#include "<ll>/OSDLL/OSFile.h"
#include "<ll>/OSDLL/OSObject.h"
#include "<ll>/OSDLL/OSEnvironment.h"
#include "<ll>/OSDLL/OSStatus.h"
#include "<ll>/OSDLL/OSAlloc.h"
#include "<ll>/OSDLL/OSWait.h"
#include "<ll>/OSDLL/OSConfiguration.h"
#include "<ll>/OSDLL/OSStream.h"

#include "OSDLL.h"

const DLLCONFIGNAMEMAX 64

struct DLLConfigFile
	4 Handle

	4 SectionCount

	4 SectionListHead
	4 SectionListTail
endstruct

struct DLLConfigSection
	4 Next
	4 Prev

	DLLCONFIGNAMEMAX Name

	4 Config

	4 KeyCount

	4 KeyListHead
	4 KeyListTail
endstruct

struct DLLConfigKey
	4 Next
	4 Prev

	DLLCONFIGNAMEMAX Name

	4 Section

	4 Value
endstruct

fn OSConfigFileLoad { path create write -- config ok }
	auto handle

	auto access
	ACCESS_READ access!	

	if (write@)
		ACCESS_WRITE access |=
	end

	if (create@)
		OSSTREAMTYPE_FULLBUFFER // streamflags
		OSDEFAULTFILEPERMISSIONS // permissions
		0 // flags
		access@ // access
		path@ // path
		OSStreamCreate ok! handle!
	end else
		OSSTREAMTYPE_FULLBUFFER // streamflags
		0 // flags
		access@ // access
		path@ // path
		0 // ftype
		OSStreamOpen ok! handle!
	end

	if (ok@)
		return
	end

	DLLConfigFile_SIZEOF OSHeapAllocate ok! config!

	if (ok@)
		handle@ OSClose drop
		return
	end

	handle@ config@ DLLConfigFile_Handle + !

	0 config@ DLLConfigFile_SectionCount + !

	0 config@ DLLConfigFile_SectionListHead + !
	0 config@ DLLConfigFile_SectionListTail + !

	config@ DLLConfigFileParse ok!

	if (ok@)
		config@ OSConfigFileFree
	end else
		if (write@ ~~)
			// not writing, purge any mapped stream windows

			1 // purge
			handle@ // stream
			OSStreamFlush drop
		end
	end
end

fn OSConfigFileWrite { config -- ok }
	auto handle
	config@ DLLConfigFile_Handle + @ handle!

	0 // offset
	handle@ // handle
	OSSEEK_SET // mode
	OSStreamSeek ok! drop

	if (ok@)
		return
	end

	0 // newsize
	0 // growing
	handle@ // handle
	OSStreamTruncate ok! drop

	if (ok@)
		return
	end

	auto first
	2 first!

	auto section
	config@ DLLConfigFile_SectionListHead + @ section!

	while (section@)
		if (first@ ~~)
			0 // flags
			1 // length
			"\n" // buffer
			handle@ // filehandle
			OSStreamWrite ok! drop

			if (ok@)
				return
			end
		end

		auto hadkey
		section@ // section
		handle@ // handle
		DLLConfigSectionSerialize ok! hadkey!

		if (ok@)
			return
		end

		if (hadkey@)
			0 first!
		end

		if (first@)
			1 first -=
		end

		section@ DLLConfigSection_Next + @ section!
	end

	0 // purge
	handle@ // stream
	OSStreamFlush drop
end

fn OSConfigFileFree { config -- }
	auto section
	config@ DLLConfigFile_SectionListHead + @ section!

	while (section@)
		section@ DLLConfigFreeSection section!
	end

	config@ DLLConfigFile_Handle + @ OSStreamClose drop

	config@ OSHeapFree
end


fn OSConfigGetKey { keyname section -- key ok }
	keyname@ // keyname
	section@ // section
	DLLConfigFindKeyByName ok! key!
end

fn OSConfigGetKeyName { key -- name }
	key@ DLLConfigKey_Name + name!
end

fn OSConfigGetKeyValue { key -- valueptr }
	key@ DLLConfigKey_Value + @ valueptr!
end

fn OSConfigSetKey { valueptr key -- ok }
	auto oldvalue
	key@ DLLConfigKey_Value + @ oldvalue!

	if (valueptr@ ~~)
		if (oldvalue@)
			oldvalue@ OSHeapFree
		end

		0 key@ DLLConfigKey_Value + !

		return
	end

	auto vl
	valueptr@ strlen vl!

	auto value
	vl@ 1 + OSHeapAllocate ok! value!

	if (ok@)
		return
	end

	value@ // dest
	valueptr@ // src
	strcpy

	value@ key@ DLLConfigKey_Value + !

	if (oldvalue@)
		oldvalue@ OSHeapFree
	end
end

fn OSConfigCreateKey { valueptr keyname section -- key ok }
	keyname@ // keyname
	section@ // section
	DLLConfigFindKeyByName ok! key!

	if (ok@ ~~)
		valueptr@ // valueptr
		key@ // key
		OSConfigSetKey ok!

		return
	end

	keyname@ // name
	valueptr@ // value
	section@ // section
	DLLConfigAllocateKey ok! key!
end

fn OSConfigDeleteKey { key -- }
	key@ DLLConfigFreeKey drop
end


fn OSConfigGetSection { sectionname config -- section ok }
	sectionname@ // sectionname
	config@ // config
	DLLConfigFindSectionByName ok! section!
end

fn OSConfigGetSectionName { section -- name }
	section@ DLLConfigSection_Name + name!
end

fn OSConfigSetSectionName { name section -- }
	section@ DLLConfigSection_Name + // dest
	name@ // src
	DLLCONFIGNAMEMAX 1 - // max
	strncpy
end

fn OSConfigCreateSection { sectionname config -- section ok }
	sectionname@ // sectionname
	config@ // config
	DLLConfigFindSectionByName ok! section!

	if (ok@ ~~)
		return
	end

	sectionname@ // name
	config@ // config
	DLLConfigAllocateSection ok! section!
end

fn OSConfigDeleteSection { section -- }
	section@ DLLConfigFreeSection drop
end


fn OSConfigGetKeyIterator { sectionname config -- iterator ok }
	auto section
	sectionname@ // sectionname
	config@ // config
	DLLConfigFindSectionByName ok! section!

	if (ok@)
		return
	end

	section@ DLLConfigSection_KeyListHead + @ iterator!
end

fn OSConfigGetSectionIterator { config -- iterator ok }
	0 ok!
	config@ DLLConfigFile_SectionListHead + @ iterator!
end


fn OSConfigNextKey { iterator config -- key valueptr nextiterator ok }
	if (iterator@ ~~)
		-1 ok!
		return
	end

	iterator@ key!
	iterator@ DLLConfigKey_Value + @ valueptr!
	iterator@ DLLConfigKey_Next + @ nextiterator!

	0 ok!
end

fn OSConfigNextSection { iterator config -- section nextiterator ok }
	if (iterator@ ~~)
		-1 ok!
		return
	end

	iterator@ section!
	iterator@ DLLConfigSection_Next + @ nextiterator!

	0 ok!
end

fn OSConfigFileGetSectionCount { config -- count }
	config@ DLLConfigFile_SectionCount + @ count!
end

fn OSConfigSectionGetKeyCount { section -- count }
	section@ DLLConfigSection_KeyCount + @ count!
end

// internal functions

fn DLLConfigSectionSerialize { section handle -- hadkey ok }
	0 hadkey!

	if (section@ DLLConfigSection_Name + gb)
		0 // flags
		1 // length
		"@" // buffer
		handle@ // filehandle
		OSStreamWrite ok! drop

		if (ok@)
			return
		end

		0 // flags
		section@ DLLConfigSection_Name + strlen // length
		section@ DLLConfigSection_Name + // buffer
		handle@ // filehandle
		OSStreamWrite ok! drop

		if (ok@)
			return
		end

		0 // flags
		1 // length
		"\n" // buffer
		handle@ // filehandle
		OSStreamWrite ok! drop

		if (ok@)
			return
		end

		1 hadkey!
	end

	0 ok!

	auto key
	section@ DLLConfigSection_KeyListHead + @ key!

	while (key@)
		key@ // key
		handle@ // handle
		DLLConfigKeySerialize ok!

		if (ok@)
			return
		end

		1 hadkey!

		key@ DLLConfigKey_Next + @ key!
	end
end

fn DLLConfigKeySerialize { key handle -- ok }
	0 // flags
	key@ DLLConfigKey_Name + strlen // length
	key@ DLLConfigKey_Name + // buffer
	handle@ // filehandle
	OSStreamWrite ok! drop

	if (ok@)
		return
	end

	if (key@ DLLConfigKey_Value + @)
		0 // flags
		2 // length
		"='" // buffer
		handle@ // filehandle
		OSStreamWrite ok! drop

		if (ok@)
			return
		end

		0 // flags
		key@ DLLConfigKey_Value + @ strlen // length
		key@ DLLConfigKey_Value + @ // buffer
		handle@ // filehandle
		OSStreamWrite ok! drop

		if (ok@)
			return
		end

		0 // flags
		1 // length
		"'" // buffer
		handle@ // filehandle
		OSStreamWrite ok! drop

		if (ok@)
			return
		end
	end

	0 // flags
	1 // length
	"\n" // buffer
	handle@ // filehandle
	OSStreamWrite ok! drop

	if (ok@)
		return
	end
end

fn DLLConfigFindSectionByName { sectionname config -- section ok }
	-1 ok!

	config@ DLLConfigFile_SectionListHead + @ section!

	while (section@)
		if (section@ DLLConfigSection_Name + sectionname@ strcmp)
			0 ok!
			return
		end

		section@ DLLConfigSection_Next + @ section!
	end
end

fn DLLConfigFindKeyByName { keyname section -- key ok }
	-1 ok!

	section@ DLLConfigSection_KeyListHead + @ key!

	while (key@)
		if (key@ DLLConfigKey_Name + keyname@ strcmp)
			0 ok!
			return
		end

		key@ DLLConfigKey_Next + @ key!
	end
end

struct DLLParse
	4 Buffer
	4 Offset
	4 ValidBytes
	4 Handle
endstruct

const DLLCONFIGPARSEBUFFERSIZE 128
const DLLCONFIGLINEBUFFERSIZE  512

fn DLLConfigFileParse { config -- ok }
	auto buffer
	DLLCONFIGPARSEBUFFERSIZE OSHeapAllocate ok! buffer!

	if (ok@)
		return
	end

	auto parse
	DLLParse_SIZEOF alloc parse!

	config@ DLLConfigFile_Handle + @ parse@ DLLParse_Handle + !
	buffer@ parse@ DLLParse_Buffer + !
	0 parse@ DLLParse_ValidBytes + !
	0 parse@ DLLParse_Offset + !

	parse@ // parse
	config@ // config
	DLLConfigFileParseFile ok!

	buffer@ OSHeapFree
end

fn DLLConfigFileGetNextCharacter { parse -- c done ok }
	0 done!
	0 ok!

	if (parse@ DLLParse_Offset + @ parse@ DLLParse_ValidBytes + @ ==)
		// read in the next chunk

		auto bytesread
		OSWAIT_TIMEOUTINFINITE // timeout
		0 // flags
		DLLCONFIGPARSEBUFFERSIZE // length
		parse@ DLLParse_Buffer + @ // buffer
		parse@ DLLParse_Handle + @ // filehandle
		OSStreamRead ok! bytesread!

		if (ok@)
			return
		end

		if (bytesread@ ~~)
			1 done!
			return
		end

		bytesread@ parse@ DLLParse_ValidBytes + !
		0 parse@ DLLParse_Offset + !
	end

	parse@ DLLParse_Buffer + @ parse@ DLLParse_Offset + @ + gb c!
	1 parse@ DLLParse_Offset + +=
end

fn DLLConfigIsWhitespace { c -- iswhitespace }
	0 iswhitespace!

	if (c@ ' ' ==)
		1 iswhitespace!
	end elseif (c@ '\t' ==)
		1 iswhitespace!
	end elseif (c@ '=' ==)
		1 iswhitespace!
	end
end

fn DLLConfigFileGetNextLine { buffer parse -- done ok }
	// get the next line from the config file.
	// all extra whitespace should be trimmed, and comments removed.
	// =, space, and tab count as whitespace. this function normalizes them
	// all to the space character.

	auto ptr
	buffer@ ptr!

	auto len
	0 len!

	auto inwhitespace
	0 inwhitespace!

	auto instring
	0 instring!

	auto inescape
	0 inescape!

	auto incomment
	0 incomment!

	auto start
	1 start!

	while (1)
		auto c
		parse@ DLLConfigFileGetNextCharacter ok! done! c!

		if (ok@)
			return
		end

		if (done@)
			break
		end

		if (c@ '\n' ==)
			break
		end

		if (incomment@)
			continue
		end

		if (inescape@)
			1 len +=
			if (len@ DLLCONFIGLINEBUFFERSIZE >=)
				STATUS_INVALID_CONFIG_FILE ok!
				return
			end

			c@ ptr@ sb
			1 ptr +=

			0 inescape!
		end elseif (c@ '\\' ==)
			1 inescape!
			0 inwhitespace!
			0 start!
		end elseif (instring@)
			if (c@ 39 ==) // singlequote
				0 instring!
			end else
				1 len +=
				if (len@ DLLCONFIGLINEBUFFERSIZE >=)
					STATUS_INVALID_CONFIG_FILE ok!
					return
				end

				c@ ptr@ sb
				1 ptr +=
			end
		end elseif (c@ 39 ==) // singlequote
			1 instring!
			0 inwhitespace!
			0 start!
		end elseif (c@ '#' ==)
			1 incomment!
		end elseif (c@ DLLConfigIsWhitespace)
			if (inwhitespace@ ~~)
				if (start@ ~~)
					1 len +=
					if (len@ DLLCONFIGLINEBUFFERSIZE >=)
						STATUS_INVALID_CONFIG_FILE ok!
						return
					end

					1 inwhitespace!
					' ' ptr@ sb
					1 ptr +=
				end
			end
		end else
			1 len +=
			if (len@ DLLCONFIGLINEBUFFERSIZE >=)
				STATUS_INVALID_CONFIG_FILE ok!
				return
			end
		
			0 inwhitespace!
			0 start!
			c@ ptr@ sb
			1 ptr +=
		end
	end

	if (inwhitespace@)
		// remove extra space
		1 ptr -=
	end

	0 ptr@ sb
end

fn DLLConfigFileParseFile { parse config -- ok }
	0 // offset
	parse@ DLLParse_Handle + @ // handle
	OSSEEK_SET // mode
	OSStreamSeek ok! drop

	if (ok@)
		return
	end

	auto currentsection
	0 // name
	config@ // config
	DLLConfigAllocateSection ok! currentsection!

	if (ok@)
		return
	end

	auto linebuffer
	DLLCONFIGLINEBUFFERSIZE alloc linebuffer!

	auto keyname
	DLLCONFIGNAMEMAX alloc keyname!

	auto multilinecomment
	0 multilinecomment!

	while (1)
		auto done
		linebuffer@ // buffer
		parse@ // parse
		DLLConfigFileGetNextLine ok! done!

		if (ok@)
			return
		end

		if (linebuffer@ gb ~~)
			if (done@)
				return
			end

			continue
		end

		if (multilinecomment@)
			if (linebuffer@ ";;" strcmp)
				0 multilinecomment!
			end

			continue
		end

		if (linebuffer@ ";;" strcmp)
			1 multilinecomment!
			continue
		end

		if (linebuffer@ gb '@' ==)
			// new section

			if (linebuffer@ 1 + gb ~~)
				STATUS_INVALID_CONFIG_FILE ok!
				return
			end

			linebuffer@ 1 + // name
			config@ // config
			DLLConfigAllocateSection ok! currentsection!

			if (ok@)
				return
			end
		end else
			// new key

			auto ptr
			linebuffer@ ptr!

			auto valueptr

			while (ptr@ gb)
				if (ptr@ gb ' ' ==)
					ptr@ 1 + valueptr!
					0 ptr@ sb
					break
				end

				1 ptr +=
				ptr@ valueptr!
			end

			linebuffer@ // name
			valueptr@ // value
			currentsection@ // section
			DLLConfigAllocateKey ok! drop

			if (ok@)
				return
			end
		end

		if (done@)
			return
		end
	end
end

fn DLLConfigFreeSection { section -- nextsection }
	auto config
	section@ DLLConfigSection_Config + @ config!

	section@ DLLConfigSection_Next + @ nextsection!

	auto key
	section@ DLLConfigSection_KeyListHead + @ key!

	while (key@)
		key@ DLLConfigFreeKey key!
	end

	// remove from the section list

	1 config@ DLLConfigFile_SectionCount + -=

	auto ls
	section@ DLLConfigSection_Prev + @ ls!

	auto ns
	section@ DLLConfigSection_Next + @ ns!

	if (ls@)
		ns@ ls@ DLLConfigSection_Next + !
	end else
		ns@ config@ DLLConfigFile_SectionListHead + !
	end

	if (ns@)
		ls@ ns@ DLLConfigSection_Prev + !
	end else
		ls@ config@ DLLConfigFile_SectionListTail + !
	end

	section@ OSHeapFree
end

fn DLLConfigFreeKey { key -- nextkey }
	auto section
	key@ DLLConfigKey_Section + @ section!

	key@ DLLConfigKey_Next + @ nextkey!

	if (key@ DLLConfigKey_Value + @)
		key@ DLLConfigKey_Value + @ OSHeapFree
	end

	// remove from the key list

	1 section@ DLLConfigSection_KeyCount + -=

	auto ls
	key@ DLLConfigKey_Prev + @ ls!

	auto ns
	key@ DLLConfigKey_Next + @ ns!

	if (ls@)
		ns@ ls@ DLLConfigKey_Next + !
	end else
		ns@ section@ DLLConfigSection_KeyListHead + !
	end

	if (ns@)
		ls@ ns@ DLLConfigKey_Prev + !
	end else
		ls@ section@ DLLConfigSection_KeyListTail + !
	end

	key@ OSHeapFree
end

fn DLLConfigAllocateSection { name config -- section ok }
	DLLConfigSection_SIZEOF OSHeapAllocate ok! section!

	if (ok@)
		return
	end

	config@ section@ DLLConfigSection_Config + !

	if (name@)
		section@ DLLConfigSection_Name + // dest
		name@ // src
		DLLCONFIGNAMEMAX 1 - // max
		strncpy
	end else
		0 section@ DLLConfigSection_Name + sb
	end

	0 section@ DLLConfigSection_KeyCount + !

	0 section@ DLLConfigSection_KeyListHead + !
	0 section@ DLLConfigSection_KeyListTail + !

	// insert in the config file's list of sections

	1 config@ DLLConfigFile_SectionCount + +=

	auto t
	config@ DLLConfigFile_SectionListTail + @ t!

	if (t@ ~~)
		0 section@ DLLConfigSection_Next + !
		0 section@ DLLConfigSection_Prev + !

		section@ config@ DLLConfigFile_SectionListHead + !
		section@ config@ DLLConfigFile_SectionListTail + !
	end else
		0 section@ DLLConfigSection_Next + !

		t@ section@ DLLConfigSection_Prev + !
		section@ t@ DLLConfigSection_Next + !
		section@ config@ DLLConfigFile_SectionListTail + !
	end
end

fn DLLConfigAllocateKey { name value section -- key ok }
	DLLConfigKey_SIZEOF OSHeapAllocate ok! key!

	if (ok@)
		return
	end

	section@ key@ DLLConfigKey_Section + !

	key@ DLLConfigKey_Name + // dest
	name@ // src
	DLLCONFIGNAMEMAX 1 - // max
	strncpy

	if (value@ gb)
		auto vl
		value@ strlen vl!

		auto valueptr
		vl@ 1 + OSHeapAllocate ok! valueptr!

		if (ok@)
			key@ OSHeapFree
			return
		end

		valueptr@ // dest
		value@ // src
		strcpy

		valueptr@ key@ DLLConfigKey_Value + !
	end else
		0 key@ DLLConfigKey_Value + !
	end

	// insert in the section's list of keys

	1 section@ DLLConfigSection_KeyCount + +=

	auto t
	section@ DLLConfigSection_KeyListTail + @ t!

	if (t@ ~~)
		0 key@ DLLConfigKey_Next + !
		0 key@ DLLConfigKey_Prev + !

		key@ section@ DLLConfigSection_KeyListHead + !
		key@ section@ DLLConfigSection_KeyListTail + !
	end else
		0 key@ DLLConfigKey_Next + !

		t@ key@ DLLConfigKey_Prev + !
		key@ t@ DLLConfigKey_Next + !
		key@ section@ DLLConfigSection_KeyListTail + !
	end
end