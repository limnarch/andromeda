//
// Implements the architecture-independent part of OSFastMutex management.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OSCalls.h"
#include "<ll>/OSDLL/OSMap.h"
#include "<ll>/OSDLL/OSAccess.h"
#include "<ll>/OSDLL/OSFile.h"
#include "<ll>/OSDLL/OSObject.h"
#include "<ll>/OSDLL/OSEnvironment.h"
#include "<ll>/OSDLL/OSStatus.h"
#include "<ll>/OSDLL/OSWait.h"
#include "<ll>/OSDLL/OSFastMutex.h"
#include "<ll>/OSDLL/OSAbort.h"

#include "OSDLL.h"

buffer DLLFastMutexSemMutex OSFastMutex_SIZEOF

fn DLLFastMutexInit { -- }
	"DLLFastMutexSemMutex" // name
	DLLFastMutexSemMutex // fastmutex
	OSFastMutexInitialize

	auto ok
	auto semaphore
	0 // count
	ACCESS_OWNER_ALL // permissions
	0 // name
	OSSemaphoreCreate ok! semaphore!

	if (ok@)
		ok@ OSStatusGetName "DLLFastMutexInit: %s\n" OSError
	end

	semaphore@ DLLFastMutexSemMutex OSFastMutex_SemaphoreHandle + !
end

fn OSFastMutexInitialize { name fastmutex -- }
	OSNONE fastmutex@ OSFastMutex_SemaphoreHandle + !
	-1 fastmutex@ OSFastMutex_LockCount + !

	if (name@)
		name@ fastmutex@ OSFastMutex_Name + !
	end else
		"unnamed" fastmutex@ OSFastMutex_Name + !
	end

	0 fastmutex@ OSFastMutex_OwningThread + !
	0 fastmutex@ OSFastMutex_ThreadLockCount + !
end

fn OSFastMutexDelete { fastmutex -- }
	if (fastmutex@ OSFastMutex_SemaphoreHandle + @ OSNONE ~=)
		fastmutex@ OSFastMutex_SemaphoreHandle + @ OSClose drop
	end
end

fn DLLFastMutexWait { fastmutex -- }
	auto semaphore
	fastmutex@ OSFastMutex_SemaphoreHandle + @ semaphore!

	if (semaphore@ OSNONE ==)
		fastmutex@ DLLFastMutexCreateSemaphore semaphore!
	end

	auto ok
	0 // alertable
	30000 // timeout
	semaphore@ // objecthandle
	OSWaitForObject ok!

	if (ok@)
		ok@ OSStatusGetName
		fastmutex@ OSFastMutex_Name + @
		"DLLFastMutexWait: %s: %s\n" OSAbort
	end
end

fn DLLFastMutexWake { fastmutex -- }
	auto semaphore
	fastmutex@ OSFastMutex_SemaphoreHandle + @ semaphore!

	if (semaphore@ OSNONE ==)
		fastmutex@ DLLFastMutexCreateSemaphore semaphore!
	end

	1 // adjustment
	semaphore@ // semaphorehandle
	OSSemaphoreRelease drop
end

fn DLLFastMutexCreateSemaphore { fastmutex -- semaphore }
	DLLFastMutexSemMutex OSFastMutexAcquire

	fastmutex@ OSFastMutex_SemaphoreHandle + @ semaphore!

	if (semaphore@ OSNONE ==)
		auto ok
		0 // count
		ACCESS_OWNER_ALL // permissions
		0 // name
		OSSemaphoreCreate ok! semaphore!

		if (ok@)
			ok@ OSStatusGetName "DLLFastMutexCreateSemaphore: %s\n" OSAbort
		end

		semaphore@ fastmutex@ OSFastMutex_SemaphoreHandle + !
	end

	DLLFastMutexSemMutex OSFastMutexRelease
end