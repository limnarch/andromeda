//
// AMS user and group creation.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"
#include "<ll>/OSDLL/OSCrypt.h"

#include "<inc>/AmsAPI.h"

#include "Ams.h"

fn AmsUserCreate { password info processhandle -- uid ok }
	SYSTEMPERMISSION_ADMIN // permission
	processhandle@ // processhandle
	OSCheckPermission ok!

	if (ok@)
		return
	end

	// check if the user already exists.

	info@ AmsUserInformation_UserName + // username
	AmsDbUserGetByName ok! drop

	if (ok@ STATUS_NO_SUCH_USER ~=)
		STATUS_USER_EXISTS ok!

		return
	end

	// create the user with the specified initial properties.

	auto userptr
	info@ AmsUserInformation_UserName + // username
	AmsDbUserCreate ok! userptr! uid!

	if (ok@)
		return
	end

	info@ AmsUserInformation_GID + @ // value
	"gid" // property
	userptr@ // userptr
	AmsDbUserSetPropertyNumeric ok!

	if (ok@)
		userptr@ AmsDbUserDelete

		return
	end

	info@ AmsUserInformation_Home + // value
	"home" // property
	userptr@ // userptr
	AmsDbUserSetProperty ok!

	if (ok@)
		userptr@ AmsDbUserDelete

		return
	end

	info@ AmsUserInformation_Shell + // value
	"shell" // property
	userptr@ // userptr
	AmsDbUserSetProperty ok!

	if (ok@)
		userptr@ AmsDbUserDelete

		return
	end

	info@ AmsUserInformation_PoolQuota + @ // value
	"poolquota" // property
	userptr@ // userptr
	AmsDbUserSetPropertyNumeric ok!

	if (ok@)
		userptr@ AmsDbUserDelete

		return
	end

	info@ AmsUserInformation_PagedPoolQuota + @ // value
	"pgpoolquota" // property
	userptr@ // userptr
	AmsDbUserSetPropertyNumeric ok!

	if (ok@)
		userptr@ AmsDbUserDelete

		return
	end

	info@ AmsUserInformation_VirtualMemoryQuota + @ // value
	"vmquota" // property
	userptr@ // userptr
	AmsDbUserSetPropertyNumeric ok!

	if (ok@)
		userptr@ AmsDbUserDelete

		return
	end

	info@ AmsUserInformation_WorkingSetQuota + @ // value
	"wsquota" // property
	userptr@ // userptr
	AmsDbUserSetPropertyNumeric ok!

	if (ok@)
		userptr@ AmsDbUserDelete

		return
	end

	auto hash
	AMSPASSWORDHASHLENGTH alloc hash!

	password@ // userpass
	hash@ // hash
	AmsGeneratePasswordHash

	hash@ // value
	"password" // property
	userptr@ // userptr
	AmsDbUserSetProperty ok!

	if (ok@)
		userptr@ AmsDbUserDelete

		return
	end

	AmsDbUserWrite ok!

	if (ok@)
		userptr@ AmsDbUserDelete

		return
	end
end

fn AmsUserDelete { uid processhandle -- ok }
	SYSTEMPERMISSION_ADMIN // permission
	processhandle@ // processhandle
	OSCheckPermission ok!

	if (ok@)
		return
	end

	auto userptr
	uid@ // uid
	AmsDbUserGetByUID ok! userptr!

	if (ok@)
		return
	end

	userptr@ AmsDbUserDelete
end

fn AmsGroupCreate { info processhandle -- gid ok }
	SYSTEMPERMISSION_ADMIN // permission
	processhandle@ // processhandle
	OSCheckPermission ok!

	if (ok@)
		return
	end

	// check if the group already exists.

	info@ AmsGroupInformation_GroupName + // groupname
	AmsDbGroupGetByName ok! drop

	if (ok@ STATUS_NO_SUCH_GROUP ~=)
		STATUS_GROUP_EXISTS ok!

		return
	end

	// create the group with the specified initial properties.

	auto groupptr
	info@ AmsGroupInformation_GroupName + // username
	AmsDbGroupCreate ok! groupptr! gid!

	if (ok@)
		return
	end

	AmsDbGroupWrite ok!

	if (ok@)
		groupptr@ AmsDbGroupDelete

		return
	end
end

fn AmsGroupDelete { gid processhandle -- ok }
	SYSTEMPERMISSION_ADMIN // permission
	processhandle@ // processhandle
	OSCheckPermission ok!

	if (ok@)
		return
	end

	auto groupptr
	gid@ // gid
	AmsDbGroupGetByGID ok! groupptr!

	if (ok@)
		return
	end

	groupptr@ AmsDbGroupDelete
end

fn AmsUserEdit { info uid processhandle -- ok }
	SYSTEMPERMISSION_ADMIN // permission
	processhandle@ // processhandle
	OSCheckPermission ok!

	if (ok@)
		return
	end

	0 ok!
end

fn AmsGroupEdit { info gid processhandle -- ok }
	SYSTEMPERMISSION_ADMIN // permission
	processhandle@ // processhandle
	OSCheckPermission ok!

	if (ok@)
		return
	end

	0 ok!
end