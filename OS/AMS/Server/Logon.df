//
// AMS log-on management.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"
#include "<ll>/OSDLL/OSCrypt.h"

#include "<inc>/AmsAPI.h"

#include "AmsServer.h"

fn AmsCheckPassword { password userpass -- ok }
	auto hash
	AMSPASSWORDHASHLENGTH alloc hash!

	password@ // string
	userpass@ gi // salt
	hash@ // hash
	OSSimpleCrypt

	if (hash@ userpass@ strcmp ~~)
		STATUS_INCORRECT_PASSWORD ok!
		return
	end

	0 ok!
end

fn AmsUserGetRestrictionLevel { userptr -- level }
	auto ok
	"restrict" // property
	userptr@ // userptr
	AmsDbUserGetPropertyNumeric ok! level!

	if (ok@)
		AMSRESTRICT_NORMAL level!

		return
	end
end

fn AmsInternalLogon { flags password uid processhandle -- obdirhandle ok }
	// only the system can validate a logon since anyone else can be snooped
	// on or malicious.

	SYSTEMPERMISSION_SYSTEM // permission
	processhandle@ // processhandle
	OSCheckPermission ok!

	if (ok@)
		return
	end

	auto userptr
	uid@ AmsDbUserGetByUID ok! userptr!

	if (ok@)
		return
	end

	auto gid
	"gid" // property
	userptr@ // userptr
	AmsDbUserGetPropertyNumeric ok! gid!

	if (ok@)
		return
	end

	auto username
	userptr@ AmsDbUserGetName username!

	auto userpass
	"password" // property
	userptr@ // userptr
	AmsDbUserGetProperty ok! userpass!

	if (ok@)
		return
	end

	if (userpass@ "none" strcmp)
		STATUS_INCORRECT_PASSWORD ok!
		return
	end

	password@ // password
	userpass@ // userpass
	AmsCheckPassword ok!

	if (ok@)
		return
	end

	// open or create the user's object directory.

	auto stringbuf
	128 alloc stringbuf!

	stringbuf@ // dest
	"//:/Users/" // src
	strcpy

	stringbuf@ stringbuf@ strlen + // dest
	username@ // src
	strcpy

	0 // flags
	ACCESS_ALL // access
	stringbuf@ // path
	OSOpen ok! obdirhandle!

	if (ok@ ~~)
		return
	end

	ACCESS_OWNER_ALL // permissions
	username@ // name
	OSObjectDirectoryCreate ok! obdirhandle!

	if (ok@)
		return
	end

	obdirhandle@ // objecthandle
	AmsUsersDirectory@ // directoryhandle
	OSObjectDirectoryInsert ok!

	if (ok@)
		obdirhandle@ OSClose drop

		return
	end

	uid@ // uid
	gid@ // gid
	-1 // permissions
	obdirhandle@ // handle
	OSSetSecurity ok!

	if (ok@)
		obdirhandle@ OSClose drop
	end
end

fn AmsInternalChangePassword { oldpassword newpassword uid processhandle -- ok }
	auto notadmin

	auto self
	0 self!

	SYSTEMPERMISSION_ADMIN // permission
	processhandle@ // processhandle
	OSCheckPermission notadmin!

	if (notadmin@)
		// not admin, check if same UID at least

		auto pinfo
		OSObjectQuery_SIZEOF alloc pinfo!

		processhandle@ // handle
		pinfo@ // query
		OSQuery ok!

		if (ok@)
			return
		end

		if (pinfo@ OSObjectQuery_UID + @ uid@ ~=)
			// not same UID; can't change password even if we have the correct
			// old password.

			STATUS_PERMISSION_DENIED ok!

			return
		end

		1 self!
	end

	auto userptr
	uid@ AmsDbUserGetByUID ok! userptr!

	if (ok@)
		return
	end

	if (self@)
		auto level
		userptr@ AmsUserGetRestrictionLevel level!

		if (level@ AMSRESTRICT_PASSWD >=)
			// user is restricted from changing their password.

			STATUS_FORBIDDEN_OPERATION ok!

			return
		end
	end

	if (notadmin@ uid@ UID_SYSTEM == ||)
		auto userpass
		"password" // property
		userptr@ // userptr
		AmsDbUserGetProperty ok! userpass!

		if (ok@)
			return
		end

		if (uid@ UID_SYSTEM ~=)
			if (userpass@ "none" strcmp)
				STATUS_INCORRECT_PASSWORD ok!
				return
			end
		end

		oldpassword@ // password
		userpass@ // userpass
		AmsCheckPassword ok!

		if (ok@)
			return
		end
	end

	auto hash
	AMSPASSWORDHASHLENGTH alloc hash!

	newpassword@ // userpass
	hash@ // hash
	AmsGeneratePasswordHash

	hash@ // value
	"password" // property
	userptr@ // userptr
	AmsDbUserSetProperty ok!

	if (ok@)
		return
	end

	AmsDbUserWrite ok!
end

fn AmsGeneratePasswordHash { userpass hash -- }
	// no, this is not very secure.

	auto ms
	auto sec

	OSQueryTime ms! sec!

	sec@ ms@ ^ ms!

	auto sb0
	ms@ 63 & '.' + sb0!

	auto sb1
	ms@ 6 >> 63 & '.' + sb1!

	if (sb0@ '9' >)
		7 sb0 +=
	end
	if (sb0@ 'Z' >)
		6 sb0 +=
	end
	if (sb1@ '9' >)
		7 sb1 +=
	end
	if (sb1@ 'Z' >)
		6 sb1 +=
	end

	auto salt
	sb0@ sb1@ 8 << | salt!

	userpass@ // string
	salt@ // salt
	hash@ // hash
	OSSimpleCrypt
end