//
// AMS log-on management.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"
#include "<ll>/OSDLL/OSCrypt.h"

#include "<inc>/AmsAPI.h"

#include "AmsServer.h"

fn AmsCheckPassword { password userpass -- ok }
	auto hash
	AMSPASSWORDHASHLENGTH alloc hash!

	password@ // string
	userpass@ gi // salt
	hash@ // hash
	OSSimpleCrypt

	if (hash@ userpass@ strcmp ~~)
		STATUS_INCORRECT_PASSWORD ok!
		return
	end

	0 ok!
end

fn AmsUserGetRestrictionLevel { userptr -- level }
	auto ok
	"restrict" // property
	userptr@ // userptr
	AmsDbUserGetPropertyNumeric ok! level!

	if (ok@)
		AMSRESTRICT_NORMAL level!

		return
	end
end

fn AmsInternalLogon { flags password uid processhandle -- obdirhandle ok }
	// only the system can validate a logon since anyone else can be snooped
	// on or malicious.

	SYSTEMPERMISSION_SYSTEM // permission
	processhandle@ // processhandle
	OSCheckPermission ok!

	if (ok@)
		return
	end

	auto userptr
	uid@ AmsDbUserGetByUID ok! userptr!

	if (ok@)
		return
	end

	auto level
	userptr@ AmsUserGetRestrictionLevel level!

	if (level@ AMSRESTRICT_NOLOG &)
		STATUS_INCORRECT_PASSWORD ok!
		return
	end

	auto gid
	"gid" // property
	userptr@ // userptr
	AmsDbUserGetPropertyNumeric ok! gid!

	if (ok@)
		return
	end

	auto username
	userptr@ AmsDbUserGetName username!

	auto userpass
	"password" // property
	userptr@ // userptr
	AmsDbUserGetProperty ok! userpass!

	if (ok@)
		return
	end

	if (userpass@ "none" strcmp)
		STATUS_INCORRECT_PASSWORD ok!
		return
	end

	password@ // password
	userpass@ // userpass
	AmsCheckPassword ok!

	if (ok@)
		return
	end

	// Open or create the user's object directory. There's no possibility for
	// a race condition here since we're the only one who creates user object
	// directories, but if that changes then that might be bad.

	auto stringbuf
	128 alloc stringbuf!

	stringbuf@ // dest
	"//:/Users/" // src
	strcpy

	stringbuf@ stringbuf@ strlen + // dest
	username@ // src
	strcpy

	0 // filetype
	OSTYPE_DIRECTORY // objecttype
	0 // flags
	ACCESS_ALL // access
	stringbuf@ // path
	OSOpen ok! obdirhandle!

	if (ok@ ~~)
		return
	end

	ACCESS_OWNER_ALL // permissions
	username@ // name
	OSObjectDirectoryCreate ok! obdirhandle!

	if (ok@)
		return
	end

	obdirhandle@ // objecthandle
	AmsUsersDirectory@ // directoryhandle
	OSObjectDirectoryInsert ok!

	if (ok@)
		obdirhandle@ OSClose drop

		return
	end

	uid@ // uid
	gid@ // gid
	-1 // permissions
	obdirhandle@ // handle
	OSSetSecurity ok!

	if (ok@)
		obdirhandle@ OSClose drop
	end
end

fn AmsInternalChangePassword { flags oldpassword newpassword uid processhandle -- ok }
	auto userptr
	uid@ AmsDbUserGetByUID ok! userptr!

	if (ok@)
		return
	end

	auto pinfo
	OSObjectQuery_SIZEOF alloc pinfo!

	processhandle@ // handle
	pinfo@ // query
	OSQuery ok!

	if (ok@)
		return
	end

	auto remote
	0 remote!

	if (pinfo@ OSObjectQuery_UID + @ uid@ ~=)
		// not same UID.

		if (uid@ UID_SYSTEM ==)
			// this is the system user and we aren't the system user, so we
			// cannot change the password.

			STATUS_FORBIDDEN_OPERATION ok!

			return
		end

		SYSTEMPERMISSION_ADMIN // permission
		processhandle@ // processhandle
		OSCheckPermission ok!

		if (ok@)
			// not the same UID and we aren't an admin, so return.

			return
		end

		1 remote!
	end else
		auto level
		userptr@ AmsUserGetRestrictionLevel level!

		if (level@ AMSRESTRICT_PASSWD &)
			// user is restricted from changing their password.

			STATUS_PERMISSION_DENIED ok!

			return
		end

		if (pinfo@ OSObjectQuery_UID + @ UID_SYSTEM ==)
			1 remote!
		end
	end

	if (remote@ ~~)
		auto userpass
		"password" // property
		userptr@ // userptr
		AmsDbUserGetProperty ok! userpass!

		if (ok@)
			return
		end

		if (uid@ UID_SYSTEM ~=)
			if (userpass@ "none" strcmp)
				STATUS_INCORRECT_PASSWORD ok!

				return
			end
		end

		oldpassword@ // password
		userpass@ // userpass
		AmsCheckPassword ok!

		if (ok@)
			return
		end
	end

	auto hash
	AMSPASSWORDHASHLENGTH alloc hash!

	newpassword@ // userpass
	hash@ // hash
	AmsGeneratePasswordHash

	hash@ // value
	"password" // property
	userptr@ // userptr
	AmsDbUserSetProperty ok!

	if (ok@)
		return
	end

	if (flags@ AMSCHANGEPASSWORD_ENDSESSIONS &)
		// boot off any sessions under this UID.

		OSNONE // excludedprocess
		OSSIGNAL_TERM // signal
		uid@ // uid
		AmsClientSignalByUID
	end

	AmsDbUserWrite ok!
end

fn AmsGeneratePasswordHash { userpass hash -- }
	// no, this is not very secure.

	auto ms
	auto sec

	OSQueryTime ms! sec!

	sec@ ms@ ^ ms!

	auto sb0
	ms@ 63 & '.' + sb0!

	auto sb1
	ms@ 6 >> 63 & '.' + sb1!

	if (sb0@ '9' >)
		7 sb0 +=
	end
	if (sb0@ 'Z' >)
		6 sb0 +=
	end
	if (sb1@ '9' >)
		7 sb1 +=
	end
	if (sb1@ 'Z' >)
		6 sb1 +=
	end

	auto salt
	sb0@ sb1@ 8 << | salt!

	userpass@ // string
	salt@ // salt
	hash@ // hash
	OSSimpleCrypt
end