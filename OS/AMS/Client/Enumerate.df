//
// AMS enumeration APIs.
//

#include "<df>/dragonfruit.h"

#include "<ll>/OSDLL/OS.h"

#include "<inc>/AmsAPI.h"

#include "AmsClient.h"

struct AmsEnumerationHeader
	4 Count
	4 Next
endstruct

fn AmsEmumerateUsers { -- enumeration ok }
	auto txmsg
	AmsMessage_SIZEOF alloc txmsg!

	0 enumeration!

	auto lastenum
	0 lastenum!

	AmsLock

	-1 AmsSectionBase@ AmsMessageEnumerate_Context + !

	while (1)
		OSPORT_MESSAGE_REQUEST txmsg@ OSMessageHeader_TypeB + sb
		AMSAPI_ENUMERATE_USERS txmsg@ OSMessageHeader_SubtypeB + sb
		OSNONE txmsg@ OSMessageHeader_Handle + !
		AMSBODYLENGTH txmsg@ OSMessageHeader_LengthI + si

		txmsg@ // rxmsg
		txmsg@ // txmsg
		OSWAIT_TIMEOUTINFINITE // timeout
		AmsApiPort@ // porthandle
		OSPortSendAndWaitReply ok!

		if (ok@)
			break
		end

		txmsg@ AmsMessage_Status + @ ok!

		if (ok@)
			break
		end

		auto ids
		AmsSectionBase@ AmsMessageEnumerate_ReturnedIDs + @ ids!

		auto enum
		AmsEnumerationHeader_SIZEOF ids@ AmsUserEnumeration_SIZEOF * + // bytes
		OSHeapAllocate ok! enum!

		if (ok@)
			break
		end

		if (enumeration@ ~~)
			enum@ enumeration!
		end

		ids@ enum@ AmsEnumerationHeader_Count + !
		0 enum@ AmsEnumerationHeader_Next + !

		if (lastenum@)
			enum@ lastenum@ AmsEnumerationHeader_Next + !
		end

		enum@ lastenum!

		enum@ AmsEnumerationHeader_SIZEOF + // dest
		AmsSectionBase@ AmsMessageEnumerate_SIZEOF + // src
		ids@ AmsUserEnumeration_SIZEOF * // sz
		memcpy

		if (AmsSectionBase@ AmsMessageEnumerate_Context + @ -1 ==)
			// no more
			break
		end
	end

	AmsUnlock

	if (ok@)
		if (enumeration@)
			enumeration@ AmsFreeEnumeration
		end
	end
end

fn AmsEmumerateGroups { -- enumeration ok }
	auto txmsg
	AmsMessage_SIZEOF alloc txmsg!

	0 enumeration!

	auto lastenum
	0 lastenum!

	AmsLock

	-1 AmsSectionBase@ AmsMessageEnumerate_Context + !

	while (1)
		OSPORT_MESSAGE_REQUEST txmsg@ OSMessageHeader_TypeB + sb
		AMSAPI_ENUMERATE_GROUPS txmsg@ OSMessageHeader_SubtypeB + sb
		OSNONE txmsg@ OSMessageHeader_Handle + !
		AMSBODYLENGTH txmsg@ OSMessageHeader_LengthI + si

		txmsg@ // rxmsg
		txmsg@ // txmsg
		OSWAIT_TIMEOUTINFINITE // timeout
		AmsApiPort@ // porthandle
		OSPortSendAndWaitReply ok!

		if (ok@)
			break
		end

		txmsg@ AmsMessage_Status + @ ok!

		if (ok@)
			break
		end

		auto ids
		AmsSectionBase@ AmsMessageEnumerate_ReturnedIDs + @ ids!

		auto enum
		AmsEnumerationHeader_SIZEOF ids@ AmsGroupEnumeration_SIZEOF * + // bytes
		OSHeapAllocate ok! enum!

		if (ok@)
			break
		end

		if (enumeration@ ~~)
			enum@ enumeration!
		end

		ids@ enum@ AmsEnumerationHeader_Count + !
		0 enum@ AmsEnumerationHeader_Next + !

		if (lastenum@)
			enum@ lastenum@ AmsEnumerationHeader_Next + !
		end

		enum@ lastenum!

		enum@ AmsEnumerationHeader_SIZEOF + // dest
		AmsSectionBase@ AmsMessageEnumerate_SIZEOF + // src
		ids@ AmsGroupEnumeration_SIZEOF * // sz
		memcpy

		if (AmsSectionBase@ AmsMessageEnumerate_Context + @ -1 ==)
			// no more
			break
		end
	end

	AmsUnlock

	if (ok@)
		if (enumeration@)
			enumeration@ AmsFreeEnumeration
		end
	end
end

fn AmsFreeEnumeration { enumeration -- }
	while (enumeration@)
		auto nenum
		enumeration@ AmsEnumerationHeader_Next + @ nenum!

		enumeration@ OSHeapFree

		nenum@ enumeration!
	end
end

fn AmsRunForEachUserEnumeration { context func enumeration -- ok }
	auto index
	0 index!

	while (enumeration@)
		auto count
		enumeration@ AmsEnumerationHeader_Count + @ count!

		auto enum
		enumeration@ AmsEnumerationHeader_SIZEOF + enum!

		while (count@)
			context@ // context
			enum@ // enum
			index@ // index
			func@ AmsEnumerationFunction ok!

			if (ok@)
				// break
				return
			end

			1 count -=
			1 index +=
			AmsUserEnumeration_SIZEOF enum +=
		end

		enumeration@ AmsEnumerationHeader_Next + @ enumeration!
	end
end

fn AmsRunForEachGroupEnumeration { context func enumeration -- ok }
	auto index
	0 index!

	while (enumeration@)
		auto count
		enumeration@ AmsEnumerationHeader_Count + @ count!

		auto enum
		enumeration@ AmsEnumerationHeader_SIZEOF + enum!

		while (count@)
			context@ // context
			enum@ // enum
			index@ // index
			func@ AmsEnumerationFunction ok!

			if (ok@)
				// break
				return
			end

			1 count -=
			1 index +=
			AmsGroupEnumeration_SIZEOF enum +=
		end

		enumeration@ AmsEnumerationHeader_Next + @ enumeration!
	end
end

fn AmsIndexUserEnumeration { index enumeration -- enum ok }
	-1 ok!

	while (enumeration@)
		if (index@ enumeration@ AmsEnumerationHeader_Count + @ <)
			enumeration@ AmsEnumerationHeader_SIZEOF + enum!

			index@ AmsUserEnumeration_SIZEOF * enum +=

			0 ok!

			return
		end

		enumeration@ AmsEnumerationHeader_Count + @ index -=

		enumeration@ AmsEnumerationHeader_Next + @ enumeration!
	end
end

fn AmsIndexGroupEnumeration { index enumeration -- enum ok }
	-1 ok!

	while (enumeration@)
		if (index@ enumeration@ AmsEnumerationHeader_Count + @ <)
			enumeration@ AmsEnumerationHeader_SIZEOF + enum!

			index@ AmsGroupEnumeration_SIZEOF * enum +=

			0 ok!

			return
		end

		enumeration@ AmsEnumerationHeader_Count + @ index -=

		enumeration@ AmsEnumerationHeader_Next + @ enumeration!
	end
end